ifeq ($(VSCALE_DIR),)
$(error VSCALE_DIR must be defined)
endif

ifeq ($(VANILLA_DIR),)
$(error VANILLA_DIR must be defined)
endif

ifeq ($(BSG_IP_CORES_DIR),)
$(error BSG_IP_CORES_DIR must be defined)
endif

ifeq ($(BSG_MANYCORE_DIR),)
$(error BSG_MANYCORE_DIR must be defined)
endif

MANYCORE_PROC = VANILLA

VSCALE_SRC    = $(VSCALE_DIR)/src/main/verilog
VANILLA_SRC   = $(BSG_MANYCORE_DIR)/v/vanilla_bean
VANILLA_MEM   = $(VANILLA_DIR)/parts/generic

VLOG  = xvlog -sv ${BSG_FPU_OP}
VELAB = xelab -debug typical ${BSG_FPU_OP} -s top_sim
VSIM  = xsim --runall top_sim

BSG_FPU_OP    = -d bsg_FPU
#############################################################
#  Define the hardfloat source files.
ifneq ($(BSG_FPU_OP), )

HARDFLOAT_DIR = $(VANILLA_SRC)/bsg_ucb_hardfloat
HARDFLOAT_VSRC = $(HARDFLOAT_DIR)/bsg_ucb_hardfloat.v
HARDFLOAT_SSRC = $(BERKELEY_HARDFLOAT_DIR)/src/main/scala/bsg_ucb_hardfloat.scala 
HARDFLOAT_VER  = a07029b 

ifeq ($(BERKELEY_HARDFLOAT_DIR),)
$(error BERKELEY_HARDFLOAT_DIR must be defined)
endif

SBT := $(shell command -v sbt 2> /dev/null)
ifndef SBT
$(error Please install sbt program)
endif

CHISEL_VERSION = 2.2.32


##########################
# Adding source files
FPU_SRC       = $(addprefix $(VANILLA_SRC)/, float_decode.v fpi.v fiu.v fam.v )
FPU_SRC      += $(addprefix $(BSG_IP_CORES_DIR)/bsg_dataflow/, \
                            bsg_round_robin_n_to_1.v )
FPU_SRC      += $(addprefix $(BSG_IP_CORES_DIR)/bsg_mem/, \
                            bsg_mem_3r1w.v )
FPU_SRC      += $(HARDFLOAT_VSRC)
else
FPU_SRC       = 
endif

DESIGN_HDRS = 
DESIGN_SRCS = 

ifeq ($(MANYCORE_PROC),VSCALE)
  DESIGN_HDRS += $(addprefix $(VSCALE_SRC)/, vscale_ctrl_constants.vh rv32_opcodes.vh vscale_alu_ops.vh            \
                                          vscale_md_constants.vh vscale_hasti_constants.vh vscale_csr_addr_map.vh) \
                 -i $(VSCALE_SRC)/
  DESIGN_SRCS += $(addprefix $(BSG_MANYCORE_DIR)/v/vscale/, vscale_pipeline.v vscale_ctrl.v) \
		 $(addprefix $(VSCALE_SRC)/, vscale_regfile.v vscale_src_a_mux.v vscale_src_b_mux.v vscale_imm_gen.v vscale_alu.v \
		   vscale_mul_div.v vscale_csr_file.v vscale_PC_mux.v) \
                 $(addprefix $(BSG_MANYCORE_DIR)/v/, bsg_vscale_pkg.v bsg_vscale_core.v bsg_manycore_proc.v)
else ifeq ($(MANYCORE_PROC),VANILLA)
  DESIGN_HDRS += -i $(VANILLA_SRC)/ -i $(VSCALE_SRC)/
  DESIGN_SRCS += $(addprefix $(VANILLA_SRC)/, alu.v cl_decode.v cl_state_machine.v hobbit.v bsg_manycore_proc.v) \
		 $(addprefix $(VSCALE_SRC)/, vscale_mul_div.v) \
         $(FPU_SRC)\
		 $(addprefix $(BSG_IP_CORES_DIR)/bsg_mem/, bsg_mem_1rw_sync.v bsg_mem_2r1w.v bsg_mem_1r1w.v \
                              bsg_mem_banked_crossbar.v) \
		 $(addprefix $(BSG_IP_CORES_DIR)/bsg_dataflow/, bsg_fifo_tracker.v) \
		 $(addprefix $(BSG_MANYCORE_DIR)/v/, bsg_manycore_pkt_decode.v bsg_manycore_pkt_encode.v)
else
  $(error MANYCORE_PROC not defined or unknown)
endif

DESIGN_HDRS += $(addprefix $(BSG_IP_CORES_DIR)/, bsg_misc/bsg_defines.v bsg_noc/bsg_noc_pkg.v)                      \
               -i $(BSG_MANYCORE_DIR)/v/

DESIGN_SRCS += \
  $(addprefix $(BSG_IP_CORES_DIR)/, bsg_misc/bsg_transpose.v bsg_misc/bsg_crossbar_o_by_i.v bsg_misc/bsg_cycle_counter.v\
    bsg_misc/bsg_round_robin_arb.v bsg_misc/bsg_arb_fixed.v bsg_misc/bsg_priority_encode.v bsg_misc/bsg_priority_encode_one_hot_out.v bsg_misc/bsg_mux_one_hot.v bsg_misc/bsg_encode_one_hot.v bsg_misc/bsg_scan.v \
    bsg_misc/bsg_circular_ptr.v bsg_mem/bsg_mem_1r1w.v bsg_mem/bsg_mem_banked_crossbar.v          \
    bsg_mem/bsg_mem_1rw_sync_mask_write_byte.v bsg_mem/bsg_mem_1rw_sync.v bsg_dataflow/bsg_fifo_1r1w_small.v bsg_dataflow/bsg_two_fifo.v \
    bsg_test/bsg_nonsynth_clock_gen.v bsg_test/bsg_nonsynth_reset_gen.v bsg_noc/bsg_mesh_router.v bsg_noc/bsg_mesh_router_buffered.v) \
  $(addprefix $(BSG_MANYCORE_DIR)/v/, bsg_manycore_tile.v bsg_manycore.v bsg_manycore_pkt_encode.v bsg_manycore_pkt_decode.v)           \
  $(addprefix $(BSG_MANYCORE_DIR)/testbenches/common/v/, bsg_manycore_spmd_loader.v bsg_nonsynth_manycore_monitor.v)

TOP_LEVEL = $(BSG_MANYCORE_DIR)/testbenches/basic/test_bsg_manycore.v

ifeq ($(TEE),1)
TEE-CMD=| tee run.log
endif

bsg_rom_%.v: %.bin
	python $(BSG_ROM_GEN) $< bsg_rom_$* zero > $@

%.run:  bsg_rom_%.v
ifneq ($(BSG_FPU_OP), )
	if [ ! -f $(HARDFLOAT_VSRC) ]; then \
		$(call bsg_ucb_hardfloat_gen)  \
	fi
endif
	$(VLOG) $(DESIGN_HDRS) $(DESIGN_SRCS) bsg_rom_$*.v $(TOP_LEVEL) -d SPMD=$* -d bsg_tiles_X=$(bsg_tiles_X) -d bsg_tiles_Y=$(bsg_tiles_Y)
	$(VELAB) test_bsg_manycore | grep -v Compiling
	$(VSIM) $(TEE-CMD)

################################################
# Generate the hardfloat files.

define bsg_ucb_hardfloat_gen
	if [ -d ${BERKELEY_HARDFLOAT_DIR} ]; then \
		git --git-dir $(BERKELEY_HARDFLOAT_DIR)/.git reset --hard $(HARDFLOAT_VER) ; \
	else \
		echo "Please checkout the Berkeley Hardfloat to $(BERKELEY_HARDFLOAT_DIR)";\
		exit 1;\
	fi; \
	if [ ! -f $(HARDFLOAT_SSRC) ]; then \
    	cd $(BERKELEY_HARDFLOAT_DIR) && git apply $(VANILLA_SRC)/bsg_ucb_hardfloat.patch; \
	fi; \
	$(MAKE) -C $(BERKELEY_HARDFLOAT_DIR) bsg_ucb_hardfloat.v BSG_UCB_HARDFLOAT_DIR=$(HARDFLOAT_DIR) ;
endef
