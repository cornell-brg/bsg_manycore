#MANYCORE_PROC = VANILLA
#MANYCORE_PROC = VSCALE
#BSG_FPU_OP       =0
#DVE=0
TYPE_VEC="64'h00_00_00_00"
#######################################
#ifeq ($(MANYCORE_PROC),VANILLA)
ifeq ($(BSG_FPU_OP),1)
BERKELEY_TARGET  =\%.hardfloat_src
endif
#endif

########################################
# Check the dirs
ifeq ($(VSCALE_DIR),)
$(error VSCALE_DIR must be defined)
endif

ifeq ($(VANILLA_DIR),)
$(error VANILLA_DIR must be defined)
endif

ifeq ($(BSG_IP_CORES_DIR),)
$(error BSG_IP_CORES_DIR must be defined)
endif

ifeq ($(BSG_MANYCORE_DIR),)
$(error BSG_MANYCORE_DIR must be defined)
endif

VSCALE_SRC    = $(VSCALE_DIR)/src/main/verilog
VANILLA_SRC   = $(BSG_MANYCORE_DIR)/v/vanilla_bean

########################################
# select the tools
ifeq ($(shell /bin/domainname),B.B)
include $(CAD_DIR)/common/mk/cadenv.mk

BSG-SIM-TOOL=vcs
INC_OP		=+incdir+
VCS_OP		=-full64 -sverilog
VCS_DEFINES	= +define+SPMD=$*
VCS_DEFINES+= +define+bsg_tiles_X=$(bsg_tiles_X)
VCS_DEFINES+= +define+bsg_tiles_Y=$(bsg_tiles_Y)
VCS_DEFINES+= +vcs+loopreport+l000
VCS_DEFINES+= +define+BSG_HETERO_TYPE_VEC=${TYPE_VEC}+

ifeq ($(BSG_FPU_OP),1)
VCS_DEFINES+= +define+bsg_FPU
endif

#ifeq ($(MANYCORE_PROC),VANILLA)
#VCS_DEFINES+= +define+bsg_VANILLA
#endif

ifeq ($(DVE),1)
VCS_OP     +=  +vcs+vcdpluson -debug_access+all
endif
###############################################
else
BSG-SIM-TOOL=vivado
INC_OP=-i

VLOG  = xvlog -sv ${BSG_FPU_OP}
VELAB = xelab -debug typical ${BSG_FPU_OP} -s top_sim
VSIM  = xsim --runall top_sim

endif

$(warning $(BSG-SIM-TOOL))




#############################################################
#
#  Define the hardfloat source files.
#
#############################################################


#############################################################
# Define the Chisel variables.
ifeq ($(BSG_FPU_OP),1)
HARDFLOAT_DIR = $(VANILLA_SRC)/bsg_ucb_hardfloat
HARDFLOAT_VSRC = $(HARDFLOAT_DIR)/bsg_ucb_hardfloat.v
HARDFLOAT_SSRC = $(BERKELEY_HARDFLOAT_DIR)/src/main/scala/bsg_ucb_hardfloat.scala
HARDFLOAT_VER  = a07029b

ifeq ($(BERKELEY_HARDFLOAT_DIR),)
$(error BERKELEY_HARDFLOAT_DIR must be defined)
endif

CHISEL_VERSION = 2.2.32

#############################################################
# Adding  FPU  source files
LIST_FPU_SRCS       = $(VANILLA_SRC)/float_decode.v
LIST_FPU_SRCS      += $(VANILLA_SRC)/fpi.v
LIST_FPU_SRCS      += $(VANILLA_SRC)/fiu.v
LIST_FPU_SRCS      += $(VANILLA_SRC)/fam.v
LIST_FPU_SRCS      += $(BSG_IP_CORES_DIR)/bsg_dataflow/bsg_round_robin_n_to_1.v
LIST_FPU_SRCS      += $(BSG_IP_CORES_DIR)/bsg_mem/bsg_mem_3r1w.v
LIST_FPU_SRCS      += $(HARDFLOAT_VSRC)
else
LIST_FPU_SRCS       =
endif
########### End of FPU SRC definition ######################

LIST_VSCALE_HDRS+= $(VSCALE_SRC)/vscale_ctrl_constants.vh
LIST_VSCALE_HDRS+= $(VSCALE_SRC)/rv32_opcodes.vh
LIST_VSCALE_HDRS+= $(VSCALE_SRC)/vscale_alu_ops.vh
LIST_VSCALE_HDRS+= $(VSCALE_SRC)/vscale_md_constants.vh
LIST_VSCALE_HDRS+= $(VSCALE_SRC)/vscale_hasti_constants.vh
LIST_VSCALE_HDRS+= $(VSCALE_SRC)/vscale_csr_addr_map.vh
LIST_VSCALE_HDRS+= $(BSG_MANYCORE_DIR)/v/bsg_vscale_pkg.v


LIST_COMMON_HDRS+= $(BSG_IP_CORES_DIR)/bsg_misc/bsg_defines.v
LIST_COMMON_HDRS+= $(BSG_IP_CORES_DIR)/bsg_noc/bsg_noc_pkg.v

LIST_VSCALE_INCS+= $(BSG_MANYCORE_DIR)/v/

LIST_VANILLA_INCS =$(VANILLA_SRC)

LIST_COMMON_INCS = $(BSG_MANYCORE_DIR)/v/
LIST_COMMON_INCS+= $(VSCALE_SRC)
LIST_COMMON_INCS+= $(BSG_IP_CORES_DIR)/bsg_noc
LIST_COMMON_INCS+= $(BSG_IP_CORES_DIR)/bsg_misc

LIST_VSCALE_SRCS = $(BSG_MANYCORE_DIR)/v/vscale/vscale_pipeline.v
LIST_VSCALE_SRCS+= $(BSG_MANYCORE_DIR)/v/vscale/vscale_ctrl.v
LIST_VSCALE_SRCS+= $(BSG_MANYCORE_DIR)/v/vscale/vscale_regfile.v
LIST_VSCALE_SRCS+= $(VSCALE_SRC)/vscale_src_a_mux.v
LIST_VSCALE_SRCS+= $(VSCALE_SRC)/vscale_src_b_mux.v
LIST_VSCALE_SRCS+= $(VSCALE_SRC)/vscale_imm_gen.v
LIST_VSCALE_SRCS+= $(VSCALE_SRC)/vscale_alu.v
LIST_VSCALE_SRCS+= $(VSCALE_SRC)/vscale_csr_file.v
LIST_VSCALE_SRCS+= $(VSCALE_SRC)/vscale_PC_mux.v
LIST_VSCALE_SRCS+= $(BSG_MANYCORE_DIR)/v/bsg_vscale_core.v
LIST_VSCALE_SRCS+= $(BSG_MANYCORE_DIR)/v/vscale/bsg_manycore_proc_vscale.v

LIST_VANILLA_SRCS =
LIST_VANILLA_SRCS+= $(VANILLA_SRC)/alu.v
LIST_VANILLA_SRCS+= $(VANILLA_SRC)/cl_decode.v
LIST_VANILLA_SRCS+= $(VANILLA_SRC)/cl_state_machine.v
LIST_VANILLA_SRCS+= $(VANILLA_SRC)/hobbit.v
LIST_VANILLA_SRCS+= $(VANILLA_SRC)/bsg_manycore_proc_vanilla.v
LIST_VANILLA_SRCS+= $(LIST_FPU_SRCS)

LIST_COMMON_SRCS = $(BSG_IP_CORES_DIR)/bsg_misc/bsg_transpose.v
LIST_COMMON_SRCS+= $(BSG_IP_CORES_DIR)/bsg_misc/bsg_crossbar_o_by_i.v
LIST_COMMON_SRCS+= $(BSG_IP_CORES_DIR)/bsg_misc/bsg_cycle_counter.v
LIST_COMMON_SRCS+= $(BSG_IP_CORES_DIR)/bsg_misc/bsg_round_robin_arb.v
LIST_COMMON_SRCS+= $(BSG_IP_CORES_DIR)/bsg_misc/bsg_arb_fixed.v
LIST_COMMON_SRCS+= $(BSG_IP_CORES_DIR)/bsg_misc/bsg_priority_encode.v
LIST_COMMON_SRCS+= $(BSG_IP_CORES_DIR)/bsg_misc/bsg_priority_encode_one_hot_out.v
LIST_COMMON_SRCS+= $(BSG_IP_CORES_DIR)/bsg_misc/bsg_mux_one_hot.v
LIST_COMMON_SRCS+= $(BSG_IP_CORES_DIR)/bsg_misc/bsg_encode_one_hot.v
LIST_COMMON_SRCS+= $(BSG_IP_CORES_DIR)/bsg_misc/bsg_scan.v
LIST_COMMON_SRCS+= $(BSG_IP_CORES_DIR)/bsg_misc/bsg_counter_up_down.v
LIST_COMMON_SRCS+= $(BSG_IP_CORES_DIR)/bsg_misc/bsg_circular_ptr.v
LIST_COMMON_SRCS+= $(BSG_IP_CORES_DIR)/bsg_misc/bsg_decode_with_v.v
LIST_COMMON_SRCS+= $(BSG_IP_CORES_DIR)/bsg_misc/bsg_decode.v
LIST_COMMON_SRCS+= $(BSG_IP_CORES_DIR)/bsg_misc/bsg_dff_reset_en.v
LIST_COMMON_SRCS+= $(BSG_IP_CORES_DIR)/bsg_mem/bsg_mem_1r1w.v
LIST_COMMON_SRCS+= $(BSG_IP_CORES_DIR)/bsg_mem/bsg_mem_2r1w.v
LIST_COMMON_SRCS+= $(BSG_IP_CORES_DIR)/bsg_mem/bsg_mem_banked_crossbar.v
LIST_COMMON_SRCS+= $(BSG_IP_CORES_DIR)/bsg_mem/bsg_mem_1rw_sync_mask_write_byte.v
LIST_COMMON_SRCS+= $(BSG_IP_CORES_DIR)/bsg_mem/bsg_mem_1rw_sync.v
LIST_COMMON_SRCS+= $(BSG_IP_CORES_DIR)/bsg_dataflow/bsg_fifo_1r1w_small.v
LIST_COMMON_SRCS+= $(BSG_IP_CORES_DIR)/bsg_dataflow/bsg_two_fifo.v
LIST_COMMON_SRCS+= $(BSG_IP_CORES_DIR)/bsg_dataflow/bsg_fifo_tracker.v
LIST_COMMON_SRCS+= $(BSG_IP_CORES_DIR)/bsg_noc/bsg_mesh_router.v
LIST_COMMON_SRCS+= $(BSG_IP_CORES_DIR)/bsg_noc/bsg_mesh_stitch.v
LIST_COMMON_SRCS+= $(BSG_IP_CORES_DIR)/bsg_noc/bsg_mesh_to_ring_stitch.v
LIST_COMMON_SRCS+= $(BSG_IP_CORES_DIR)/bsg_noc/bsg_mesh_router_buffered.v
LIST_COMMON_SRCS+= $(BSG_IP_CORES_DIR)/bsg_test/bsg_nonsynth_clock_gen.v
LIST_COMMON_SRCS+= $(BSG_IP_CORES_DIR)/bsg_test/bsg_nonsynth_reset_gen.v
LIST_COMMON_SRCS+= $(VSCALE_SRC)/vscale_mul_div.v
LIST_COMMON_SRCS+= $(BSG_MANYCORE_DIR)/v/bsg_manycore_hetero_socket.v
LIST_COMMON_SRCS+= $(BSG_MANYCORE_DIR)/v/bsg_manycore_mesh.v
LIST_COMMON_SRCS+= $(BSG_MANYCORE_DIR)/v/bsg_manycore_mesh_node.v
LIST_COMMON_SRCS+= $(BSG_MANYCORE_DIR)/v/bsg_manycore_endpoint.v
LIST_COMMON_SRCS+= $(BSG_MANYCORE_DIR)/v/bsg_manycore_endpoint_standard.v
LIST_COMMON_SRCS+= $(BSG_MANYCORE_DIR)/v/bsg_manycore_link_sif_tieoff.v
LIST_COMMON_SRCS+= $(BSG_MANYCORE_DIR)/v/bsg_manycore_accel_default.v
LIST_COMMON_SRCS+= $(BSG_MANYCORE_DIR)/v/bsg_manycore_pkt_decode.v
LIST_COMMON_SRCS+= $(BSG_MANYCORE_DIR)/v/bsg_manycore_pkt_encode.v
LIST_COMMON_SRCS+= $(BSG_MANYCORE_DIR)/v/bsg_manycore.v
LIST_COMMON_SRCS+= $(BSG_MANYCORE_DIR)/testbenches/common/v/bsg_manycore_spmd_loader.v
LIST_COMMON_SRCS+= $(BSG_MANYCORE_DIR)/testbenches/common/v/bsg_nonsynth_manycore_monitor.v
LIST_COMMON_SRCS+= $(BSG_MANYCORE_DIR)/testbenches/common/v/bsg_manycore_vscale_pipeline_trace.v
LIST_COMMON_SRCS+= $(BSG_MANYCORE_DIR)/testbenches/common/v/bsg_manycore_proc_trace.v
LIST_COMMON_SRCS+= $(BSG_MANYCORE_DIR)/testbenches/common/v/bsg_manycore_tile_trace.v
LIST_COMMON_SRCS+= $(BSG_MANYCORE_DIR)/testbenches/common/v/bsg_nonsynth_manycore_io_complex.v

###################################################################################
#   Generate the real filelist
#
#ifeq ($(MANYCORE_PROC),VANILLA)
#DESIGN_HDRS = $(LIST_VANILLA_HDRS) $(LIST_COMMON_HDRS)
#else
#DESIGN_HDRS = $(LIST_VSCALE_HDRS) $(LIST_COMMON_HDRS)
#endif

DESIGN_HDRS = $(LIST_VSCALE_HDRS) $(LIST_VANILLA_HDRS) $(LIST_COMMON_HDRS)

#ifeq ($(MANYCORE_PROC),VANILLA)
#DESIGN_INCS = $(LIST_VANILLA_INCS) $(LIST_COMMON_INCS)
#else
#DESIGN_INCS = $(LIST_VSCALE_INCS) $(LIST_COMMON_INCS)
#endif
DESIGN_INCS = $(LIST_VSCALE_INCS) $(LIST_VANILLA_INCS) $(LIST_COMMON_INCS)


#ifeq ($(MANYCORE_PROC),VANILLA)
#DESIGN_SRCS = $(LIST_VANILLA_SRCS) $(LIST_COMMON_SRCS)
#else
#DESIGN_SRCS = $(LIST_VSCALE_SRCS) $(LIST_COMMON_SRCS)
#endif
DESIGN_SRCS = $(LIST_VSCALE_SRCS) $(LIST_VANILLA_SRCS) $(LIST_COMMON_SRCS)

TOP_LEVEL = $(BSG_MANYCORE_DIR)/testbenches/basic/test_bsg_manycore.v

ifeq ($(TEE),1)
TEE-CMD=| tee run.log
endif

###################################################################################
%_rom.v: main.bin
	python $(BSG_ROM_GEN) $< $*_rom zero > $@



%.vivado.run:  bsg_manycore_io_complex_rom.v $(BERKELEY_TARGET)
	$(VLOG) $(DESIGN_HDRS) $(DESIGN_SRCS) $< $(TOP_LEVEL) -d SPMD=$* -d bsg_tiles_X=$(bsg_tiles_X) -d bsg_tiles_Y=$(bsg_tiles_Y)
	$(VELAB) test_bsg_manycore | grep -v Compiling
	$(VSIM) $(TEE-CMD)

%.run: bsg_manycore_io_complex_rom.v $(BERKELEY_TARGET)
	$(VCS) $(VCS_OP) \
     -top test_bsg_manycore 		\
    $(VCS_DEFINES)                  \
    $(EXTRA_OPT)					\
    $(addprefix $(INC_OP), $(DESIGN_INCS) )\
    $(DESIGN_HDRS) $(DESIGN_SRCS)   \
    $(TOP_LEVEL) $<
	./simv

%.hardfloat_src:
	@if [ ! -f $(HARDFLOAT_VSRC) ]; then \
		$(call bsg_ucb_hardfloat_gen)  \
	fi

%.vscale_src:
	@if [ ! -f $(VSCALE_SRC)/vscale_mul_div.v ] ; then\
		echo -e "========= Checking out vscale source =============\n"; \
		git clone https://github.com/ucb-bar/vscale.git  $(BSG_MANYCORE_DIR)/imports/vscale; \
		echo -e "==================================================\n"; \
	fi


################################################
# Generate the hardfloat files.

define bsg_ucb_hardfloat_gen
	echo "===========================================================";\
	echo  "Generating Verilog files from Berkeley Hardfloat ";\
	echo "===========================================================";\
																	   \
	if [ -d ${BERKELEY_HARDFLOAT_DIR} ]; then \
		cd $(BERKELEY_HARDFLOAT_DIR) && git reset --hard $(HARDFLOAT_VER) &&\
        git clean -fd; \
	else \
		echo -e "Please checkout the Berkeley Hardfloat \n \
                 from https://github.com/ucb-bar/berkeley-hardfloat \n \
                 to $(BERKELEY_HARDFLOAT_DIR)";\
		exit 1;\
	fi; \
                                                                                      \
    cd $(BERKELEY_HARDFLOAT_DIR) && git apply $(VANILLA_SRC)/bsg_ucb_hardfloat.patch; \
                                                                                      \
	if command -v sbt > /dev/null 2>&1 ; then                                         \
	    $(MAKE) -C $(BERKELEY_HARDFLOAT_DIR) bsg_ucb_hardfloat.v BSG_UCB_HARDFLOAT_DIR=$(HARDFLOAT_DIR) ;\
    else                                                                              \
		echo "Please install sbt program" && exit;                                    \
    fi;                                                                               \
	echo "===========================================================";
endef
