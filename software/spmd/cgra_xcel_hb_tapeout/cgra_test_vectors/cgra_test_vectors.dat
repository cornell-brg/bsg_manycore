
// This file is generated by ./register_tests.py based on existing test vector
// data files under ./cgra_test_vectors.

#include "cgra_tv_conv_1d_8x8.dat"
#include "cgra_tv_dither_lite.dat"
#include "cgra_tv_induction_variable_8x8.dat"
#include "cgra_tv_reconfig_8x8.dat"
#include "cgra_tv_reduction_8x8.dat"
#include "cgra_tv_rf_write_back_8x8.dat"
#include "cgra_tv_simple_bypass_8x8.dat"
#include "cgra_tv_single_op_add_8x8.dat"
#include "cgra_tv_single_op_add_random_8x8.dat"
#include "cgra_tv_single_op_and_8x8.dat"
#include "cgra_tv_single_op_and_random_8x8.dat"
#include "cgra_tv_single_op_br_8x8.dat"
#include "cgra_tv_single_op_eq_8x8.dat"
#include "cgra_tv_single_op_eq_random_8x8.dat"
#include "cgra_tv_single_op_geq_8x8.dat"
#include "cgra_tv_single_op_geq_random_8x8.dat"
#include "cgra_tv_single_op_gt_8x8.dat"
#include "cgra_tv_single_op_gt_random_8x8.dat"
#include "cgra_tv_single_op_ne_8x8.dat"
#include "cgra_tv_single_op_ne_random_8x8.dat"
#include "cgra_tv_single_op_or_8x8.dat"
#include "cgra_tv_single_op_or_random_8x8.dat"
#include "cgra_tv_single_op_sgeq_8x8.dat"
#include "cgra_tv_single_op_sgeq_random_8x8.dat"
#include "cgra_tv_single_op_sgt_8x8.dat"
#include "cgra_tv_single_op_sgt_random_8x8.dat"
#include "cgra_tv_single_op_sll_8x8.dat"
#include "cgra_tv_single_op_sll_random_8x8.dat"
#include "cgra_tv_single_op_srl_8x8.dat"
#include "cgra_tv_single_op_srl_random_8x8.dat"
#include "cgra_tv_single_op_sub_8x8.dat"
#include "cgra_tv_single_op_sub_random_8x8.dat"
#include "cgra_tv_single_op_xor_8x8.dat"
#include "cgra_tv_single_op_xor_random_8x8.dat"
#include "cgra_tv_test_os_gemm_fp32.dat"
#include "cgra_tv_vvadd_8x8.dat"

#define NUM_TEST_VECTORS 36

const char* test_name[NUM_TEST_VECTORS] __attribute__ ((section (".dram"))) = {
  conv_1d_8x8_name,
  dither_lite_name,
  induction_variable_8x8_name,
  reconfig_8x8_name,
  reduction_8x8_name,
  rf_write_back_8x8_name,
  simple_bypass_8x8_name,
  single_op_add_8x8_name,
  single_op_add_random_8x8_name,
  single_op_and_8x8_name,
  single_op_and_random_8x8_name,
  single_op_br_8x8_name,
  single_op_eq_8x8_name,
  single_op_eq_random_8x8_name,
  single_op_geq_8x8_name,
  single_op_geq_random_8x8_name,
  single_op_gt_8x8_name,
  single_op_gt_random_8x8_name,
  single_op_ne_8x8_name,
  single_op_ne_random_8x8_name,
  single_op_or_8x8_name,
  single_op_or_random_8x8_name,
  single_op_sgeq_8x8_name,
  single_op_sgeq_random_8x8_name,
  single_op_sgt_8x8_name,
  single_op_sgt_random_8x8_name,
  single_op_sll_8x8_name,
  single_op_sll_random_8x8_name,
  single_op_srl_8x8_name,
  single_op_srl_random_8x8_name,
  single_op_sub_8x8_name,
  single_op_sub_random_8x8_name,
  single_op_xor_8x8_name,
  single_op_xor_random_8x8_name,
  test_os_gemm_fp32_name,
  vvadd_8x8_name
};

const int* bstrm_addr[NUM_TEST_VECTORS] __attribute__ ((section (".dram"))) = {
  conv_1d_8x8_bstrm,
  dither_lite_bstrm,
  induction_variable_8x8_bstrm,
  reconfig_8x8_bstrm,
  reduction_8x8_bstrm,
  rf_write_back_8x8_bstrm,
  simple_bypass_8x8_bstrm,
  single_op_add_8x8_bstrm,
  single_op_add_random_8x8_bstrm,
  single_op_and_8x8_bstrm,
  single_op_and_random_8x8_bstrm,
  single_op_br_8x8_bstrm,
  single_op_eq_8x8_bstrm,
  single_op_eq_random_8x8_bstrm,
  single_op_geq_8x8_bstrm,
  single_op_geq_random_8x8_bstrm,
  single_op_gt_8x8_bstrm,
  single_op_gt_random_8x8_bstrm,
  single_op_ne_8x8_bstrm,
  single_op_ne_random_8x8_bstrm,
  single_op_or_8x8_bstrm,
  single_op_or_random_8x8_bstrm,
  single_op_sgeq_8x8_bstrm,
  single_op_sgeq_random_8x8_bstrm,
  single_op_sgt_8x8_bstrm,
  single_op_sgt_random_8x8_bstrm,
  single_op_sll_8x8_bstrm,
  single_op_sll_random_8x8_bstrm,
  single_op_srl_8x8_bstrm,
  single_op_srl_random_8x8_bstrm,
  single_op_sub_8x8_bstrm,
  single_op_sub_random_8x8_bstrm,
  single_op_xor_8x8_bstrm,
  single_op_xor_random_8x8_bstrm,
  test_os_gemm_fp32_bstrm,
  vvadd_8x8_bstrm
};

int bstrm_size[NUM_TEST_VECTORS] __attribute__ ((section (".dram"))) = {
  conv_1d_8x8_bstrm_size,
  dither_lite_bstrm_size,
  induction_variable_8x8_bstrm_size,
  reconfig_8x8_bstrm_size,
  reduction_8x8_bstrm_size,
  rf_write_back_8x8_bstrm_size,
  simple_bypass_8x8_bstrm_size,
  single_op_add_8x8_bstrm_size,
  single_op_add_random_8x8_bstrm_size,
  single_op_and_8x8_bstrm_size,
  single_op_and_random_8x8_bstrm_size,
  single_op_br_8x8_bstrm_size,
  single_op_eq_8x8_bstrm_size,
  single_op_eq_random_8x8_bstrm_size,
  single_op_geq_8x8_bstrm_size,
  single_op_geq_random_8x8_bstrm_size,
  single_op_gt_8x8_bstrm_size,
  single_op_gt_random_8x8_bstrm_size,
  single_op_ne_8x8_bstrm_size,
  single_op_ne_random_8x8_bstrm_size,
  single_op_or_8x8_bstrm_size,
  single_op_or_random_8x8_bstrm_size,
  single_op_sgeq_8x8_bstrm_size,
  single_op_sgeq_random_8x8_bstrm_size,
  single_op_sgt_8x8_bstrm_size,
  single_op_sgt_random_8x8_bstrm_size,
  single_op_sll_8x8_bstrm_size,
  single_op_sll_random_8x8_bstrm_size,
  single_op_srl_8x8_bstrm_size,
  single_op_srl_random_8x8_bstrm_size,
  single_op_sub_8x8_bstrm_size,
  single_op_sub_random_8x8_bstrm_size,
  single_op_xor_8x8_bstrm_size,
  single_op_xor_random_8x8_bstrm_size,
  test_os_gemm_fp32_bstrm_size,
  vvadd_8x8_bstrm_size
};

const int* insts_addr[NUM_TEST_VECTORS] __attribute__ ((section (".dram"))) = {
  conv_1d_8x8_instructions,
  dither_lite_instructions,
  induction_variable_8x8_instructions,
  reconfig_8x8_instructions,
  reduction_8x8_instructions,
  rf_write_back_8x8_instructions,
  simple_bypass_8x8_instructions,
  single_op_add_8x8_instructions,
  single_op_add_random_8x8_instructions,
  single_op_and_8x8_instructions,
  single_op_and_random_8x8_instructions,
  single_op_br_8x8_instructions,
  single_op_eq_8x8_instructions,
  single_op_eq_random_8x8_instructions,
  single_op_geq_8x8_instructions,
  single_op_geq_random_8x8_instructions,
  single_op_gt_8x8_instructions,
  single_op_gt_random_8x8_instructions,
  single_op_ne_8x8_instructions,
  single_op_ne_random_8x8_instructions,
  single_op_or_8x8_instructions,
  single_op_or_random_8x8_instructions,
  single_op_sgeq_8x8_instructions,
  single_op_sgeq_random_8x8_instructions,
  single_op_sgt_8x8_instructions,
  single_op_sgt_random_8x8_instructions,
  single_op_sll_8x8_instructions,
  single_op_sll_random_8x8_instructions,
  single_op_srl_8x8_instructions,
  single_op_srl_random_8x8_instructions,
  single_op_sub_8x8_instructions,
  single_op_sub_random_8x8_instructions,
  single_op_xor_8x8_instructions,
  single_op_xor_random_8x8_instructions,
  test_os_gemm_fp32_instructions,
  vvadd_8x8_instructions
};

const int* arg0_addr[NUM_TEST_VECTORS] __attribute__ ((section (".dram"))) = {
  conv_1d_8x8_arg0,
  dither_lite_arg0,
  induction_variable_8x8_arg0,
  reconfig_8x8_arg0,
  reduction_8x8_arg0,
  rf_write_back_8x8_arg0,
  simple_bypass_8x8_arg0,
  single_op_add_8x8_arg0,
  single_op_add_random_8x8_arg0,
  single_op_and_8x8_arg0,
  single_op_and_random_8x8_arg0,
  single_op_br_8x8_arg0,
  single_op_eq_8x8_arg0,
  single_op_eq_random_8x8_arg0,
  single_op_geq_8x8_arg0,
  single_op_geq_random_8x8_arg0,
  single_op_gt_8x8_arg0,
  single_op_gt_random_8x8_arg0,
  single_op_ne_8x8_arg0,
  single_op_ne_random_8x8_arg0,
  single_op_or_8x8_arg0,
  single_op_or_random_8x8_arg0,
  single_op_sgeq_8x8_arg0,
  single_op_sgeq_random_8x8_arg0,
  single_op_sgt_8x8_arg0,
  single_op_sgt_random_8x8_arg0,
  single_op_sll_8x8_arg0,
  single_op_sll_random_8x8_arg0,
  single_op_srl_8x8_arg0,
  single_op_srl_random_8x8_arg0,
  single_op_sub_8x8_arg0,
  single_op_sub_random_8x8_arg0,
  single_op_xor_8x8_arg0,
  single_op_xor_random_8x8_arg0,
  test_os_gemm_fp32_arg0,
  vvadd_8x8_arg0
};

const int* arg1_addr[NUM_TEST_VECTORS] __attribute__ ((section (".dram"))) = {
  conv_1d_8x8_arg1,
  dither_lite_arg1,
  induction_variable_8x8_arg1,
  reconfig_8x8_arg1,
  reduction_8x8_arg1,
  rf_write_back_8x8_arg1,
  simple_bypass_8x8_arg1,
  single_op_add_8x8_arg1,
  single_op_add_random_8x8_arg1,
  single_op_and_8x8_arg1,
  single_op_and_random_8x8_arg1,
  single_op_br_8x8_arg1,
  single_op_eq_8x8_arg1,
  single_op_eq_random_8x8_arg1,
  single_op_geq_8x8_arg1,
  single_op_geq_random_8x8_arg1,
  single_op_gt_8x8_arg1,
  single_op_gt_random_8x8_arg1,
  single_op_ne_8x8_arg1,
  single_op_ne_random_8x8_arg1,
  single_op_or_8x8_arg1,
  single_op_or_random_8x8_arg1,
  single_op_sgeq_8x8_arg1,
  single_op_sgeq_random_8x8_arg1,
  single_op_sgt_8x8_arg1,
  single_op_sgt_random_8x8_arg1,
  single_op_sll_8x8_arg1,
  single_op_sll_random_8x8_arg1,
  single_op_srl_8x8_arg1,
  single_op_srl_random_8x8_arg1,
  single_op_sub_8x8_arg1,
  single_op_sub_random_8x8_arg1,
  single_op_xor_8x8_arg1,
  single_op_xor_random_8x8_arg1,
  test_os_gemm_fp32_arg1,
  vvadd_8x8_arg1
};

const int* arg2_addr[NUM_TEST_VECTORS] __attribute__ ((section (".dram"))) = {
  conv_1d_8x8_arg2,
  dither_lite_arg2,
  induction_variable_8x8_arg2,
  reconfig_8x8_arg2,
  reduction_8x8_arg2,
  rf_write_back_8x8_arg2,
  simple_bypass_8x8_arg2,
  single_op_add_8x8_arg2,
  single_op_add_random_8x8_arg2,
  single_op_and_8x8_arg2,
  single_op_and_random_8x8_arg2,
  single_op_br_8x8_arg2,
  single_op_eq_8x8_arg2,
  single_op_eq_random_8x8_arg2,
  single_op_geq_8x8_arg2,
  single_op_geq_random_8x8_arg2,
  single_op_gt_8x8_arg2,
  single_op_gt_random_8x8_arg2,
  single_op_ne_8x8_arg2,
  single_op_ne_random_8x8_arg2,
  single_op_or_8x8_arg2,
  single_op_or_random_8x8_arg2,
  single_op_sgeq_8x8_arg2,
  single_op_sgeq_random_8x8_arg2,
  single_op_sgt_8x8_arg2,
  single_op_sgt_random_8x8_arg2,
  single_op_sll_8x8_arg2,
  single_op_sll_random_8x8_arg2,
  single_op_srl_8x8_arg2,
  single_op_srl_random_8x8_arg2,
  single_op_sub_8x8_arg2,
  single_op_sub_random_8x8_arg2,
  single_op_xor_8x8_arg2,
  single_op_xor_random_8x8_arg2,
  test_os_gemm_fp32_arg2,
  vvadd_8x8_arg2
};

const int* arg3_addr[NUM_TEST_VECTORS] __attribute__ ((section (".dram"))) = {
  conv_1d_8x8_arg3,
  dither_lite_arg3,
  induction_variable_8x8_arg3,
  reconfig_8x8_arg3,
  reduction_8x8_arg3,
  rf_write_back_8x8_arg3,
  simple_bypass_8x8_arg3,
  single_op_add_8x8_arg3,
  single_op_add_random_8x8_arg3,
  single_op_and_8x8_arg3,
  single_op_and_random_8x8_arg3,
  single_op_br_8x8_arg3,
  single_op_eq_8x8_arg3,
  single_op_eq_random_8x8_arg3,
  single_op_geq_8x8_arg3,
  single_op_geq_random_8x8_arg3,
  single_op_gt_8x8_arg3,
  single_op_gt_random_8x8_arg3,
  single_op_ne_8x8_arg3,
  single_op_ne_random_8x8_arg3,
  single_op_or_8x8_arg3,
  single_op_or_random_8x8_arg3,
  single_op_sgeq_8x8_arg3,
  single_op_sgeq_random_8x8_arg3,
  single_op_sgt_8x8_arg3,
  single_op_sgt_random_8x8_arg3,
  single_op_sll_8x8_arg3,
  single_op_sll_random_8x8_arg3,
  single_op_srl_8x8_arg3,
  single_op_srl_random_8x8_arg3,
  single_op_sub_8x8_arg3,
  single_op_sub_random_8x8_arg3,
  single_op_xor_8x8_arg3,
  single_op_xor_random_8x8_arg3,
  test_os_gemm_fp32_arg3,
  vvadd_8x8_arg3
};

int inst_size[NUM_TEST_VECTORS] __attribute__ ((section (".dram"))) = {
  conv_1d_8x8_inst_size,
  dither_lite_inst_size,
  induction_variable_8x8_inst_size,
  reconfig_8x8_inst_size,
  reduction_8x8_inst_size,
  rf_write_back_8x8_inst_size,
  simple_bypass_8x8_inst_size,
  single_op_add_8x8_inst_size,
  single_op_add_random_8x8_inst_size,
  single_op_and_8x8_inst_size,
  single_op_and_random_8x8_inst_size,
  single_op_br_8x8_inst_size,
  single_op_eq_8x8_inst_size,
  single_op_eq_random_8x8_inst_size,
  single_op_geq_8x8_inst_size,
  single_op_geq_random_8x8_inst_size,
  single_op_gt_8x8_inst_size,
  single_op_gt_random_8x8_inst_size,
  single_op_ne_8x8_inst_size,
  single_op_ne_random_8x8_inst_size,
  single_op_or_8x8_inst_size,
  single_op_or_random_8x8_inst_size,
  single_op_sgeq_8x8_inst_size,
  single_op_sgeq_random_8x8_inst_size,
  single_op_sgt_8x8_inst_size,
  single_op_sgt_random_8x8_inst_size,
  single_op_sll_8x8_inst_size,
  single_op_sll_random_8x8_inst_size,
  single_op_srl_8x8_inst_size,
  single_op_srl_random_8x8_inst_size,
  single_op_sub_8x8_inst_size,
  single_op_sub_random_8x8_inst_size,
  single_op_xor_8x8_inst_size,
  single_op_xor_random_8x8_inst_size,
  test_os_gemm_fp32_inst_size,
  vvadd_8x8_inst_size
};

int verif_base[NUM_TEST_VECTORS] __attribute__ ((section (".dram"))) = {
  conv_1d_8x8_verif_base,
  dither_lite_verif_base,
  induction_variable_8x8_verif_base,
  reconfig_8x8_verif_base,
  reduction_8x8_verif_base,
  rf_write_back_8x8_verif_base,
  simple_bypass_8x8_verif_base,
  single_op_add_8x8_verif_base,
  single_op_add_random_8x8_verif_base,
  single_op_and_8x8_verif_base,
  single_op_and_random_8x8_verif_base,
  single_op_br_8x8_verif_base,
  single_op_eq_8x8_verif_base,
  single_op_eq_random_8x8_verif_base,
  single_op_geq_8x8_verif_base,
  single_op_geq_random_8x8_verif_base,
  single_op_gt_8x8_verif_base,
  single_op_gt_random_8x8_verif_base,
  single_op_ne_8x8_verif_base,
  single_op_ne_random_8x8_verif_base,
  single_op_or_8x8_verif_base,
  single_op_or_random_8x8_verif_base,
  single_op_sgeq_8x8_verif_base,
  single_op_sgeq_random_8x8_verif_base,
  single_op_sgt_8x8_verif_base,
  single_op_sgt_random_8x8_verif_base,
  single_op_sll_8x8_verif_base,
  single_op_sll_random_8x8_verif_base,
  single_op_srl_8x8_verif_base,
  single_op_srl_random_8x8_verif_base,
  single_op_sub_8x8_verif_base,
  single_op_sub_random_8x8_verif_base,
  single_op_xor_8x8_verif_base,
  single_op_xor_random_8x8_verif_base,
  test_os_gemm_fp32_verif_base,
  vvadd_8x8_verif_base
};

int result_size[NUM_TEST_VECTORS] __attribute__ ((section (".dram"))) = {
  conv_1d_8x8_result_size,
  dither_lite_result_size,
  induction_variable_8x8_result_size,
  reconfig_8x8_result_size,
  reduction_8x8_result_size,
  rf_write_back_8x8_result_size,
  simple_bypass_8x8_result_size,
  single_op_add_8x8_result_size,
  single_op_add_random_8x8_result_size,
  single_op_and_8x8_result_size,
  single_op_and_random_8x8_result_size,
  single_op_br_8x8_result_size,
  single_op_eq_8x8_result_size,
  single_op_eq_random_8x8_result_size,
  single_op_geq_8x8_result_size,
  single_op_geq_random_8x8_result_size,
  single_op_gt_8x8_result_size,
  single_op_gt_random_8x8_result_size,
  single_op_ne_8x8_result_size,
  single_op_ne_random_8x8_result_size,
  single_op_or_8x8_result_size,
  single_op_or_random_8x8_result_size,
  single_op_sgeq_8x8_result_size,
  single_op_sgeq_random_8x8_result_size,
  single_op_sgt_8x8_result_size,
  single_op_sgt_random_8x8_result_size,
  single_op_sll_8x8_result_size,
  single_op_sll_random_8x8_result_size,
  single_op_srl_8x8_result_size,
  single_op_srl_random_8x8_result_size,
  single_op_sub_8x8_result_size,
  single_op_sub_random_8x8_result_size,
  single_op_xor_8x8_result_size,
  single_op_xor_random_8x8_result_size,
  test_os_gemm_fp32_result_size,
  vvadd_8x8_result_size
};

const int* ref_addr[NUM_TEST_VECTORS] __attribute__ ((section (".dram"))) = {
  conv_1d_8x8_reference,
  dither_lite_reference,
  induction_variable_8x8_reference,
  reconfig_8x8_reference,
  reduction_8x8_reference,
  rf_write_back_8x8_reference,
  simple_bypass_8x8_reference,
  single_op_add_8x8_reference,
  single_op_add_random_8x8_reference,
  single_op_and_8x8_reference,
  single_op_and_random_8x8_reference,
  single_op_br_8x8_reference,
  single_op_eq_8x8_reference,
  single_op_eq_random_8x8_reference,
  single_op_geq_8x8_reference,
  single_op_geq_random_8x8_reference,
  single_op_gt_8x8_reference,
  single_op_gt_random_8x8_reference,
  single_op_ne_8x8_reference,
  single_op_ne_random_8x8_reference,
  single_op_or_8x8_reference,
  single_op_or_random_8x8_reference,
  single_op_sgeq_8x8_reference,
  single_op_sgeq_random_8x8_reference,
  single_op_sgt_8x8_reference,
  single_op_sgt_random_8x8_reference,
  single_op_sll_8x8_reference,
  single_op_sll_random_8x8_reference,
  single_op_srl_8x8_reference,
  single_op_srl_random_8x8_reference,
  single_op_sub_8x8_reference,
  single_op_sub_random_8x8_reference,
  single_op_xor_8x8_reference,
  single_op_xor_random_8x8_reference,
  test_os_gemm_fp32_reference,
  vvadd_8x8_reference
};
