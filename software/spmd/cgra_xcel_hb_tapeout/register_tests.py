#!/usr/bin/env python3
#=========================================================================
# register_tests.py
#=========================================================================
# Scan through all test cases under the cgra_test_vectors directory.
# Generate and overwrite the cgra_test_vectors.dat file to include all
# test cases.
#
# Author : Peitian Pan
# Date   : Feb 16, 2021

import glob

SCRIPT_NAME        = __file__
TEST_VECTOR_DIR    = "./cgra_test_vectors"
TEST_VECTOR_HEADER = "cgra_test_vectors.dat"
TEST_VECTOR_PREFIX = "cgra_tv_"
TEST_VECTOR_SUFFIX = ".dat"

#-------------------------------------------------------------------------
# Test vector header template
#-------------------------------------------------------------------------

tv_header_tplt = """
// This file is generated by {SCRIPT_NAME} based on existing test vector
// data files under {TEST_VECTOR_DIR}.

{pound_include_stmts}

#define NUM_TEST_VECTORS {num_test_vectors}

const char* test_name[NUM_TEST_VECTORS] __attribute__ ((section (".dram"))) = {{
{test_name}
}};

const int is_sram_test[NUM_TEST_VECTORS] __attribute__ ((section (".dram"))) = {{
{is_sram_test}
}};

const int* bstrm_addr[NUM_TEST_VECTORS] __attribute__ ((section (".dram"))) = {{
{bstrm_addr}
}};

int bstrm_size[NUM_TEST_VECTORS] __attribute__ ((section (".dram"))) = {{
{bstrm_size}
}};

const int* insts_addr[NUM_TEST_VECTORS] __attribute__ ((section (".dram"))) = {{
{insts_addr}
}};

const int* arg0_addr[NUM_TEST_VECTORS] __attribute__ ((section (".dram"))) = {{
{arg0_addr}
}};

const int* arg1_addr[NUM_TEST_VECTORS] __attribute__ ((section (".dram"))) = {{
{arg1_addr}
}};

const int* arg2_addr[NUM_TEST_VECTORS] __attribute__ ((section (".dram"))) = {{
{arg2_addr}
}};

const int* arg3_addr[NUM_TEST_VECTORS] __attribute__ ((section (".dram"))) = {{
{arg3_addr}
}};

int inst_size[NUM_TEST_VECTORS] __attribute__ ((section (".dram"))) = {{
{inst_size}
}};

int verif_base[NUM_TEST_VECTORS] __attribute__ ((section (".dram"))) = {{
{verif_base}
}};

int result_size[NUM_TEST_VECTORS] __attribute__ ((section (".dram"))) = {{
{result_size}
}};

const int* ref_addr[NUM_TEST_VECTORS] __attribute__ ((section (".dram"))) = {{
{ref_addr}
}};
"""

#-------------------------------------------------------------------------
# Extract names
#-------------------------------------------------------------------------

def get_name_from_file_name( file_name ):
  assert file_name.startswith( TEST_VECTOR_PREFIX )
  assert file_name.endswith( TEST_VECTOR_SUFFIX )

  fname = file_name.split(".")[0]
  return fname[len(TEST_VECTOR_PREFIX):]

def get_all_test_names():
  dat_files = f"{TEST_VECTOR_DIR}/*.dat"
  names = []

  print("Collecting all test cases...")

  for tv_file in glob.glob( dat_files ):
    tv_file_name = tv_file.split('/')[-1]
    if tv_file_name != TEST_VECTOR_HEADER:
      names.append( get_name_from_file_name( tv_file_name) )

  return names

#-------------------------------------------------------------------------
# Dump test vector header
#-------------------------------------------------------------------------

def gen_include_stmts( names ):
  stmts = []
  for name in names:
    stmts.append( f'#include "{TEST_VECTOR_PREFIX}{name}{TEST_VECTOR_SUFFIX}"' )
  return "\n".join( stmts )

def gen_var_names( suffix, names, indent ):
  no_comma_names = []

  for name in names:
    no_comma_names.append( f'{" "*indent}{name}{suffix}' )

  return ",\n".join( no_comma_names )

def dump_test_vector_header( names ):
  print("Generating test vector header...")

  test_vector_header_file = f"{TEST_VECTOR_DIR}/{TEST_VECTOR_HEADER}"

  num_test_vectors    = len(names)
  pound_include_stmts = gen_include_stmts( names )
  test_name           = gen_var_names( "_name", names, indent=2 )
  is_sram_test        = gen_var_names( "_is_sram_test", names, indent=2 )
  bstrm_addr          = gen_var_names( "_bstrm", names, indent=2 )
  bstrm_size          = gen_var_names( "_bstrm_size", names, indent=2 )
  insts_addr          = gen_var_names( "_instructions", names, indent=2 )
  arg0_addr           = gen_var_names( "_arg0", names, indent=2 )
  arg1_addr           = gen_var_names( "_arg1", names, indent=2 )
  arg2_addr           = gen_var_names( "_arg2", names, indent=2 )
  arg3_addr           = gen_var_names( "_arg3", names, indent=2 )
  inst_size           = gen_var_names( "_inst_size", names, indent=2 )
  verif_base          = gen_var_names( "_verif_base", names, indent=2 )
  result_size         = gen_var_names( "_result_size", names, indent=2 )
  ref_addr            = gen_var_names( "_reference", names, indent=2 )

  with open( test_vector_header_file, "w" ) as fd:
    fd.write(tv_header_tplt.format(**locals(), **globals()))

#-------------------------------------------------------------------------
# Main
#-------------------------------------------------------------------------

def main():
  # Collect test case names from test vector directory
  names = get_all_test_names()

  # Generate and dump test vector header
  dump_test_vector_header( names )

if __name__ == "__main__":
  main()
