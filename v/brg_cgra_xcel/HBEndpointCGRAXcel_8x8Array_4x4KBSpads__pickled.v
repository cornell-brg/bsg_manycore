//-------------------------------------------------------------------------
// HBEndpointCGRAXcel_8x8Array_4x4KBSpads.v
//-------------------------------------------------------------------------
// This file is generated by PyMTL SystemVerilog translation pass.

// PyMTL BitStruct CgraRemoteMemReqMsg__wen_1__addr_28__data_32 Definition
typedef struct packed {
  logic [0:0] wen;
  logic [27:0] addr;
  logic [31:0] data;
} CgraRemoteMemReqMsg__wen_1__addr_28__data_32;

// PyMTL BitStruct CgraRemoteMemRespMsg__wen_1__addr_28__data_32 Definition
typedef struct packed {
  logic [0:0] wen;
  logic [27:0] addr;
  logic [31:0] data;
} CgraRemoteMemRespMsg__wen_1__addr_28__data_32;

// PyMTL BitStruct CgraXcelReqMsg__wen_1__addr_14__data_32 Definition
typedef struct packed {
  logic [0:0] wen;
  logic [13:0] addr;
  logic [31:0] data;
} CgraXcelReqMsg__wen_1__addr_14__data_32;

// PyMTL BitStruct CgraXcelRespMsg__wen_1__addr_14__data_32 Definition
typedef struct packed {
  logic [0:0] wen;
  logic [13:0] addr;
  logic [31:0] data;
} CgraXcelRespMsg__wen_1__addr_14__data_32;

// PyMTL BitStruct CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 Definition
typedef struct packed {
  logic [0:0] wen;
  logic [13:0] addr;
  logic [31:0] data;
  logic [6:0] opaque;
} CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7;

// PyMTL BitStruct CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 Definition
typedef struct packed {
  logic [0:0] wen;
  logic [13:0] addr;
  logic [31:0] data;
  logic [6:0] opaque;
} CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7;

// PyMTL BitStruct MEConfigMsg_8x8__wen_1__base_addr_14__incr_addr_8__count_9 Definition
typedef struct packed {
  logic [0:0] wen;
  logic [13:0] base_addr;
  logic [7:0] incr_addr;
  logic [8:0] count;
} MEConfigMsg_8x8__wen_1__base_addr_14__incr_addr_8__count_9;

// PyMTL BitStruct PEConfigMsg_8x8__69ed92dd9fa67f76 Definition
typedef struct packed {
  logic [0:0] opcode;
  logic [5:0] func;
  logic [2:0] src_opd_a;
  logic [2:0] src_opd_b;
  logic [2:0] out_n_src;
  logic [2:0] out_s_src;
  logic [2:0] out_w_src;
  logic [2:0] out_e_src;
  logic [1:0] reg_id;
  logic [2:0] reg_src;
  logic [1:0] unused;
} PEConfigMsg_8x8__69ed92dd9fa67f76;

// PyMTL BitStruct CgraFUMsg_32__opd_a_32__opd_b_32__opd_rf_32 Definition
typedef struct packed {
  logic [31:0] opd_a;
  logic [31:0] opd_b;
  logic [31:0] opd_rf;
} CgraFUMsg_32__opd_a_32__opd_b_32__opd_rf_32;

// PyMTL BitStruct CgraMulMsg_32__opd_a_32__opd_b_32 Definition
typedef struct packed {
  logic [31:0] opd_a;
  logic [31:0] opd_b;
} CgraMulMsg_32__opd_a_32__opd_b_32;

// PyMTL BitStruct CgraPerBankMemReqMsg__wen_1__addr_10__data_32__opaque_7 Definition
typedef struct packed {
  logic [0:0] wen;
  logic [9:0] addr;
  logic [31:0] data;
  logic [6:0] opaque;
} CgraPerBankMemReqMsg__wen_1__addr_10__data_32__opaque_7;

// PyMTL BitStruct CgraPerBankMemRespMsg__wen_1__addr_10__data_32__opaque_7 Definition
typedef struct packed {
  logic [0:0] wen;
  logic [9:0] addr;
  logic [31:0] data;
  logic [6:0] opaque;
} CgraPerBankMemRespMsg__wen_1__addr_10__data_32__opaque_7;

// PyMTL BitStruct mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd Definition
typedef struct packed {
  logic [1:0] dst;
  CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 payload;
} mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd;

// PyMTL BitStruct mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 Definition
typedef struct packed {
  logic [4:0] dst;
  CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 payload;
} mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709;

// PyMTL Component CGRAXcelCtrl Definition
// Full name: CGRAXcelCtrl__xcel_params_CGRAParams: base_addr_bound:16384, base_addr_register:0, base_addr_scratchpad:256, cfg_nwords:1, cfg_type:<class 'pymtl3.datatypes.bits_import.Bits32'>, data_width:32, enable_FP:True, me_cfg_type:<class 'types.MEConfigMsg_8x8'>, mul_cycles:0, ncols:8, nrows:8, nspads:4, num_remote_masters:4, pe_cfg_type:<class 'types.PEConfigMsg_8x8'>, remote_master_addr_width:28, remote_master_data_width_factor:1, rf_nregs:2, spad_data_width:32, spad_mask_size:0, spad_num_entries:1024, trace_verbosity:0
// At /work/global/pp482/cgra/src/cgra/CGRAXcelCtrl.py

module CGRAXcelCtrl__e7b85fc84228c577
(
  output logic [0:0] cgra_xminion_req_en ,
  input  logic [0:0] cgra_xminion_req_rdy ,
  input  logic [0:0] cgra_xminion_resp_en ,
  output logic [0:0] cgra_xminion_resp_rdy ,
  input  logic [0:0] clk ,
  input  logic [0:0] is_CSR_transaction ,
  input  logic [0:0] is_calc_done ,
  input  logic [0:0] is_go_transaction ,
  input  logic [0:0] is_scratchpad_transaction ,
  output logic [0:0] is_staging ,
  input  logic [0:0] is_write_transaction ,
  output logic [0:0] is_xminion_resp_from_scratchpad ,
  output logic [0:0] mmaster_req_en ,
  input  logic [0:0] mmaster_req_rdy ,
  input  logic [0:0] mmaster_resp_en ,
  output logic [0:0] mmaster_resp_rdy ,
  input  logic [0:0] reset ,
  output logic [0:0] stage_val ,
  output logic [0:0] xbar_xminion_req_en ,
  input  logic [0:0] xbar_xminion_req_rdy ,
  input  logic [0:0] xbar_xminion_resp_en ,
  output logic [0:0] xbar_xminion_resp_rdy ,
  input  logic [0:0] xminion_req_en ,
  output logic [0:0] xminion_req_rdy ,
  output logic [0:0] xminion_resp_en ,
  input  logic [0:0] xminion_resp_rdy 
);
  localparam logic [0:0] __const__FREEZE  = 1'd0;
  localparam logic [0:0] __const__GO  = 1'd1;
  logic [0:0] is_CSR_signal;
  logic [0:0] is_finish_signal;
  logic [0:0] is_go_signal;
  logic [0:0] is_scratchpad_access;
  logic [0:0] next_state;
  logic [0:0] state;

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/CGRAXcelCtrl.py:96
  // s.cgra_xminion_req_en   //= lambda: s.is_CSR_signal & s.cgra_xminion_req_rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_ctrl_cgra_xminion_req_en
    cgra_xminion_req_en = is_CSR_signal & cgra_xminion_req_rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/CGRAXcelCtrl.py:92
  // s.is_staging //= lambda: s.state == FREEZE
  
  always_comb begin : _lambda__s_dut_cgra_xcel_ctrl_is_staging
    is_staging = state == 1'( __const__FREEZE );
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/CGRAXcelCtrl.py:108
  // s.is_xminion_resp_from_scratchpad //= lambda: s.xbar_xminion_resp_en & s.xminion_resp_rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_ctrl_is_xminion_resp_from_scratchpad
    is_xminion_resp_from_scratchpad = xbar_xminion_resp_en & xminion_resp_rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/CGRAXcelCtrl.py:93
  // s.stage_val //= lambda: s.xminion_req_en & s.is_scratchpad_transaction
  
  always_comb begin : _lambda__s_dut_cgra_xcel_ctrl_stage_val
    stage_val = xminion_req_en & is_scratchpad_transaction;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/CGRAXcelCtrl.py:100
  // s.xbar_xminion_req_en   //= lambda: s.is_scratchpad_access & s.xbar_xminion_req_rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_ctrl_xbar_xminion_req_en
    xbar_xminion_req_en = is_scratchpad_access & xbar_xminion_req_rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/CGRAXcelCtrl.py:101
  // s.xbar_xminion_resp_rdy //= lambda: s.xminion_resp_rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_ctrl_xbar_xminion_resp_rdy
    xbar_xminion_resp_rdy = xminion_resp_rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/CGRAXcelCtrl.py:105
  // s.xminion_req_rdy //= lambda: (~s.is_CSR_transaction & s.xbar_xminion_req_rdy) | (s.is_CSR_transaction & s.cgra_xminion_req_rdy)
  
  always_comb begin : _lambda__s_dut_cgra_xcel_ctrl_xminion_req_rdy
    xminion_req_rdy = ( ( ~is_CSR_transaction ) & xbar_xminion_req_rdy ) | ( is_CSR_transaction & cgra_xminion_req_rdy );
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/CGRAXcelCtrl.py:106
  // s.xminion_resp_en //= lambda: (s.xbar_xminion_resp_en | s.cgra_xminion_resp_en) & s.xminion_resp_rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_ctrl_xminion_resp_en
    xminion_resp_en = ( xbar_xminion_resp_en | cgra_xminion_resp_en ) & xminion_resp_rdy;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/CGRAXcelCtrl.py:76
  // @update
  // def cgra_xcel_next_state():
  //   s.next_state @= s.state
  //   if s.state == FREEZE:
  //     if s.is_go_signal:
  //       s.next_state @= GO
  //   elif s.state == GO:
  //     if s.is_calc_done:
  //       s.next_state @= FREEZE
  
  always_comb begin : cgra_xcel_next_state
    next_state = state;
    if ( state == 1'( __const__FREEZE ) ) begin
      if ( is_go_signal ) begin
        next_state = 1'( __const__GO );
      end
    end
    else if ( state == 1'( __const__GO ) ) begin
      if ( is_calc_done ) begin
        next_state = 1'( __const__FREEZE );
      end
    end
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/CGRAXcelCtrl.py:86
  // @update
  // def gen_signals():
  //   s.is_go_signal         @= s.xminion_req_en  & s.is_go_transaction
  //   s.is_CSR_signal        @= s.xminion_req_en  & s.is_CSR_transaction
  //   s.is_scratchpad_access @= s.xminion_req_en  & s.is_scratchpad_transaction
  
  always_comb begin : gen_signals
    is_go_signal = xminion_req_en & is_go_transaction;
    is_CSR_signal = xminion_req_en & is_CSR_transaction;
    is_scratchpad_access = xminion_req_en & is_scratchpad_transaction;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/CGRAXcelCtrl.py:69
  // @update_ff
  // def cgra_xcel_fsm():
  //   if s.reset:
  //     s.state <<= FREEZE
  //   else:
  //     s.state <<= s.next_state
  
  always_ff @(posedge clk) begin : cgra_xcel_fsm
    if ( reset ) begin
      state <= 1'( __const__FREEZE );
    end
    else
      state <= next_state;
  end

  assign mmaster_req_en = 1'd0;
  assign mmaster_resp_rdy = 1'd0;
  assign cgra_xminion_resp_rdy = xminion_resp_rdy;

endmodule


// PyMTL Component CGRACoreCtrl Definition
// Full name: CGRACoreCtrl__xcel_params_CGRAParams: base_addr_bound:16384, base_addr_register:0, base_addr_scratchpad:256, cfg_nwords:1, cfg_type:<class 'pymtl3.datatypes.bits_import.Bits32'>, data_width:32, enable_FP:True, me_cfg_type:<class 'types.MEConfigMsg_8x8'>, mul_cycles:0, ncols:8, nrows:8, nspads:4, num_remote_masters:4, pe_cfg_type:<class 'types.PEConfigMsg_8x8'>, remote_master_addr_width:28, remote_master_data_width_factor:1, rf_nregs:2, spad_data_width:32, spad_mask_size:0, spad_num_entries:1024, trace_verbosity:0
// At /work/global/pp482/cgra/src/cgra/CGRACoreCtrl.py

module CGRACoreCtrl__e7b85fc84228c577
(
  output logic [0:0] CSR_wen ,
  output logic [0:0] cfg_init ,
  input  logic [0:0] clk ,
  output logic [0:0] is_calc ,
  input  logic [0:0] is_calc_done ,
  output logic [0:0] is_calc_go ,
  input  logic [0:0] is_calc_go_transaction ,
  output logic [0:0] is_cfg ,
  input  logic [0:0] is_cfg_done ,
  output logic [0:0] is_cfg_go ,
  input  logic [0:0] is_cfg_go_transaction ,
  input  logic [0:0] is_wen ,
  input  logic [0:0] reset ,
  input  logic [0:0] xminion_req_en ,
  output logic [0:0] xminion_req_rdy ,
  output logic [0:0] xminion_resp_en ,
  input  logic [0:0] xminion_resp_rdy 
);
  localparam logic [0:0] __const__FREEZE  = 1'd0;
  localparam logic [0:0] __const__CFG_INIT  = 1'd1;
  localparam logic [1:0] __const__CALC  = 2'd3;
  localparam logic [1:0] __const__CFG  = 2'd2;
  logic [2:0] next_state;
  logic [0:0] reg_xminion_req_en;
  logic [2:0] state;

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/CGRACoreCtrl.py:108
  // s.CSR_wen //= lambda: s.xminion_req_en & s.is_wen
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_ctrl_CSR_wen
    CSR_wen = xminion_req_en & is_wen;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/CGRACoreCtrl.py:107
  // s.cfg_init //= lambda: s.state == CFG_INIT
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_ctrl_cfg_init
    cfg_init = state == 3'( __const__CFG_INIT );
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/CGRACoreCtrl.py:106
  // s.is_calc //= lambda: s.state == CALC
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_ctrl_is_calc
    is_calc = state == 3'( __const__CALC );
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/CGRACoreCtrl.py:51
  // s.is_calc_go //= lambda: s.is_calc_go_transaction & s.xminion_req_en
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_ctrl_is_calc_go
    is_calc_go = is_calc_go_transaction & xminion_req_en;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/CGRACoreCtrl.py:105
  // s.is_cfg //= lambda: s.state == CFG
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_ctrl_is_cfg
    is_cfg = state == 3'( __const__CFG );
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/CGRACoreCtrl.py:50
  // s.is_cfg_go  //= lambda: s.is_cfg_go_transaction  & s.xminion_req_en
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_ctrl_is_cfg_go
    is_cfg_go = is_cfg_go_transaction & xminion_req_en;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/CGRACoreCtrl.py:98
  // s.xminion_req_rdy  //= lambda: s.state == FREEZE
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_ctrl_xminion_req_rdy
    xminion_req_rdy = state == 3'( __const__FREEZE );
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/CGRACoreCtrl.py:67
  // @update
  // def cgra_next_state():
  //   s.next_state @= s.state
  //   if s.state == FREEZE:
  //     if s.is_cfg_go:
  //       s.next_state @= CFG_INIT
  //     elif s.is_calc_go:
  //       s.next_state @= CALC
  //   elif s.state == CFG_INIT:
  //     s.next_state @= CFG
  //   elif s.state == CFG:
  //     if s.is_cfg_done:
  //       s.next_state @= FREEZE
  //   elif s.state == CALC:
  //     if s.is_calc_done:
  //       s.next_state @= FREEZE
  
  always_comb begin : cgra_next_state
    next_state = state;
    if ( state == 3'( __const__FREEZE ) ) begin
      if ( is_cfg_go ) begin
        next_state = 3'( __const__CFG_INIT );
      end
      else if ( is_calc_go ) begin
        next_state = 3'( __const__CALC );
      end
    end
    else if ( state == 3'( __const__CFG_INIT ) ) begin
      next_state = 3'( __const__CFG );
    end
    else if ( state == 3'( __const__CFG ) ) begin
      if ( is_cfg_done ) begin
        next_state = 3'( __const__FREEZE );
      end
    end
    else if ( state == 3'( __const__CALC ) ) begin
      if ( is_calc_done ) begin
        next_state = 3'( __const__FREEZE );
      end
    end
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/CGRACoreCtrl.py:60
  // @update_ff
  // def cgra_state():
  //   if s.reset:
  //     s.state <<= FREEZE
  //   else:
  //     s.state <<= s.next_state
  
  always_ff @(posedge clk) begin : cgra_state
    if ( reset ) begin
      state <= 3'( __const__FREEZE );
    end
    else
      state <= next_state;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/CGRACoreCtrl.py:92
  // @update_ff
  // def register_xminion_read_req_en():
  //   # Only respond to read requests. The response will happen in the
  //   # next cycle following the request.
  //   s.reg_xminion_req_en <<= s.xminion_req_en
  
  always_ff @(posedge clk) begin : register_xminion_read_req_en
    reg_xminion_req_en <= xminion_req_en;
  end

  assign xminion_resp_en = reg_xminion_req_en;

endmodule


// PyMTL Component ConfigEngineCtrl Definition
// Full name: ConfigEngineCtrl__num_modules_9__xcel_params_CGRAParams: base_addr_bound:16384, base_addr_register:0, base_addr_scratchpad:256, cfg_nwords:1, cfg_type:<class 'pymtl3.datatypes.bits_import.Bits32'>, data_width:32, enable_FP:True, me_cfg_type:<class 'types.MEConfigMsg_8x8'>, mul_cycles:0, ncols:8, nrows:8, nspads:4, num_remote_masters:4, pe_cfg_type:<class 'types.PEConfigMsg_8x8'>, remote_master_addr_width:28, remote_master_data_width_factor:1, rf_nregs:2, spad_data_width:32, spad_mask_size:0, spad_num_entries:1024, trace_verbosity:0
// At /work/global/pp482/cgra/src/cgra/ConfigEngineCtrl.py

module ConfigEngineCtrl__9c875dc70f278f0e
(
  input  logic [0:0] cfg_init ,
  input  logic [0:0] cfg_out_rdy ,
  output logic [0:0] cfg_out_val ,
  output logic [0:0] cfg_reset ,
  input  logic [0:0] clk ,
  input  logic [0:0] is_ME_base_addr_zero ,
  input  logic [0:0] is_PE_base_addr_zero ,
  output logic [0:0] is_PE_init_addr ,
  output logic [0:0] is_addr_incr_by_nword ,
  output logic [0:0] is_addr_incr_by_word ,
  output logic [0:0] is_cfg_sent ,
  output logic [0:0] is_done ,
  input  logic [0:0] mem_resp_en ,
  output logic [0:0] mem_resp_rdy ,
  output logic [0:0] mmaster_req_en ,
  input  logic [0:0] mmaster_req_rdy ,
  output logic [0:0] reg_mem_rdata_en ,
  input  logic [0:0] reset ,
  output logic [0:0] start_with_ME ,
  output logic [0:0] start_with_PE 
);
  localparam logic [3:0] __const__num_modules_at_CE_init_count_cfg  = 4'd9;
  localparam logic [3:0] __const__count_cfg_ME_init_value_at_CE_init_count_cfg  = 4'd8;
  localparam logic [0:0] __const__count_words_init_at_next_remaining_words  = 1'd0;
  localparam logic [0:0] __const__INIT_at_CE_is_PE_init_addr  = 1'd0;
  localparam logic [0:0] __const__INIT_at_CE_next_PE_init_state  = 1'd0;
  localparam logic [1:0] __const__EXPIRED_at_CE_next_PE_init_state  = 2'd2;
  localparam logic [0:0] __const__FIRE_at_CE_next_PE_init_state  = 1'd1;
  localparam logic [0:0] __const__FIRE_at__lambda__s_dut_cgra_xcel_dpath_cgra_dpath_CE_e_0__ctrl_is_PE_init_addr  = 1'd1;
  logic [1:0] PE_init_state;
  logic [13:0] count_cfg_init;
  logic [13:0] count_cfgs;
  logic [13:0] count_words;
  logic [1:0] next_PE_init_state;
  logic [13:0] next_count_cfgs;
  logic [13:0] next_count_words;
  logic [1:0] num_requested;
  logic [3:0] num_sent_cfgs;
  logic [0:0] ser_fifo_full_r;
  logic [0:0] shift_reg_pt_map_next;

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineCtrl.py:80
  // @update
  // def CE_init_count_cfg():
  //   s.count_cfg_init @= num_modules
  //   if s.is_ME_base_addr_zero & s.is_PE_base_addr_zero:
  //     s.count_cfg_init @= 0
  //   if ~s.is_ME_base_addr_zero & s.is_PE_base_addr_zero:
  //     s.count_cfg_init @= 1
  //   if s.is_ME_base_addr_zero & ~s.is_PE_base_addr_zero:
  //     s.count_cfg_init @= count_cfg_ME_init_value
  
  always_comb begin : CE_init_count_cfg
    count_cfg_init = 14'( __const__num_modules_at_CE_init_count_cfg );
    if ( is_ME_base_addr_zero & is_PE_base_addr_zero ) begin
      count_cfg_init = 14'd0;
    end
    if ( ( ~is_ME_base_addr_zero ) & is_PE_base_addr_zero ) begin
      count_cfg_init = 14'd1;
    end
    if ( is_ME_base_addr_zero & ( ~is_PE_base_addr_zero ) ) begin
      count_cfg_init = 14'( __const__count_cfg_ME_init_value_at_CE_init_count_cfg );
    end
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineCtrl.py:192
  // @update
  // def CE_next_PE_init_state():
  //   s.next_PE_init_state @= s.PE_init_state
  //   if s.cfg_reset:
  //     s.next_PE_init_state @= INIT
  //     if s.start_with_PE:
  //       s.next_PE_init_state @= EXPIRED
  //   elif (s.PE_init_state == INIT) & (s.num_requested == p.cfg_nwords-1) & s.mmaster_req_en:
  //     s.next_PE_init_state @= FIRE
  //   elif (s.PE_init_state == FIRE) & s.mmaster_req_en:
  //     s.next_PE_init_state @= EXPIRED
  
  always_comb begin : CE_next_PE_init_state
    next_PE_init_state = PE_init_state;
    if ( cfg_reset ) begin
      next_PE_init_state = 2'( __const__INIT_at_CE_next_PE_init_state );
      if ( start_with_PE ) begin
        next_PE_init_state = 2'( __const__EXPIRED_at_CE_next_PE_init_state );
      end
    end
    else if ( ( ( PE_init_state == 2'( __const__INIT_at_CE_next_PE_init_state ) ) & ( num_requested == ( 2'd1 - 2'd1 ) ) ) & mmaster_req_en ) begin
      next_PE_init_state = 2'( __const__FIRE_at_CE_next_PE_init_state );
    end
    else if ( ( PE_init_state == 2'( __const__FIRE_at_CE_next_PE_init_state ) ) & mmaster_req_en ) begin
      next_PE_init_state = 2'( __const__EXPIRED_at_CE_next_PE_init_state );
    end
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineCtrl.py:204
  // s.is_PE_init_addr //= lambda: ((s.PE_init_state == FIRE) & ~s.mmaster_req_en) | (s.next_PE_init_state == FIRE)
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_CE_e_0__ctrl_is_PE_init_addr
    is_PE_init_addr = ( ( PE_init_state == 2'( __const__FIRE_at__lambda__s_dut_cgra_xcel_dpath_cgra_dpath_CE_e_0__ctrl_is_PE_init_addr ) ) & ( ~mmaster_req_en ) ) | ( next_PE_init_state == 2'( __const__FIRE_at__lambda__s_dut_cgra_xcel_dpath_cgra_dpath_CE_e_0__ctrl_is_PE_init_addr ) );
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineCtrl.py:215
  // s.is_addr_incr_by_nword //= lambda: s.mmaster_req_en & ( s.count_cfgs != 0 ) & ( s.count_words == 0 )
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_CE_e_0__ctrl_is_addr_incr_by_nword
    is_addr_incr_by_nword = ( mmaster_req_en & ( count_cfgs != 14'd0 ) ) & ( count_words == 14'd0 );
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineCtrl.py:214
  // s.is_addr_incr_by_word //= lambda: s.mmaster_req_en & ( s.count_words != 0 )
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_CE_e_0__ctrl_is_addr_incr_by_word
    is_addr_incr_by_word = mmaster_req_en & ( count_words != 14'd0 );
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineCtrl.py:216
  // s.is_cfg_sent //= lambda: s.cfg_out_val & s.cfg_out_rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_CE_e_0__ctrl_is_cfg_sent
    is_cfg_sent = cfg_out_val & cfg_out_rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineCtrl.py:210
  // s.is_done //= lambda: zext( s.num_sent_cfgs, p.addr_width ) == s.count_cfg_init
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_CE_e_0__ctrl_is_done
    is_done = { { 10 { 1'b0 } }, num_sent_cfgs } == count_cfg_init;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineCtrl.py:131
  // s.mmaster_req_en //= lambda: ((s.count_cfgs != 0) | (s.count_words != 0)) & s.mmaster_req_rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_CE_e_0__ctrl_mmaster_req_en
    mmaster_req_en = ( ( count_cfgs != 14'd0 ) | ( count_words != 14'd0 ) ) & mmaster_req_rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineCtrl.py:218
  // s.start_with_ME //= lambda: ~s.is_ME_base_addr_zero
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_CE_e_0__ctrl_start_with_ME
    start_with_ME = ~is_ME_base_addr_zero;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineCtrl.py:219
  // s.start_with_PE //= lambda: s.is_ME_base_addr_zero & ~s.is_PE_base_addr_zero
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_CE_e_0__ctrl_start_with_PE
    start_with_PE = is_ME_base_addr_zero & ( ~is_PE_base_addr_zero );
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineCtrl.py:90
  // @update
  // def next_remaining_cfgs():
  //   if s.cfg_init:
  //     s.next_count_cfgs @= s.count_cfg_init
  //   elif s.mmaster_req_en & ( s.count_cfgs != 0 ) & ( s.count_words == 0 ):
  //     s.next_count_cfgs @= s.count_cfgs - 1
  //   else:
  //     s.next_count_cfgs @= s.count_cfgs
  
  always_comb begin : next_remaining_cfgs
    if ( cfg_init ) begin
      next_count_cfgs = count_cfg_init;
    end
    else if ( ( mmaster_req_en & ( count_cfgs != 14'd0 ) ) & ( count_words == 14'd0 ) ) begin
      next_count_cfgs = count_cfgs - 14'd1;
    end
    else
      next_count_cfgs = count_cfgs;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineCtrl.py:102
  // @update
  // def next_remaining_words():
  //   if s.cfg_init:
  //     s.next_count_words @= count_words_init
  //   elif s.mmaster_req_en & ( s.count_words != 0 ):
  //     s.next_count_words @= s.count_words - 1
  //   elif s.mmaster_req_en & ( s.count_words == 0 ):
  //     s.next_count_words @= count_words_init
  //   else:
  //     s.next_count_words @= s.count_words
  
  always_comb begin : next_remaining_words
    if ( cfg_init ) begin
      next_count_words = 14'( __const__count_words_init_at_next_remaining_words );
    end
    else if ( mmaster_req_en & ( count_words != 14'd0 ) ) begin
      next_count_words = count_words - 14'd1;
    end
    else if ( mmaster_req_en & ( count_words == 14'd0 ) ) begin
      next_count_words = 14'( __const__count_words_init_at_next_remaining_words );
    end
    else
      next_count_words = count_words;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineCtrl.py:223
  // @update
  // def shift_ptr_map_next():
  //   s.shift_reg_pt_map_next @= s.reg_mem_rdata_en << 1
  //   s.shift_reg_pt_map_next[0] @= s.reg_mem_rdata_en[p.cfg_nwords-1]
  
  always_comb begin : shift_ptr_map_next
    shift_reg_pt_map_next = reg_mem_rdata_en << 1'd1;
    shift_reg_pt_map_next[1'd0] = reg_mem_rdata_en[1'd1 - 1'd1];
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineCtrl.py:147
  // @update_ff
  // def CE_ctrl_count_sent():
  //   if s.reset:
  //     s.num_sent_cfgs <<= 0
  //   else:
  //     if s.cfg_init:
  //       s.num_sent_cfgs <<= 0
  //     elif s.cfg_out_val & s.cfg_out_rdy:
  //       s.num_sent_cfgs <<= s.num_sent_cfgs + 1
  
  always_ff @(posedge clk) begin : CE_ctrl_count_sent
    if ( reset ) begin
      num_sent_cfgs <= 4'd0;
    end
    else if ( cfg_init ) begin
      num_sent_cfgs <= 4'd0;
    end
    else if ( cfg_out_val & cfg_out_rdy ) begin
      num_sent_cfgs <= num_sent_cfgs + 4'd1;
    end
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineCtrl.py:185
  // @update_ff
  // def CE_is_PE_init_addr():
  //   if s.reset:
  //     s.PE_init_state <<= INIT
  //   else:
  //     s.PE_init_state <<= s.next_PE_init_state
  
  always_ff @(posedge clk) begin : CE_is_PE_init_addr
    if ( reset ) begin
      PE_init_state <= 2'( __const__INIT_at_CE_is_PE_init_addr );
    end
    else
      PE_init_state <= next_PE_init_state;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineCtrl.py:163
  // @update_ff
  // def CE_num_requested_r():
  //   if s.reset:
  //     s.num_requested <<= 0
  //   else:
  //     if s.mmaster_req_en:
  //       if s.num_requested == (p.cfg_nwords-1):
  //         s.num_requested <<= 0
  //       else:
  //         s.num_requested <<= s.num_requested + 1
  
  always_ff @(posedge clk) begin : CE_num_requested_r
    if ( reset ) begin
      num_requested <= 2'd0;
    end
    else if ( mmaster_req_en ) begin
      if ( num_requested == ( 2'd1 - 2'd1 ) ) begin
        num_requested <= 2'd0;
      end
      else
        num_requested <= num_requested + 2'd1;
    end
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineCtrl.py:60
  // @update_ff
  // def reg_counts():
  //   if s.reset:
  //     s.count_cfgs <<= 0
  //     s.count_words <<= 0
  //   else:
  //     s.count_cfgs <<= s.next_count_cfgs
  //     s.count_words <<= s.next_count_words
  
  always_ff @(posedge clk) begin : reg_counts
    if ( reset ) begin
      count_cfgs <= 14'd0;
      count_words <= 14'd0;
    end
    else begin
      count_cfgs <= next_count_cfgs;
      count_words <= next_count_words;
    end
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineCtrl.py:121
  // @update_ff
  // def ser_fifo_enqueue_registered():
  //   if s.reset:
  //     s.ser_fifo_full_r <<= 0
  //   else:
  //     s.ser_fifo_full_r <<= s.reg_mem_rdata_en[p.cfg_nwords-1] & s.mem_resp_en
  
  always_ff @(posedge clk) begin : ser_fifo_enqueue_registered
    if ( reset ) begin
      ser_fifo_full_r <= 1'd0;
    end
    else
      ser_fifo_full_r <= reg_mem_rdata_en[1'd1 - 1'd1] & mem_resp_en;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineCtrl.py:228
  // @update_ff
  // def shift_ptr_map():
  //   if s.reset:
  //     s.reg_mem_rdata_en <<= 1
  //   else:
  //     if s.cfg_init:
  //       s.reg_mem_rdata_en <<= 1
  //     elif s.mem_resp_en:
  //       s.reg_mem_rdata_en <<= s.shift_reg_pt_map_next
  
  always_ff @(posedge clk) begin : shift_ptr_map
    if ( reset ) begin
      reg_mem_rdata_en <= 1'd1;
    end
    else if ( cfg_init ) begin
      reg_mem_rdata_en <= 1'd1;
    end
    else if ( mem_resp_en ) begin
      reg_mem_rdata_en <= shift_reg_pt_map_next;
    end
  end

  assign mem_resp_rdy = 1'd1;
  assign cfg_out_val = ser_fifo_full_r;
  assign cfg_reset = cfg_init;

endmodule


// PyMTL Component RegEnRst Definition
// At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/registers.py

module RegEnRst__Type_Bits32__reset_value_0
(
  input  logic [0:0] clk ,
  input  logic [0:0] en ,
  input  logic [31:0] in_ ,
  output logic [31:0] out ,
  input  logic [0:0] reset 
);
  localparam logic [0:0] __const__reset_value_at_up_regenrst  = 1'd0;

  // PyMTL Update Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/registers.py:55
  // @update_ff
  // def up_regenrst():
  //   if s.reset: s.out <<= reset_value
  //   elif s.en:  s.out <<= s.in_
  
  always_ff @(posedge clk) begin : up_regenrst
    if ( reset ) begin
      out <= 32'( __const__reset_value_at_up_regenrst );
    end
    else if ( en ) begin
      out <= in_;
    end
  end

endmodule


// PyMTL Component ConfigEngineDpath Definition
// Full name: ConfigEngineDpath__num_modules_9__xcel_params_CGRAParams: base_addr_bound:16384, base_addr_register:0, base_addr_scratchpad:256, cfg_nwords:1, cfg_type:<class 'pymtl3.datatypes.bits_import.Bits32'>, data_width:32, enable_FP:True, me_cfg_type:<class 'types.MEConfigMsg_8x8'>, mul_cycles:0, ncols:8, nrows:8, nspads:4, num_remote_masters:4, pe_cfg_type:<class 'types.PEConfigMsg_8x8'>, remote_master_addr_width:28, remote_master_data_width_factor:1, rf_nregs:2, spad_data_width:32, spad_mask_size:0, spad_num_entries:1024, trace_verbosity:0
// At /work/global/pp482/cgra/src/cgra/ConfigEngineDpath.py

module ConfigEngineDpath__9c875dc70f278f0e
(
  input  logic [0:0] cfg_cmd ,
  input  logic [13:0] cfg_me_base_addr ,
  output logic [36:0] cfg_out_msg ,
  input  logic [13:0] cfg_pe_base_addr ,
  input  logic [13:0] cfg_pe_line_stride ,
  input  logic [0:0] cfg_reset ,
  input  logic [0:0] clk ,
  output logic [0:0] is_ME_base_addr_zero ,
  output logic [0:0] is_PE_base_addr_zero ,
  input  logic [0:0] is_PE_init_addr ,
  input  logic [0:0] is_addr_incr_by_nword ,
  input  logic [0:0] is_addr_incr_by_word ,
  input  logic [0:0] is_cfg_sent ,
  input  CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 mem_resp_msg ,
  output CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 mmaster_req_msg ,
  input  logic [0:0] reg_mem_rdata_en ,
  input  logic [0:0] reset ,
  input  logic [0:0] start_with_ME ,
  input  logic [0:0] start_with_PE ,
  input  logic [3:0] y_cord 
);
  localparam logic [0:0] __const__i_at_join_single_word  = 1'd0;
  logic [31:0] all_words_rdata;
  logic [13:0] initial_me_cfg_addr;
  logic [13:0] initial_pe_cfg_addr;
  logic [3:0] initial_target_x_cord;
  logic [13:0] mem_req_addr;
  logic [13:0] mem_req_addr_incr_by_nword;
  logic [13:0] mem_req_addr_incr_by_word;
  logic [13:0] next_mem_req_addr;
  logic [3:0] target_x_cord;
  //-------------------------------------------------------------
  // Component reg_mem_rdata[0:0]
  //-------------------------------------------------------------

  logic [0:0] reg_mem_rdata__clk [0:0];
  logic [0:0] reg_mem_rdata__en [0:0];
  logic [31:0] reg_mem_rdata__in_ [0:0];
  logic [31:0] reg_mem_rdata__out [0:0];
  logic [0:0] reg_mem_rdata__reset [0:0];

  RegEnRst__Type_Bits32__reset_value_0 reg_mem_rdata__0
  (
    .clk( reg_mem_rdata__clk[0] ),
    .en( reg_mem_rdata__en[0] ),
    .in_( reg_mem_rdata__in_[0] ),
    .out( reg_mem_rdata__out[0] ),
    .reset( reg_mem_rdata__reset[0] )
  );

  //-------------------------------------------------------------
  // End of component reg_mem_rdata[0:0]
  //-------------------------------------------------------------

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineDpath.py:120
  // @update
  // def CE_init_target_x_cord():
  //   s.initial_target_x_cord @= 0
  //   if s.start_with_PE:
  //     s.initial_target_x_cord @= 1
  
  always_comb begin : CE_init_target_x_cord
    initial_target_x_cord = 4'd0;
    if ( start_with_PE ) begin
      initial_target_x_cord = 4'd1;
    end
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineDpath.py:101
  // @update
  // def CE_initial_val():
  //   s.initial_me_cfg_addr @= s.cfg_me_base_addr+(p.ncols-1+zext(s.y_cord, p.addr_width))*s.nwords_in_byte_addr
  //   s.initial_pe_cfg_addr @= s.cfg_pe_base_addr+(zext(s.y_cord, p.addr_width)-1)*s.cfg_pe_line_stride
  
  always_comb begin : CE_initial_val
    initial_me_cfg_addr = cfg_me_base_addr + ( ( ( 14'd8 - 14'd1 ) + { { 10 { 1'b0 } }, y_cord } ) * 14'd4 );
    initial_pe_cfg_addr = cfg_pe_base_addr + ( ( { { 10 { 1'b0 } }, y_cord } - 14'd1 ) * cfg_pe_line_stride );
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineDpath.py:106
  // @update
  // def CE_next_mem_req_addr():
  //   s.next_mem_req_addr @= s.mem_req_addr
  //   if s.cfg_reset:
  //     s.next_mem_req_addr @= s.initial_me_cfg_addr
  //     if s.start_with_PE:
  //       s.next_mem_req_addr @= s.initial_pe_cfg_addr
  //   elif s.is_PE_init_addr:
  //     s.next_mem_req_addr @= s.initial_pe_cfg_addr
  //   elif s.is_addr_incr_by_word:
  //     s.next_mem_req_addr @= s.mem_req_addr + s.mem_req_addr_incr_by_word
  //   elif s.is_addr_incr_by_nword:
  //     s.next_mem_req_addr @= s.mem_req_addr + s.mem_req_addr_incr_by_nword
  
  always_comb begin : CE_next_mem_req_addr
    next_mem_req_addr = mem_req_addr;
    if ( cfg_reset ) begin
      next_mem_req_addr = initial_me_cfg_addr;
      if ( start_with_PE ) begin
        next_mem_req_addr = initial_pe_cfg_addr;
      end
    end
    else if ( is_PE_init_addr ) begin
      next_mem_req_addr = initial_pe_cfg_addr;
    end
    else if ( is_addr_incr_by_word ) begin
      next_mem_req_addr = mem_req_addr + mem_req_addr_incr_by_word;
    end
    else if ( is_addr_incr_by_nword ) begin
      next_mem_req_addr = mem_req_addr + mem_req_addr_incr_by_nword;
    end
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineDpath.py:173
  // s.cfg_out_msg //= lambda: concat( s.target_x_cord, s.cfg_cmd, s.all_words_rdata[0:p.cfg_width] )
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_CE_e_0__dpath_cfg_out_msg
    cfg_out_msg = { target_x_cord, cfg_cmd, all_words_rdata[5'd31:5'd0] };
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineDpath.py:179
  // s.is_ME_base_addr_zero //= lambda: s.cfg_me_base_addr == 0
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_CE_e_0__dpath_is_ME_base_addr_zero
    is_ME_base_addr_zero = cfg_me_base_addr == 14'd0;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineDpath.py:180
  // s.is_PE_base_addr_zero //= lambda: s.cfg_pe_base_addr == 0
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_CE_e_0__dpath_is_PE_base_addr_zero
    is_PE_base_addr_zero = cfg_pe_base_addr == 14'd0;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineDpath.py:155
  // s.mmaster_req_msg.opaque //= lambda: zext( s.y_cord, p.opaque_width )
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_CE_e_0__dpath_mmaster_req_msg_opaque
    mmaster_req_msg.opaque = { { 3 { 1'b0 } }, y_cord };
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineDpath.py:138
  // @update
  // def join_single_word():
  //   s.all_words_rdata[0:p.data_width] @= s.reg_mem_rdata[i].out
  
  always_comb begin : join_single_word
    all_words_rdata[5'd31:5'd0] = reg_mem_rdata__out[1'( __const__i_at_join_single_word )];
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineDpath.py:73
  // @update_ff
  // def CE_mem_req_param_addr():
  //   if s.reset:
  //     s.mem_req_addr <<= 0
  //   else:
  //     s.mem_req_addr <<= s.next_mem_req_addr
  
  always_ff @(posedge clk) begin : CE_mem_req_param_addr
    if ( reset ) begin
      mem_req_addr <= 14'd0;
    end
    else
      mem_req_addr <= next_mem_req_addr;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineDpath.py:163
  // @update_ff
  // def target_x_cord_ff():
  //   if s.reset:
  //     s.target_x_cord <<= s.initial_target_x_cord
  //   else:
  //     if s.cfg_reset:
  //       s.target_x_cord <<= s.initial_target_x_cord
  //     elif s.is_cfg_sent:
  //       s.target_x_cord <<= s.target_x_cord+1
  
  always_ff @(posedge clk) begin : target_x_cord_ff
    if ( reset ) begin
      target_x_cord <= initial_target_x_cord;
    end
    else if ( cfg_reset ) begin
      target_x_cord <= initial_target_x_cord;
    end
    else if ( is_cfg_sent ) begin
      target_x_cord <= target_x_cord + 4'd1;
    end
  end

  assign mem_req_addr_incr_by_word = 14'd4;
  assign mem_req_addr_incr_by_nword = 14'd4;
  assign reg_mem_rdata__clk[0] = clk;
  assign reg_mem_rdata__reset[0] = reset;
  assign reg_mem_rdata__in_[0] = mem_resp_msg.data;
  assign reg_mem_rdata__en[0] = reg_mem_rdata_en[0:0];
  assign mmaster_req_msg.wen = 1'd0;
  assign mmaster_req_msg.addr = mem_req_addr;
  assign mmaster_req_msg.data = 32'd0;

endmodule


// PyMTL Component ConfigEngine Definition
// Full name: ConfigEngine__num_modules_9__xcel_params_CGRAParams: base_addr_bound:16384, base_addr_register:0, base_addr_scratchpad:256, cfg_nwords:1, cfg_type:<class 'pymtl3.datatypes.bits_import.Bits32'>, data_width:32, enable_FP:True, me_cfg_type:<class 'types.MEConfigMsg_8x8'>, mul_cycles:0, ncols:8, nrows:8, nspads:4, num_remote_masters:4, pe_cfg_type:<class 'types.PEConfigMsg_8x8'>, remote_master_addr_width:28, remote_master_data_width_factor:1, rf_nregs:2, spad_data_width:32, spad_mask_size:0, spad_num_entries:1024, trace_verbosity:0
// At /work/global/pp482/cgra/src/cgra/ConfigEngine.py

module ConfigEngine__9c875dc70f278f0e
(
  input  logic [0:0] cfg_cmd ,
  input  logic [0:0] cfg_init ,
  input  logic [13:0] cfg_me_base_addr ,
  input  logic [13:0] cfg_pe_base_addr ,
  input  logic [13:0] cfg_pe_line_stride ,
  input  logic [0:0] clk ,
  output logic [0:0] is_done ,
  input  logic [0:0] reset ,
  input  logic [3:0] y_cord ,
  output logic [36:0] cfg_out__msg  ,
  input logic [0:0] cfg_out__rdy  ,
  output logic [0:0] cfg_out__val  ,
  output logic [0:0] mem_master__req__en ,
  output CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 mem_master__req__msg ,
  input logic [0:0] mem_master__req__rdy ,
  input logic [0:0] mem_master__resp__en ,
  input CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 mem_master__resp__msg ,
  output logic [0:0] mem_master__resp__rdy 
);
  //-------------------------------------------------------------
  // Component ctrl
  //-------------------------------------------------------------

  logic [0:0] ctrl__cfg_init;
  logic [0:0] ctrl__cfg_out_rdy;
  logic [0:0] ctrl__cfg_out_val;
  logic [0:0] ctrl__cfg_reset;
  logic [0:0] ctrl__clk;
  logic [0:0] ctrl__is_ME_base_addr_zero;
  logic [0:0] ctrl__is_PE_base_addr_zero;
  logic [0:0] ctrl__is_PE_init_addr;
  logic [0:0] ctrl__is_addr_incr_by_nword;
  logic [0:0] ctrl__is_addr_incr_by_word;
  logic [0:0] ctrl__is_cfg_sent;
  logic [0:0] ctrl__is_done;
  logic [0:0] ctrl__mem_resp_en;
  logic [0:0] ctrl__mem_resp_rdy;
  logic [0:0] ctrl__mmaster_req_en;
  logic [0:0] ctrl__mmaster_req_rdy;
  logic [0:0] ctrl__reg_mem_rdata_en;
  logic [0:0] ctrl__reset;
  logic [0:0] ctrl__start_with_ME;
  logic [0:0] ctrl__start_with_PE;

  ConfigEngineCtrl__9c875dc70f278f0e ctrl
  (
    .cfg_init( ctrl__cfg_init ),
    .cfg_out_rdy( ctrl__cfg_out_rdy ),
    .cfg_out_val( ctrl__cfg_out_val ),
    .cfg_reset( ctrl__cfg_reset ),
    .clk( ctrl__clk ),
    .is_ME_base_addr_zero( ctrl__is_ME_base_addr_zero ),
    .is_PE_base_addr_zero( ctrl__is_PE_base_addr_zero ),
    .is_PE_init_addr( ctrl__is_PE_init_addr ),
    .is_addr_incr_by_nword( ctrl__is_addr_incr_by_nword ),
    .is_addr_incr_by_word( ctrl__is_addr_incr_by_word ),
    .is_cfg_sent( ctrl__is_cfg_sent ),
    .is_done( ctrl__is_done ),
    .mem_resp_en( ctrl__mem_resp_en ),
    .mem_resp_rdy( ctrl__mem_resp_rdy ),
    .mmaster_req_en( ctrl__mmaster_req_en ),
    .mmaster_req_rdy( ctrl__mmaster_req_rdy ),
    .reg_mem_rdata_en( ctrl__reg_mem_rdata_en ),
    .reset( ctrl__reset ),
    .start_with_ME( ctrl__start_with_ME ),
    .start_with_PE( ctrl__start_with_PE )
  );

  //-------------------------------------------------------------
  // End of component ctrl
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component dpath
  //-------------------------------------------------------------

  logic [0:0] dpath__cfg_cmd;
  logic [13:0] dpath__cfg_me_base_addr;
  logic [36:0] dpath__cfg_out_msg;
  logic [13:0] dpath__cfg_pe_base_addr;
  logic [13:0] dpath__cfg_pe_line_stride;
  logic [0:0] dpath__cfg_reset;
  logic [0:0] dpath__clk;
  logic [0:0] dpath__is_ME_base_addr_zero;
  logic [0:0] dpath__is_PE_base_addr_zero;
  logic [0:0] dpath__is_PE_init_addr;
  logic [0:0] dpath__is_addr_incr_by_nword;
  logic [0:0] dpath__is_addr_incr_by_word;
  logic [0:0] dpath__is_cfg_sent;
  CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 dpath__mem_resp_msg;
  CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 dpath__mmaster_req_msg;
  logic [0:0] dpath__reg_mem_rdata_en;
  logic [0:0] dpath__reset;
  logic [0:0] dpath__start_with_ME;
  logic [0:0] dpath__start_with_PE;
  logic [3:0] dpath__y_cord;

  ConfigEngineDpath__9c875dc70f278f0e dpath
  (
    .cfg_cmd( dpath__cfg_cmd ),
    .cfg_me_base_addr( dpath__cfg_me_base_addr ),
    .cfg_out_msg( dpath__cfg_out_msg ),
    .cfg_pe_base_addr( dpath__cfg_pe_base_addr ),
    .cfg_pe_line_stride( dpath__cfg_pe_line_stride ),
    .cfg_reset( dpath__cfg_reset ),
    .clk( dpath__clk ),
    .is_ME_base_addr_zero( dpath__is_ME_base_addr_zero ),
    .is_PE_base_addr_zero( dpath__is_PE_base_addr_zero ),
    .is_PE_init_addr( dpath__is_PE_init_addr ),
    .is_addr_incr_by_nword( dpath__is_addr_incr_by_nword ),
    .is_addr_incr_by_word( dpath__is_addr_incr_by_word ),
    .is_cfg_sent( dpath__is_cfg_sent ),
    .mem_resp_msg( dpath__mem_resp_msg ),
    .mmaster_req_msg( dpath__mmaster_req_msg ),
    .reg_mem_rdata_en( dpath__reg_mem_rdata_en ),
    .reset( dpath__reset ),
    .start_with_ME( dpath__start_with_ME ),
    .start_with_PE( dpath__start_with_PE ),
    .y_cord( dpath__y_cord )
  );

  //-------------------------------------------------------------
  // End of component dpath
  //-------------------------------------------------------------

  assign ctrl__clk = clk;
  assign ctrl__reset = reset;
  assign dpath__clk = clk;
  assign dpath__reset = reset;
  assign ctrl__cfg_init = cfg_init;
  assign dpath__cfg_me_base_addr = cfg_me_base_addr;
  assign dpath__cfg_pe_base_addr = cfg_pe_base_addr;
  assign dpath__cfg_pe_line_stride = cfg_pe_line_stride;
  assign dpath__cfg_cmd = cfg_cmd;
  assign is_done = ctrl__is_done;
  assign dpath__y_cord = y_cord;
  assign mem_master__req__en = ctrl__mmaster_req_en;
  assign ctrl__mmaster_req_rdy = mem_master__req__rdy;
  assign mem_master__req__msg = dpath__mmaster_req_msg;
  assign ctrl__mem_resp_en = mem_master__resp__en;
  assign mem_master__resp__rdy = ctrl__mem_resp_rdy;
  assign dpath__mem_resp_msg = mem_master__resp__msg;
  assign cfg_out__val = ctrl__cfg_out_val;
  assign ctrl__cfg_out_rdy = cfg_out__rdy;
  assign cfg_out__msg = dpath__cfg_out_msg;
  assign dpath__cfg_reset = ctrl__cfg_reset;
  assign dpath__is_addr_incr_by_word = ctrl__is_addr_incr_by_word;
  assign dpath__is_addr_incr_by_nword = ctrl__is_addr_incr_by_nword;
  assign dpath__is_PE_init_addr = ctrl__is_PE_init_addr;
  assign dpath__start_with_ME = ctrl__start_with_ME;
  assign dpath__start_with_PE = ctrl__start_with_PE;
  assign dpath__is_cfg_sent = ctrl__is_cfg_sent;
  assign ctrl__is_ME_base_addr_zero = dpath__is_ME_base_addr_zero;
  assign ctrl__is_PE_base_addr_zero = dpath__is_PE_base_addr_zero;
  assign dpath__reg_mem_rdata_en = ctrl__reg_mem_rdata_en;

endmodule


// PyMTL Component ConfigEngineCtrl Definition
// Full name: ConfigEngineCtrl__num_modules_8__xcel_params_CGRAParams: base_addr_bound:16384, base_addr_register:0, base_addr_scratchpad:256, cfg_nwords:1, cfg_type:<class 'pymtl3.datatypes.bits_import.Bits32'>, data_width:32, enable_FP:True, me_cfg_type:<class 'types.MEConfigMsg_8x8'>, mul_cycles:0, ncols:8, nrows:8, nspads:4, num_remote_masters:4, pe_cfg_type:<class 'types.PEConfigMsg_8x8'>, remote_master_addr_width:28, remote_master_data_width_factor:1, rf_nregs:2, spad_data_width:32, spad_mask_size:0, spad_num_entries:1024, trace_verbosity:0
// At /work/global/pp482/cgra/src/cgra/ConfigEngineCtrl.py

module ConfigEngineCtrl__9486fd872e9f5118
(
  input  logic [0:0] cfg_init ,
  input  logic [0:0] cfg_out_rdy ,
  output logic [0:0] cfg_out_val ,
  output logic [0:0] cfg_reset ,
  input  logic [0:0] clk ,
  input  logic [0:0] is_ME_base_addr_zero ,
  input  logic [0:0] is_PE_base_addr_zero ,
  output logic [0:0] is_PE_init_addr ,
  output logic [0:0] is_addr_incr_by_nword ,
  output logic [0:0] is_addr_incr_by_word ,
  output logic [0:0] is_cfg_sent ,
  output logic [0:0] is_done ,
  input  logic [0:0] mem_resp_en ,
  output logic [0:0] mem_resp_rdy ,
  output logic [0:0] mmaster_req_en ,
  input  logic [0:0] mmaster_req_rdy ,
  output logic [0:0] reg_mem_rdata_en ,
  input  logic [0:0] reset ,
  output logic [0:0] start_with_ME ,
  output logic [0:0] start_with_PE 
);
  localparam logic [3:0] __const__num_modules_at_CE_init_count_cfg_pure_ME  = 4'd8;
  localparam logic [0:0] __const__count_words_init_at_next_remaining_words  = 1'd0;
  logic [1:0] PE_init_state;
  logic [13:0] count_cfg_init;
  logic [13:0] count_cfgs;
  logic [13:0] count_words;
  logic [1:0] next_PE_init_state;
  logic [13:0] next_count_cfgs;
  logic [13:0] next_count_words;
  logic [1:0] num_requested;
  logic [3:0] num_sent_cfgs;
  logic [0:0] ser_fifo_full_r;
  logic [0:0] shift_reg_pt_map_next;

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineCtrl.py:73
  // @update
  // def CE_init_count_cfg_pure_ME():
  //   s.count_cfg_init @= num_modules
  //   if s.is_ME_base_addr_zero:
  //     s.count_cfg_init @= 0
  
  always_comb begin : CE_init_count_cfg_pure_ME
    count_cfg_init = 14'( __const__num_modules_at_CE_init_count_cfg_pure_ME );
    if ( is_ME_base_addr_zero ) begin
      count_cfg_init = 14'd0;
    end
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineCtrl.py:215
  // s.is_addr_incr_by_nword //= lambda: s.mmaster_req_en & ( s.count_cfgs != 0 ) & ( s.count_words == 0 )
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_CE_s_ctrl_is_addr_incr_by_nword
    is_addr_incr_by_nword = ( mmaster_req_en & ( count_cfgs != 14'd0 ) ) & ( count_words == 14'd0 );
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineCtrl.py:214
  // s.is_addr_incr_by_word //= lambda: s.mmaster_req_en & ( s.count_words != 0 )
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_CE_s_ctrl_is_addr_incr_by_word
    is_addr_incr_by_word = mmaster_req_en & ( count_words != 14'd0 );
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineCtrl.py:216
  // s.is_cfg_sent //= lambda: s.cfg_out_val & s.cfg_out_rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_CE_s_ctrl_is_cfg_sent
    is_cfg_sent = cfg_out_val & cfg_out_rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineCtrl.py:210
  // s.is_done //= lambda: zext( s.num_sent_cfgs, p.addr_width ) == s.count_cfg_init
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_CE_s_ctrl_is_done
    is_done = { { 10 { 1'b0 } }, num_sent_cfgs } == count_cfg_init;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineCtrl.py:131
  // s.mmaster_req_en //= lambda: ((s.count_cfgs != 0) | (s.count_words != 0)) & s.mmaster_req_rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_CE_s_ctrl_mmaster_req_en
    mmaster_req_en = ( ( count_cfgs != 14'd0 ) | ( count_words != 14'd0 ) ) & mmaster_req_rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineCtrl.py:218
  // s.start_with_ME //= lambda: ~s.is_ME_base_addr_zero
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_CE_s_ctrl_start_with_ME
    start_with_ME = ~is_ME_base_addr_zero;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineCtrl.py:219
  // s.start_with_PE //= lambda: s.is_ME_base_addr_zero & ~s.is_PE_base_addr_zero
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_CE_s_ctrl_start_with_PE
    start_with_PE = is_ME_base_addr_zero & ( ~is_PE_base_addr_zero );
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineCtrl.py:90
  // @update
  // def next_remaining_cfgs():
  //   if s.cfg_init:
  //     s.next_count_cfgs @= s.count_cfg_init
  //   elif s.mmaster_req_en & ( s.count_cfgs != 0 ) & ( s.count_words == 0 ):
  //     s.next_count_cfgs @= s.count_cfgs - 1
  //   else:
  //     s.next_count_cfgs @= s.count_cfgs
  
  always_comb begin : next_remaining_cfgs
    if ( cfg_init ) begin
      next_count_cfgs = count_cfg_init;
    end
    else if ( ( mmaster_req_en & ( count_cfgs != 14'd0 ) ) & ( count_words == 14'd0 ) ) begin
      next_count_cfgs = count_cfgs - 14'd1;
    end
    else
      next_count_cfgs = count_cfgs;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineCtrl.py:102
  // @update
  // def next_remaining_words():
  //   if s.cfg_init:
  //     s.next_count_words @= count_words_init
  //   elif s.mmaster_req_en & ( s.count_words != 0 ):
  //     s.next_count_words @= s.count_words - 1
  //   elif s.mmaster_req_en & ( s.count_words == 0 ):
  //     s.next_count_words @= count_words_init
  //   else:
  //     s.next_count_words @= s.count_words
  
  always_comb begin : next_remaining_words
    if ( cfg_init ) begin
      next_count_words = 14'( __const__count_words_init_at_next_remaining_words );
    end
    else if ( mmaster_req_en & ( count_words != 14'd0 ) ) begin
      next_count_words = count_words - 14'd1;
    end
    else if ( mmaster_req_en & ( count_words == 14'd0 ) ) begin
      next_count_words = 14'( __const__count_words_init_at_next_remaining_words );
    end
    else
      next_count_words = count_words;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineCtrl.py:223
  // @update
  // def shift_ptr_map_next():
  //   s.shift_reg_pt_map_next @= s.reg_mem_rdata_en << 1
  //   s.shift_reg_pt_map_next[0] @= s.reg_mem_rdata_en[p.cfg_nwords-1]
  
  always_comb begin : shift_ptr_map_next
    shift_reg_pt_map_next = reg_mem_rdata_en << 1'd1;
    shift_reg_pt_map_next[1'd0] = reg_mem_rdata_en[1'd1 - 1'd1];
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineCtrl.py:147
  // @update_ff
  // def CE_ctrl_count_sent():
  //   if s.reset:
  //     s.num_sent_cfgs <<= 0
  //   else:
  //     if s.cfg_init:
  //       s.num_sent_cfgs <<= 0
  //     elif s.cfg_out_val & s.cfg_out_rdy:
  //       s.num_sent_cfgs <<= s.num_sent_cfgs + 1
  
  always_ff @(posedge clk) begin : CE_ctrl_count_sent
    if ( reset ) begin
      num_sent_cfgs <= 4'd0;
    end
    else if ( cfg_init ) begin
      num_sent_cfgs <= 4'd0;
    end
    else if ( cfg_out_val & cfg_out_rdy ) begin
      num_sent_cfgs <= num_sent_cfgs + 4'd1;
    end
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineCtrl.py:163
  // @update_ff
  // def CE_num_requested_r():
  //   if s.reset:
  //     s.num_requested <<= 0
  //   else:
  //     if s.mmaster_req_en:
  //       if s.num_requested == (p.cfg_nwords-1):
  //         s.num_requested <<= 0
  //       else:
  //         s.num_requested <<= s.num_requested + 1
  
  always_ff @(posedge clk) begin : CE_num_requested_r
    if ( reset ) begin
      num_requested <= 2'd0;
    end
    else if ( mmaster_req_en ) begin
      if ( num_requested == ( 2'd1 - 2'd1 ) ) begin
        num_requested <= 2'd0;
      end
      else
        num_requested <= num_requested + 2'd1;
    end
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineCtrl.py:60
  // @update_ff
  // def reg_counts():
  //   if s.reset:
  //     s.count_cfgs <<= 0
  //     s.count_words <<= 0
  //   else:
  //     s.count_cfgs <<= s.next_count_cfgs
  //     s.count_words <<= s.next_count_words
  
  always_ff @(posedge clk) begin : reg_counts
    if ( reset ) begin
      count_cfgs <= 14'd0;
      count_words <= 14'd0;
    end
    else begin
      count_cfgs <= next_count_cfgs;
      count_words <= next_count_words;
    end
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineCtrl.py:121
  // @update_ff
  // def ser_fifo_enqueue_registered():
  //   if s.reset:
  //     s.ser_fifo_full_r <<= 0
  //   else:
  //     s.ser_fifo_full_r <<= s.reg_mem_rdata_en[p.cfg_nwords-1] & s.mem_resp_en
  
  always_ff @(posedge clk) begin : ser_fifo_enqueue_registered
    if ( reset ) begin
      ser_fifo_full_r <= 1'd0;
    end
    else
      ser_fifo_full_r <= reg_mem_rdata_en[1'd1 - 1'd1] & mem_resp_en;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineCtrl.py:228
  // @update_ff
  // def shift_ptr_map():
  //   if s.reset:
  //     s.reg_mem_rdata_en <<= 1
  //   else:
  //     if s.cfg_init:
  //       s.reg_mem_rdata_en <<= 1
  //     elif s.mem_resp_en:
  //       s.reg_mem_rdata_en <<= s.shift_reg_pt_map_next
  
  always_ff @(posedge clk) begin : shift_ptr_map
    if ( reset ) begin
      reg_mem_rdata_en <= 1'd1;
    end
    else if ( cfg_init ) begin
      reg_mem_rdata_en <= 1'd1;
    end
    else if ( mem_resp_en ) begin
      reg_mem_rdata_en <= shift_reg_pt_map_next;
    end
  end

  assign mem_resp_rdy = 1'd1;
  assign cfg_out_val = ser_fifo_full_r;
  assign is_PE_init_addr = 1'd0;
  assign PE_init_state = 2'd0;
  assign cfg_reset = cfg_init;

endmodule


// PyMTL Component ConfigEngineDpath Definition
// Full name: ConfigEngineDpath__num_modules_8__xcel_params_CGRAParams: base_addr_bound:16384, base_addr_register:0, base_addr_scratchpad:256, cfg_nwords:1, cfg_type:<class 'pymtl3.datatypes.bits_import.Bits32'>, data_width:32, enable_FP:True, me_cfg_type:<class 'types.MEConfigMsg_8x8'>, mul_cycles:0, ncols:8, nrows:8, nspads:4, num_remote_masters:4, pe_cfg_type:<class 'types.PEConfigMsg_8x8'>, remote_master_addr_width:28, remote_master_data_width_factor:1, rf_nregs:2, spad_data_width:32, spad_mask_size:0, spad_num_entries:1024, trace_verbosity:0
// At /work/global/pp482/cgra/src/cgra/ConfigEngineDpath.py

module ConfigEngineDpath__9486fd872e9f5118
(
  input  logic [0:0] cfg_cmd ,
  input  logic [13:0] cfg_me_base_addr ,
  output logic [36:0] cfg_out_msg ,
  input  logic [13:0] cfg_pe_base_addr ,
  input  logic [13:0] cfg_pe_line_stride ,
  input  logic [0:0] cfg_reset ,
  input  logic [0:0] clk ,
  output logic [0:0] is_ME_base_addr_zero ,
  output logic [0:0] is_PE_base_addr_zero ,
  input  logic [0:0] is_PE_init_addr ,
  input  logic [0:0] is_addr_incr_by_nword ,
  input  logic [0:0] is_addr_incr_by_word ,
  input  logic [0:0] is_cfg_sent ,
  input  CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 mem_resp_msg ,
  output CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 mmaster_req_msg ,
  input  logic [0:0] reg_mem_rdata_en ,
  input  logic [0:0] reset ,
  input  logic [0:0] start_with_ME ,
  input  logic [0:0] start_with_PE ,
  input  logic [3:0] y_cord 
);
  localparam logic [0:0] __const__i_at_join_single_word  = 1'd0;
  logic [31:0] all_words_rdata;
  logic [13:0] initial_me_cfg_addr;
  logic [13:0] initial_pe_cfg_addr;
  logic [3:0] initial_target_x_cord;
  logic [13:0] mem_req_addr;
  logic [13:0] mem_req_addr_incr_by_nword;
  logic [13:0] mem_req_addr_incr_by_word;
  logic [13:0] next_mem_req_addr;
  logic [3:0] target_x_cord;
  //-------------------------------------------------------------
  // Component reg_mem_rdata[0:0]
  //-------------------------------------------------------------

  logic [0:0] reg_mem_rdata__clk [0:0];
  logic [0:0] reg_mem_rdata__en [0:0];
  logic [31:0] reg_mem_rdata__in_ [0:0];
  logic [31:0] reg_mem_rdata__out [0:0];
  logic [0:0] reg_mem_rdata__reset [0:0];

  RegEnRst__Type_Bits32__reset_value_0 reg_mem_rdata__0
  (
    .clk( reg_mem_rdata__clk[0] ),
    .en( reg_mem_rdata__en[0] ),
    .in_( reg_mem_rdata__in_[0] ),
    .out( reg_mem_rdata__out[0] ),
    .reset( reg_mem_rdata__reset[0] )
  );

  //-------------------------------------------------------------
  // End of component reg_mem_rdata[0:0]
  //-------------------------------------------------------------

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineDpath.py:82
  // @update
  // def CE_initial_val_pure_ME_CE():
  //   s.initial_me_cfg_addr @= s.cfg_me_base_addr
  //   s.initial_pe_cfg_addr @= 0
  
  always_comb begin : CE_initial_val_pure_ME_CE
    initial_me_cfg_addr = cfg_me_base_addr;
    initial_pe_cfg_addr = 14'd0;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineDpath.py:87
  // @update
  // def CE_next_mem_req_addr_pure_ME_CE():
  //   s.next_mem_req_addr @= s.mem_req_addr
  //   if s.cfg_reset:
  //     s.next_mem_req_addr @= s.initial_me_cfg_addr
  //   elif s.is_addr_incr_by_word:
  //     s.next_mem_req_addr @= s.mem_req_addr + s.mem_req_addr_incr_by_word
  //   elif s.is_addr_incr_by_nword:
  //     s.next_mem_req_addr @= s.mem_req_addr + s.mem_req_addr_incr_by_nword
  
  always_comb begin : CE_next_mem_req_addr_pure_ME_CE
    next_mem_req_addr = mem_req_addr;
    if ( cfg_reset ) begin
      next_mem_req_addr = initial_me_cfg_addr;
    end
    else if ( is_addr_incr_by_word ) begin
      next_mem_req_addr = mem_req_addr + mem_req_addr_incr_by_word;
    end
    else if ( is_addr_incr_by_nword ) begin
      next_mem_req_addr = mem_req_addr + mem_req_addr_incr_by_nword;
    end
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineDpath.py:173
  // s.cfg_out_msg //= lambda: concat( s.target_x_cord, s.cfg_cmd, s.all_words_rdata[0:p.cfg_width] )
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_CE_s_dpath_cfg_out_msg
    cfg_out_msg = { target_x_cord, cfg_cmd, all_words_rdata[5'd31:5'd0] };
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineDpath.py:179
  // s.is_ME_base_addr_zero //= lambda: s.cfg_me_base_addr == 0
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_CE_s_dpath_is_ME_base_addr_zero
    is_ME_base_addr_zero = cfg_me_base_addr == 14'd0;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineDpath.py:180
  // s.is_PE_base_addr_zero //= lambda: s.cfg_pe_base_addr == 0
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_CE_s_dpath_is_PE_base_addr_zero
    is_PE_base_addr_zero = cfg_pe_base_addr == 14'd0;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineDpath.py:155
  // s.mmaster_req_msg.opaque //= lambda: zext( s.y_cord, p.opaque_width )
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_CE_s_dpath_mmaster_req_msg_opaque
    mmaster_req_msg.opaque = { { 3 { 1'b0 } }, y_cord };
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineDpath.py:138
  // @update
  // def join_single_word():
  //   s.all_words_rdata[0:p.data_width] @= s.reg_mem_rdata[i].out
  
  always_comb begin : join_single_word
    all_words_rdata[5'd31:5'd0] = reg_mem_rdata__out[1'( __const__i_at_join_single_word )];
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineDpath.py:73
  // @update_ff
  // def CE_mem_req_param_addr():
  //   if s.reset:
  //     s.mem_req_addr <<= 0
  //   else:
  //     s.mem_req_addr <<= s.next_mem_req_addr
  
  always_ff @(posedge clk) begin : CE_mem_req_param_addr
    if ( reset ) begin
      mem_req_addr <= 14'd0;
    end
    else
      mem_req_addr <= next_mem_req_addr;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/ConfigEngineDpath.py:163
  // @update_ff
  // def target_x_cord_ff():
  //   if s.reset:
  //     s.target_x_cord <<= s.initial_target_x_cord
  //   else:
  //     if s.cfg_reset:
  //       s.target_x_cord <<= s.initial_target_x_cord
  //     elif s.is_cfg_sent:
  //       s.target_x_cord <<= s.target_x_cord+1
  
  always_ff @(posedge clk) begin : target_x_cord_ff
    if ( reset ) begin
      target_x_cord <= initial_target_x_cord;
    end
    else if ( cfg_reset ) begin
      target_x_cord <= initial_target_x_cord;
    end
    else if ( is_cfg_sent ) begin
      target_x_cord <= target_x_cord + 4'd1;
    end
  end

  assign mem_req_addr_incr_by_word = 14'd4;
  assign mem_req_addr_incr_by_nword = 14'd4;
  assign initial_target_x_cord = 4'd1;
  assign reg_mem_rdata__clk[0] = clk;
  assign reg_mem_rdata__reset[0] = reset;
  assign reg_mem_rdata__in_[0] = mem_resp_msg.data;
  assign reg_mem_rdata__en[0] = reg_mem_rdata_en[0:0];
  assign mmaster_req_msg.wen = 1'd0;
  assign mmaster_req_msg.addr = mem_req_addr;
  assign mmaster_req_msg.data = 32'd0;

endmodule


// PyMTL Component ConfigEngine Definition
// Full name: ConfigEngine__num_modules_8__xcel_params_CGRAParams: base_addr_bound:16384, base_addr_register:0, base_addr_scratchpad:256, cfg_nwords:1, cfg_type:<class 'pymtl3.datatypes.bits_import.Bits32'>, data_width:32, enable_FP:True, me_cfg_type:<class 'types.MEConfigMsg_8x8'>, mul_cycles:0, ncols:8, nrows:8, nspads:4, num_remote_masters:4, pe_cfg_type:<class 'types.PEConfigMsg_8x8'>, remote_master_addr_width:28, remote_master_data_width_factor:1, rf_nregs:2, spad_data_width:32, spad_mask_size:0, spad_num_entries:1024, trace_verbosity:0
// At /work/global/pp482/cgra/src/cgra/ConfigEngine.py

module ConfigEngine__9486fd872e9f5118
(
  input  logic [0:0] cfg_cmd ,
  input  logic [0:0] cfg_init ,
  input  logic [13:0] cfg_me_base_addr ,
  input  logic [13:0] cfg_pe_base_addr ,
  input  logic [13:0] cfg_pe_line_stride ,
  input  logic [0:0] clk ,
  output logic [0:0] is_done ,
  input  logic [0:0] reset ,
  input  logic [3:0] y_cord ,
  output logic [36:0] cfg_out__msg  ,
  input logic [0:0] cfg_out__rdy  ,
  output logic [0:0] cfg_out__val  ,
  output logic [0:0] mem_master__req__en ,
  output CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 mem_master__req__msg ,
  input logic [0:0] mem_master__req__rdy ,
  input logic [0:0] mem_master__resp__en ,
  input CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 mem_master__resp__msg ,
  output logic [0:0] mem_master__resp__rdy 
);
  //-------------------------------------------------------------
  // Component ctrl
  //-------------------------------------------------------------

  logic [0:0] ctrl__cfg_init;
  logic [0:0] ctrl__cfg_out_rdy;
  logic [0:0] ctrl__cfg_out_val;
  logic [0:0] ctrl__cfg_reset;
  logic [0:0] ctrl__clk;
  logic [0:0] ctrl__is_ME_base_addr_zero;
  logic [0:0] ctrl__is_PE_base_addr_zero;
  logic [0:0] ctrl__is_PE_init_addr;
  logic [0:0] ctrl__is_addr_incr_by_nword;
  logic [0:0] ctrl__is_addr_incr_by_word;
  logic [0:0] ctrl__is_cfg_sent;
  logic [0:0] ctrl__is_done;
  logic [0:0] ctrl__mem_resp_en;
  logic [0:0] ctrl__mem_resp_rdy;
  logic [0:0] ctrl__mmaster_req_en;
  logic [0:0] ctrl__mmaster_req_rdy;
  logic [0:0] ctrl__reg_mem_rdata_en;
  logic [0:0] ctrl__reset;
  logic [0:0] ctrl__start_with_ME;
  logic [0:0] ctrl__start_with_PE;

  ConfigEngineCtrl__9486fd872e9f5118 ctrl
  (
    .cfg_init( ctrl__cfg_init ),
    .cfg_out_rdy( ctrl__cfg_out_rdy ),
    .cfg_out_val( ctrl__cfg_out_val ),
    .cfg_reset( ctrl__cfg_reset ),
    .clk( ctrl__clk ),
    .is_ME_base_addr_zero( ctrl__is_ME_base_addr_zero ),
    .is_PE_base_addr_zero( ctrl__is_PE_base_addr_zero ),
    .is_PE_init_addr( ctrl__is_PE_init_addr ),
    .is_addr_incr_by_nword( ctrl__is_addr_incr_by_nword ),
    .is_addr_incr_by_word( ctrl__is_addr_incr_by_word ),
    .is_cfg_sent( ctrl__is_cfg_sent ),
    .is_done( ctrl__is_done ),
    .mem_resp_en( ctrl__mem_resp_en ),
    .mem_resp_rdy( ctrl__mem_resp_rdy ),
    .mmaster_req_en( ctrl__mmaster_req_en ),
    .mmaster_req_rdy( ctrl__mmaster_req_rdy ),
    .reg_mem_rdata_en( ctrl__reg_mem_rdata_en ),
    .reset( ctrl__reset ),
    .start_with_ME( ctrl__start_with_ME ),
    .start_with_PE( ctrl__start_with_PE )
  );

  //-------------------------------------------------------------
  // End of component ctrl
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component dpath
  //-------------------------------------------------------------

  logic [0:0] dpath__cfg_cmd;
  logic [13:0] dpath__cfg_me_base_addr;
  logic [36:0] dpath__cfg_out_msg;
  logic [13:0] dpath__cfg_pe_base_addr;
  logic [13:0] dpath__cfg_pe_line_stride;
  logic [0:0] dpath__cfg_reset;
  logic [0:0] dpath__clk;
  logic [0:0] dpath__is_ME_base_addr_zero;
  logic [0:0] dpath__is_PE_base_addr_zero;
  logic [0:0] dpath__is_PE_init_addr;
  logic [0:0] dpath__is_addr_incr_by_nword;
  logic [0:0] dpath__is_addr_incr_by_word;
  logic [0:0] dpath__is_cfg_sent;
  CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 dpath__mem_resp_msg;
  CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 dpath__mmaster_req_msg;
  logic [0:0] dpath__reg_mem_rdata_en;
  logic [0:0] dpath__reset;
  logic [0:0] dpath__start_with_ME;
  logic [0:0] dpath__start_with_PE;
  logic [3:0] dpath__y_cord;

  ConfigEngineDpath__9486fd872e9f5118 dpath
  (
    .cfg_cmd( dpath__cfg_cmd ),
    .cfg_me_base_addr( dpath__cfg_me_base_addr ),
    .cfg_out_msg( dpath__cfg_out_msg ),
    .cfg_pe_base_addr( dpath__cfg_pe_base_addr ),
    .cfg_pe_line_stride( dpath__cfg_pe_line_stride ),
    .cfg_reset( dpath__cfg_reset ),
    .clk( dpath__clk ),
    .is_ME_base_addr_zero( dpath__is_ME_base_addr_zero ),
    .is_PE_base_addr_zero( dpath__is_PE_base_addr_zero ),
    .is_PE_init_addr( dpath__is_PE_init_addr ),
    .is_addr_incr_by_nword( dpath__is_addr_incr_by_nword ),
    .is_addr_incr_by_word( dpath__is_addr_incr_by_word ),
    .is_cfg_sent( dpath__is_cfg_sent ),
    .mem_resp_msg( dpath__mem_resp_msg ),
    .mmaster_req_msg( dpath__mmaster_req_msg ),
    .reg_mem_rdata_en( dpath__reg_mem_rdata_en ),
    .reset( dpath__reset ),
    .start_with_ME( dpath__start_with_ME ),
    .start_with_PE( dpath__start_with_PE ),
    .y_cord( dpath__y_cord )
  );

  //-------------------------------------------------------------
  // End of component dpath
  //-------------------------------------------------------------

  assign ctrl__clk = clk;
  assign ctrl__reset = reset;
  assign dpath__clk = clk;
  assign dpath__reset = reset;
  assign ctrl__cfg_init = cfg_init;
  assign dpath__cfg_me_base_addr = cfg_me_base_addr;
  assign dpath__cfg_pe_base_addr = cfg_pe_base_addr;
  assign dpath__cfg_pe_line_stride = cfg_pe_line_stride;
  assign dpath__cfg_cmd = cfg_cmd;
  assign is_done = ctrl__is_done;
  assign dpath__y_cord = y_cord;
  assign mem_master__req__en = ctrl__mmaster_req_en;
  assign ctrl__mmaster_req_rdy = mem_master__req__rdy;
  assign mem_master__req__msg = dpath__mmaster_req_msg;
  assign ctrl__mem_resp_en = mem_master__resp__en;
  assign mem_master__resp__rdy = ctrl__mem_resp_rdy;
  assign dpath__mem_resp_msg = mem_master__resp__msg;
  assign cfg_out__val = ctrl__cfg_out_val;
  assign ctrl__cfg_out_rdy = cfg_out__rdy;
  assign cfg_out__msg = dpath__cfg_out_msg;
  assign dpath__cfg_reset = ctrl__cfg_reset;
  assign dpath__is_addr_incr_by_word = ctrl__is_addr_incr_by_word;
  assign dpath__is_addr_incr_by_nword = ctrl__is_addr_incr_by_nword;
  assign dpath__is_PE_init_addr = ctrl__is_PE_init_addr;
  assign dpath__start_with_ME = ctrl__start_with_ME;
  assign dpath__start_with_PE = ctrl__start_with_PE;
  assign dpath__is_cfg_sent = ctrl__is_cfg_sent;
  assign ctrl__is_ME_base_addr_zero = dpath__is_ME_base_addr_zero;
  assign ctrl__is_PE_base_addr_zero = dpath__is_PE_base_addr_zero;
  assign dpath__reg_mem_rdata_en = ctrl__reg_mem_rdata_en;

endmodule


// PyMTL Component RegEnRst Definition
// At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/registers.py

module RegEnRst__Type_32__reset_value_0
(
  input  logic [0:0] clk ,
  input  logic [0:0] en ,
  input  logic [31:0] in_ ,
  output logic [31:0] out ,
  input  logic [0:0] reset 
);
  localparam logic [0:0] __const__reset_value_at_up_regenrst  = 1'd0;

  // PyMTL Update Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/registers.py:55
  // @update_ff
  // def up_regenrst():
  //   if s.reset: s.out <<= reset_value
  //   elif s.en:  s.out <<= s.in_
  
  always_ff @(posedge clk) begin : up_regenrst
    if ( reset ) begin
      out <= 32'( __const__reset_value_at_up_regenrst );
    end
    else if ( en ) begin
      out <= in_;
    end
  end

endmodule


// PyMTL Component ValRdyNormalQueuePow2CtrlRTL Definition
// Full name: ValRdyNormalQueuePow2CtrlRTL__num_entries_2__enable_clear_False__enable_accept_False
// At /work/global/pp482/cgra/src/fifos/ValRdyNormalQueuePow2RTL.py

module ValRdyNormalQueuePow2CtrlRTL__968b201917f3e91d
(
  input  logic [0:0] clk ,
  input  logic [0:0] deq_rdy ,
  output logic [0:0] deq_val ,
  output logic [0:0] enq_rdy ,
  input  logic [0:0] enq_val ,
  output logic [0:0] is_empty ,
  output logic [0:0] raddr ,
  input  logic [0:0] reset ,
  output logic [0:0] waddr ,
  output logic [0:0] wen 
);
  logic [0:0] empty;
  logic [0:0] full;
  logic [0:0] r_ptr;
  logic [1:0] r_ptr_with_wrapbit;
  logic [0:0] w_ptr;
  logic [1:0] w_ptr_with_wrapbit;

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/fifos/ValRdyNormalQueuePow2RTL.py:100
  // @update
  // def upblk_empty():
  //   s.empty @= (s.w_ptr_with_wrapbit == s.r_ptr_with_wrapbit)
  
  always_comb begin : upblk_empty
    empty = w_ptr_with_wrapbit == r_ptr_with_wrapbit;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/fifos/ValRdyNormalQueuePow2RTL.py:96
  // @update
  // def upblk_full():
  //   s.full @= (s.w_ptr == s.r_ptr) & (s.w_ptr_with_wrapbit != s.r_ptr_with_wrapbit)
  
  always_comb begin : upblk_full
    full = ( w_ptr == r_ptr ) & ( w_ptr_with_wrapbit != r_ptr_with_wrapbit );
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/fifos/ValRdyNormalQueuePow2RTL.py:148
  // @update
  // def upblk_output():
  //   s.enq_rdy @= ~ s.full
  //   s.deq_val @= ~ s.empty
  //   s.wen     @= (s.enq_val & s.enq_rdy)
  
  always_comb begin : upblk_output
    enq_rdy = ~full;
    deq_val = ~empty;
    wen = enq_val & enq_rdy;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/fifos/ValRdyNormalQueuePow2RTL.py:133
  // @update_ff
  // def upblk_r_ptr():
  //   if s.reset:
  //     s.r_ptr_with_wrapbit <<= 0
  //   elif s.deq_val & s.deq_rdy:
  //     s.r_ptr_with_wrapbit <<= s.r_ptr_with_wrapbit + 1
  
  always_ff @(posedge clk) begin : upblk_r_ptr
    if ( reset ) begin
      r_ptr_with_wrapbit <= 2'd0;
    end
    else if ( deq_val & deq_rdy ) begin
      r_ptr_with_wrapbit <= r_ptr_with_wrapbit + 2'd1;
    end
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/fifos/ValRdyNormalQueuePow2RTL.py:126
  // @update_ff
  // def upblk_w_ptr():
  //   if s.reset:
  //     s.w_ptr_with_wrapbit <<= 0
  //   elif s.enq_val & s.enq_rdy:
  //     s.w_ptr_with_wrapbit <<= s.w_ptr_with_wrapbit + 1
  
  always_ff @(posedge clk) begin : upblk_w_ptr
    if ( reset ) begin
      w_ptr_with_wrapbit <= 2'd0;
    end
    else if ( enq_val & enq_rdy ) begin
      w_ptr_with_wrapbit <= w_ptr_with_wrapbit + 2'd1;
    end
  end

  assign w_ptr = w_ptr_with_wrapbit[0:0];
  assign r_ptr = r_ptr_with_wrapbit[0:0];
  assign waddr = w_ptr;
  assign raddr = r_ptr;
  assign is_empty = empty;

endmodule


// PyMTL Component RegisterFile Definition
// Full name: RegisterFile__Type_Bits37__nregs_2__rd_ports_1__wr_ports_1__const_zero_False
// At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/register_files.py

module RegisterFile__43b01f53f4649f85
(
  input  logic [0:0] clk ,
  input  logic [0:0] raddr [0:0],
  output logic [36:0] rdata [0:0],
  input  logic [0:0] reset ,
  input  logic [0:0] waddr [0:0],
  input  logic [36:0] wdata [0:0],
  input  logic [0:0] wen [0:0]
);
  localparam logic [0:0] __const__rd_ports_at_up_rf_read  = 1'd1;
  localparam logic [0:0] __const__wr_ports_at_up_rf_write  = 1'd1;
  logic [36:0] regs [0:1];

  // PyMTL Update Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/register_files.py:20
  // @update
  // def up_rf_read():
  //   for i in range( rd_ports ):
  //     s.rdata[i] @= s.regs[ s.raddr[i] ]
  
  always_comb begin : up_rf_read
    for ( int unsigned i = 1'd0; i < 1'( __const__rd_ports_at_up_rf_read ); i += 1'd1 )
      rdata[1'(i)] = regs[raddr[1'(i)]];
  end

  // PyMTL Update Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/register_files.py:32
  // @update_ff
  // def up_rf_write():
  //   for i in range( wr_ports ):
  //     if s.wen[i]:
  //       s.regs[ s.waddr[i] ] <<= s.wdata[i]
  
  always_ff @(posedge clk) begin : up_rf_write
    for ( int unsigned i = 1'd0; i < 1'( __const__wr_ports_at_up_rf_write ); i += 1'd1 )
      if ( wen[1'(i)] ) begin
        regs[waddr[1'(i)]] <= wdata[1'(i)];
      end
  end

endmodule


// PyMTL Component ValRdyNormalQueuePow2DpathRTL Definition
// At /work/global/pp482/cgra/src/fifos/ValRdyNormalQueuePow2RTL.py

module ValRdyNormalQueuePow2DpathRTL__EntryType_Bits37__num_entries_2
(
  input  logic [0:0] clk ,
  output logic [36:0] deq_msg ,
  input  logic [36:0] enq_msg ,
  input  logic [0:0] raddr ,
  input  logic [0:0] reset ,
  input  logic [0:0] waddr ,
  input  logic [0:0] wen 
);
  //-------------------------------------------------------------
  // Component queue
  //-------------------------------------------------------------

  logic [0:0] queue__clk;
  logic [0:0] queue__raddr [0:0];
  logic [36:0] queue__rdata [0:0];
  logic [0:0] queue__reset;
  logic [0:0] queue__waddr [0:0];
  logic [36:0] queue__wdata [0:0];
  logic [0:0] queue__wen [0:0];

  RegisterFile__43b01f53f4649f85 queue
  (
    .clk( queue__clk ),
    .raddr( queue__raddr ),
    .rdata( queue__rdata ),
    .reset( queue__reset ),
    .waddr( queue__waddr ),
    .wdata( queue__wdata ),
    .wen( queue__wen )
  );

  //-------------------------------------------------------------
  // End of component queue
  //-------------------------------------------------------------

  assign queue__clk = clk;
  assign queue__reset = reset;
  assign queue__raddr[0] = raddr;
  assign deq_msg = queue__rdata[0];
  assign queue__wen[0] = wen;
  assign queue__waddr[0] = waddr;
  assign queue__wdata[0] = enq_msg;

endmodule


// PyMTL Component ValRdyNormalQueuePow2RTL Definition
// Full name: ValRdyNormalQueuePow2RTL__EntryType_Bits37__num_entries_2__enable_clear_False__enable_accept_False
// At /work/global/pp482/cgra/src/fifos/ValRdyNormalQueuePow2RTL.py

module ValRdyNormalQueuePow2RTL__43b1a2f4e709c40c
(
  input  logic [0:0] clk ,
  output logic [0:0] is_empty ,
  input  logic [0:0] reset ,
  output logic [36:0] deq__msg  ,
  input logic [0:0] deq__rdy  ,
  output logic [0:0] deq__val  ,
  input logic [36:0] enq__msg  ,
  output logic [0:0] enq__rdy  ,
  input logic [0:0] enq__val  
);
  //-------------------------------------------------------------
  // Component ctrl
  //-------------------------------------------------------------

  logic [0:0] ctrl__clk;
  logic [0:0] ctrl__deq_rdy;
  logic [0:0] ctrl__deq_val;
  logic [0:0] ctrl__enq_rdy;
  logic [0:0] ctrl__enq_val;
  logic [0:0] ctrl__is_empty;
  logic [0:0] ctrl__raddr;
  logic [0:0] ctrl__reset;
  logic [0:0] ctrl__waddr;
  logic [0:0] ctrl__wen;

  ValRdyNormalQueuePow2CtrlRTL__968b201917f3e91d ctrl
  (
    .clk( ctrl__clk ),
    .deq_rdy( ctrl__deq_rdy ),
    .deq_val( ctrl__deq_val ),
    .enq_rdy( ctrl__enq_rdy ),
    .enq_val( ctrl__enq_val ),
    .is_empty( ctrl__is_empty ),
    .raddr( ctrl__raddr ),
    .reset( ctrl__reset ),
    .waddr( ctrl__waddr ),
    .wen( ctrl__wen )
  );

  //-------------------------------------------------------------
  // End of component ctrl
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component dpath
  //-------------------------------------------------------------

  logic [0:0] dpath__clk;
  logic [36:0] dpath__deq_msg;
  logic [36:0] dpath__enq_msg;
  logic [0:0] dpath__raddr;
  logic [0:0] dpath__reset;
  logic [0:0] dpath__waddr;
  logic [0:0] dpath__wen;

  ValRdyNormalQueuePow2DpathRTL__EntryType_Bits37__num_entries_2 dpath
  (
    .clk( dpath__clk ),
    .deq_msg( dpath__deq_msg ),
    .enq_msg( dpath__enq_msg ),
    .raddr( dpath__raddr ),
    .reset( dpath__reset ),
    .waddr( dpath__waddr ),
    .wen( dpath__wen )
  );

  //-------------------------------------------------------------
  // End of component dpath
  //-------------------------------------------------------------

  assign ctrl__clk = clk;
  assign ctrl__reset = reset;
  assign dpath__clk = clk;
  assign dpath__reset = reset;
  assign dpath__wen = ctrl__wen;
  assign dpath__waddr = ctrl__waddr;
  assign dpath__raddr = ctrl__raddr;
  assign ctrl__enq_val = enq__val;
  assign enq__rdy = ctrl__enq_rdy;
  assign deq__val = ctrl__deq_val;
  assign ctrl__deq_rdy = deq__rdy;
  assign dpath__enq_msg = enq__msg;
  assign deq__msg = dpath__deq_msg;
  assign is_empty = ctrl__is_empty;

endmodule


// PyMTL Component MemEngineCtrl Definition
// Full name: MemEngineCtrl__xcel_params_CGRAParams: base_addr_bound:16384, base_addr_register:0, base_addr_scratchpad:256, cfg_nwords:1, cfg_type:<class 'pymtl3.datatypes.bits_import.Bits32'>, data_width:32, enable_FP:True, me_cfg_type:<class 'types.MEConfigMsg_8x8'>, mul_cycles:0, ncols:8, nrows:8, nspads:4, num_remote_masters:4, pe_cfg_type:<class 'types.PEConfigMsg_8x8'>, remote_master_addr_width:28, remote_master_data_width_factor:1, rf_nregs:2, spad_data_width:32, spad_mask_size:0, spad_num_entries:1024, trace_verbosity:0
// At /work/global/pp482/cgra/src/cgra/MemEngineCtrl.py

module MemEngineCtrl__e7b85fc84228c577
(
  output logic [0:0] cfg_deq_rdy ,
  input  logic [0:0] cfg_deq_val ,
  input  logic [0:0] cfg_out_rdy ,
  output logic [0:0] cfg_out_val ,
  input  logic [0:0] clk ,
  input  logic [0:0] count_zero ,
  output logic [0:0] deq_rdy ,
  input  logic [0:0] deq_val ,
  input  logic [0:0] is_calc ,
  input  logic [0:0] is_cfg_target_self ,
  input  logic [0:0] is_cfg_write ,
  output logic [0:0] is_done ,
  input  logic [0:0] is_out_credit_zero ,
  output logic [0:0] mem_deq_en ,
  input  logic [0:0] mem_deq_rdy ,
  output logic [0:0] mem_req_en ,
  input  logic [0:0] mem_req_rdy ,
  input  logic [0:0] no_pending_responses ,
  input  logic [0:0] out_rdy ,
  output logic [0:0] out_val ,
  output logic [0:0] req_sent ,
  input  logic [0:0] reset ,
  output logic [0:0] resp_recved ,
  output logic [0:0] self_cfg_deq 
);

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/MemEngineCtrl.py:60
  // s.cfg_deq_rdy //= lambda: s.self_cfg_deq | s.cfg_out_rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_ME_0__ctrl_cfg_deq_rdy
    cfg_deq_rdy = self_cfg_deq | cfg_out_rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/MemEngineCtrl.py:62
  // s.cfg_out_val //= lambda: ~s.is_cfg_target_self & s.cfg_deq_val
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_ME_0__ctrl_cfg_out_val
    cfg_out_val = ( ~is_cfg_target_self ) & cfg_deq_val;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/MemEngineCtrl.py:56
  // s.deq_rdy //= lambda: s.is_cfg_write & s.mem_req_rdy & ~s.is_out_credit_zero & s.is_calc
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_ME_0__ctrl_deq_rdy
    deq_rdy = ( ( is_cfg_write & mem_req_rdy ) & ( ~is_out_credit_zero ) ) & is_calc;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/MemEngineCtrl.py:74
  // s.is_done //= lambda: s.is_calc & s.no_pending_responses
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_ME_0__ctrl_is_done
    is_done = is_calc & no_pending_responses;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/MemEngineCtrl.py:54
  // s.mem_deq_en //= lambda: s.out_rdy & s.mem_deq_rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_ME_0__ctrl_mem_deq_en
    mem_deq_en = out_rdy & mem_deq_rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/MemEngineCtrl.py:52
  // s.mem_req_en //= lambda: ( (s.is_cfg_write & s.deq_val) | ~s.is_cfg_write ) & ~s.count_zero & ~s.is_out_credit_zero & s.mem_req_rdy & s.is_calc
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_ME_0__ctrl_mem_req_en
    mem_req_en = ( ( ( ( ( is_cfg_write & deq_val ) | ( ~is_cfg_write ) ) & ( ~count_zero ) ) & ( ~is_out_credit_zero ) ) & mem_req_rdy ) & is_calc;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/MemEngineCtrl.py:58
  // s.out_val //= lambda: ~s.is_cfg_write & s.mem_deq_rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_ME_0__ctrl_out_val
    out_val = ( ~is_cfg_write ) & mem_deq_rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/MemEngineCtrl.py:70
  // s.req_sent //= lambda: s.mem_req_en
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_ME_0__ctrl_req_sent
    req_sent = mem_req_en;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/MemEngineCtrl.py:72
  // s.resp_recved //= lambda: s.mem_deq_en
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_ME_0__ctrl_resp_recved
    resp_recved = mem_deq_en;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/MemEngineCtrl.py:68
  // s.self_cfg_deq //= lambda: s.is_cfg_target_self & s.cfg_deq_val
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_ME_0__ctrl_self_cfg_deq
    self_cfg_deq = is_cfg_target_self & cfg_deq_val;
  end

endmodule


// PyMTL Component MemEngineDpath Definition
// Full name: MemEngineDpath__xcel_params_CGRAParams: base_addr_bound:16384, base_addr_register:0, base_addr_scratchpad:256, cfg_nwords:1, cfg_type:<class 'pymtl3.datatypes.bits_import.Bits32'>, data_width:32, enable_FP:True, me_cfg_type:<class 'types.MEConfigMsg_8x8'>, mul_cycles:0, ncols:8, nrows:8, nspads:4, num_remote_masters:4, pe_cfg_type:<class 'types.PEConfigMsg_8x8'>, remote_master_addr_width:28, remote_master_data_width_factor:1, rf_nregs:2, spad_data_width:32, spad_mask_size:0, spad_num_entries:1024, trace_verbosity:0
// At /work/global/pp482/cgra/src/cgra/MemEngineDpath.py

module MemEngineDpath__e7b85fc84228c577
(
  input  logic [36:0] cfg_deq_msg ,
  output logic [36:0] cfg_out_msg ,
  input  logic [0:0] clk ,
  output logic [0:0] count_zero ,
  input  logic [31:0] deq_msg ,
  input  logic [3:0] id_cord ,
  output logic [0:0] is_cfg_target_self ,
  output logic [0:0] is_cfg_write ,
  output logic [0:0] is_out_credit_zero ,
  input  CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 mem_deq_ret ,
  output CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 mem_req_msg ,
  output logic [0:0] no_pending_responses ,
  output logic [31:0] out_msg ,
  input  logic [0:0] req_sent ,
  input  logic [0:0] reset ,
  input  logic [0:0] resp_recved ,
  input  logic [0:0] self_cfg_deq ,
  input  logic [3:0] x_cord 
);
  logic [13:0] cfg_addr;
  logic [13:0] cfg_count;
  logic [13:0] cfg_incr_addr;
  logic [0:0] cfg_wen;
  MEConfigMsg_8x8__wen_1__base_addr_14__incr_addr_8__count_9 cfg_with_fields;
  MEConfigMsg_8x8__wen_1__base_addr_14__incr_addr_8__count_9 cfg_with_fields_r;
  logic [3:0] cfg_x_cord;
  logic [0:0] is_reload_cmd;
  logic [13:0] next_cfg_addr;
  logic [13:0] next_cfg_count;
  logic [13:0] next_cfg_incr_addr;
  logic [0:0] next_cfg_wen;
  logic [13:0] next_pending_response;
  logic [2:0] out_credit;
  logic [13:0] pending_response;

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/MemEngineDpath.py:125
  // @update
  // def ME_next_cfg_addr():
  //   s.next_cfg_addr @= s.cfg_addr
  //   if s.self_cfg_deq:
  //     if ~s.is_reload_cmd:
  //       s.next_cfg_addr @= s.cfg_with_fields.base_addr
  //     else:
  //       s.next_cfg_addr @= s.cfg_deq_msg[0:p.addr_width]
  //   elif s.req_sent:
  //     s.next_cfg_addr @= s.cfg_addr + s.cfg_incr_addr
  
  always_comb begin : ME_next_cfg_addr
    next_cfg_addr = cfg_addr;
    if ( self_cfg_deq ) begin
      if ( ~is_reload_cmd ) begin
        next_cfg_addr = cfg_with_fields.base_addr;
      end
      else
        next_cfg_addr = cfg_deq_msg[6'd13:6'd0];
    end
    else if ( req_sent ) begin
      next_cfg_addr = cfg_addr + cfg_incr_addr;
    end
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/MemEngineDpath.py:138
  // @update
  // def ME_next_cfg_count():
  //   s.next_cfg_count @= s.cfg_count
  //   if s.self_cfg_deq:
  //     if ~s.is_reload_cmd:
  //       s.next_cfg_count @= zext( s.cfg_with_fields.count, p.addr_width )
  //     else:
  //       s.next_cfg_count @= zext( s.cfg_with_fields_r.count, p.addr_width )
  //   elif s.req_sent:
  //     s.next_cfg_count @= s.cfg_count - 1
  
  always_comb begin : ME_next_cfg_count
    next_cfg_count = cfg_count;
    if ( self_cfg_deq ) begin
      if ( ~is_reload_cmd ) begin
        next_cfg_count = { { 5 { 1'b0 } }, cfg_with_fields.count };
      end
      else
        next_cfg_count = { { 5 { 1'b0 } }, cfg_with_fields_r.count };
    end
    else if ( req_sent ) begin
      next_cfg_count = cfg_count - 14'd1;
    end
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/MemEngineDpath.py:114
  // @update
  // def ME_next_cfg_incr_addr():
  //   s.next_cfg_incr_addr @= s.cfg_incr_addr
  //   if s.self_cfg_deq:
  //     if ~s.is_reload_cmd:
  //       s.next_cfg_incr_addr @= zext( s.cfg_with_fields.incr_addr, p.addr_width )
  //     else:
  //       s.next_cfg_incr_addr @= zext( s.cfg_with_fields_r.incr_addr, p.addr_width )
  
  always_comb begin : ME_next_cfg_incr_addr
    next_cfg_incr_addr = cfg_incr_addr;
    if ( self_cfg_deq ) begin
      if ( ~is_reload_cmd ) begin
        next_cfg_incr_addr = { { 6 { 1'b0 } }, cfg_with_fields.incr_addr };
      end
      else
        next_cfg_incr_addr = { { 6 { 1'b0 } }, cfg_with_fields_r.incr_addr };
    end
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/MemEngineDpath.py:103
  // @update
  // def ME_next_cfg_wen():
  //   s.next_cfg_wen @= s.cfg_wen
  //   if s.self_cfg_deq:
  //     if ~s.is_reload_cmd:
  //       s.next_cfg_wen @= s.cfg_with_fields.wen
  //     else:
  //       s.next_cfg_wen @= s.cfg_with_fields_r.wen
  
  always_comb begin : ME_next_cfg_wen
    next_cfg_wen = cfg_wen;
    if ( self_cfg_deq ) begin
      if ( ~is_reload_cmd ) begin
        next_cfg_wen = cfg_with_fields.wen;
      end
      else
        next_cfg_wen = cfg_with_fields_r.wen;
    end
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/MemEngineDpath.py:151
  // @update
  // def ME_next_pending_response():
  //   s.next_pending_response @= s.pending_response
  //   if s.self_cfg_deq:
  //     if ~s.is_reload_cmd:
  //       s.next_pending_response @= zext( s.cfg_with_fields.count, p.addr_width )
  //     else:
  //       s.next_pending_response @= zext( s.cfg_with_fields_r.count, p.addr_width )
  //   elif s.resp_recved:
  //     s.next_pending_response @= s.pending_response - 1
  
  always_comb begin : ME_next_pending_response
    next_pending_response = pending_response;
    if ( self_cfg_deq ) begin
      if ( ~is_reload_cmd ) begin
        next_pending_response = { { 5 { 1'b0 } }, cfg_with_fields.count };
      end
      else
        next_pending_response = { { 5 { 1'b0 } }, cfg_with_fields_r.count };
    end
    else if ( resp_recved ) begin
      next_pending_response = pending_response - 14'd1;
    end
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/MemEngineDpath.py:187
  // s.cfg_out_msg //= lambda: s.cfg_deq_msg
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_ME_0__dpath_cfg_out_msg
    cfg_out_msg = cfg_deq_msg;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/MemEngineDpath.py:193
  // s.count_zero //= lambda: s.cfg_count == 0
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_ME_0__dpath_count_zero
    count_zero = cfg_count == 14'd0;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/MemEngineDpath.py:199
  // s.is_cfg_target_self //= lambda: s.cfg_x_cord == s.x_cord
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_ME_0__dpath_is_cfg_target_self
    is_cfg_target_self = cfg_x_cord == x_cord;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/MemEngineDpath.py:197
  // s.is_cfg_write //= lambda: s.cfg_wen
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_ME_0__dpath_is_cfg_write
    is_cfg_write = cfg_wen;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/MemEngineDpath.py:203
  // s.is_out_credit_zero //= lambda: s.out_credit == 0
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_ME_0__dpath_is_out_credit_zero
    is_out_credit_zero = out_credit == 3'd0;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/MemEngineDpath.py:201
  // s.is_reload_cmd //= lambda: s.cfg_deq_msg[p.cfg_width:p.cfg_width+p.cfg_cmd_width] == 1
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_ME_0__dpath_is_reload_cmd
    is_reload_cmd = cfg_deq_msg[6'd32:6'd32] == 1'd1;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/MemEngineDpath.py:183
  // s.mem_req_msg.opaque //= lambda: zext( s.id_cord, p.opaque_width )
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_ME_0__dpath_mem_req_msg_opaque
    mem_req_msg.opaque = { { 3 { 1'b0 } }, id_cord };
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/MemEngineDpath.py:195
  // s.no_pending_responses //= lambda: s.pending_response == 0
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_ME_0__dpath_no_pending_responses
    no_pending_responses = pending_response == 14'd0;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/MemEngineDpath.py:58
  // @update_ff
  // def ME_cfg_w_field_reg():
  //   if s.reset:
  //     s.cfg_with_fields_r <<= p.me_cfg_type()
  //   else:
  //     if s.self_cfg_deq & ~s.is_reload_cmd:
  //       s.cfg_with_fields_r <<= s.cfg_with_fields
  
  always_ff @(posedge clk) begin : ME_cfg_w_field_reg
    if ( reset ) begin
      cfg_with_fields_r <= { 1'd0, 14'd0, 8'd0, 9'd0 };
    end
    else if ( self_cfg_deq & ( ~is_reload_cmd ) ) begin
      cfg_with_fields_r <= cfg_with_fields;
    end
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/MemEngineDpath.py:166
  // @update_ff
  // def ME_outward_credit_reg():
  //   if s.reset:
  //     s.out_credit <<= p.me_buffer_size
  //   else:
  //     if s.req_sent & ~s.resp_recved:
  //       s.out_credit <<= s.out_credit-1
  //     if ~s.req_sent & s.resp_recved:
  //       s.out_credit <<= s.out_credit+1
  
  always_ff @(posedge clk) begin : ME_outward_credit_reg
    if ( reset ) begin
      out_credit <= 3'd4;
    end
    else begin
      if ( req_sent & ( ~resp_recved ) ) begin
        out_credit <= out_credit - 3'd1;
      end
      if ( ( ~req_sent ) & resp_recved ) begin
        out_credit <= out_credit + 3'd1;
      end
    end
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/MemEngineDpath.py:86
  // @update_ff
  // def ME_regsiters():
  //   if s.reset:
  //     s.cfg_wen <<= 0
  //     s.cfg_incr_addr <<= 0
  //     s.cfg_addr <<= 0
  //     s.cfg_count <<= 0
  //     s.pending_response <<= 0
  //   else:
  //     s.cfg_wen <<= s.next_cfg_wen
  //     s.cfg_incr_addr <<= s.next_cfg_incr_addr
  //     s.cfg_addr <<= s.next_cfg_addr
  //     s.cfg_count <<= s.next_cfg_count
  //     s.pending_response <<= s.next_pending_response
  
  always_ff @(posedge clk) begin : ME_regsiters
    if ( reset ) begin
      cfg_wen <= 1'd0;
      cfg_incr_addr <= 14'd0;
      cfg_addr <= 14'd0;
      cfg_count <= 14'd0;
      pending_response <= 14'd0;
    end
    else begin
      cfg_wen <= next_cfg_wen;
      cfg_incr_addr <= next_cfg_incr_addr;
      cfg_addr <= next_cfg_addr;
      cfg_count <= next_cfg_count;
      pending_response <= next_pending_response;
    end
  end

  assign cfg_with_fields.count = cfg_deq_msg[8:0];
  assign cfg_with_fields.incr_addr = cfg_deq_msg[16:9];
  assign cfg_with_fields.base_addr = cfg_deq_msg[30:17];
  assign cfg_with_fields.wen = cfg_deq_msg[31:31];
  assign cfg_x_cord = cfg_deq_msg[36:33];
  assign mem_req_msg.wen = cfg_wen;
  assign mem_req_msg.addr = cfg_addr;
  assign mem_req_msg.data = deq_msg;
  assign out_msg = mem_deq_ret.data;

endmodule


// PyMTL Component RegisterFile Definition
// Full name: RegisterFile__Type_Bits32__nregs_2__rd_ports_1__wr_ports_1__const_zero_False
// At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/register_files.py

module RegisterFile__3a42a011005ae1af
(
  input  logic [0:0] clk ,
  input  logic [0:0] raddr [0:0],
  output logic [31:0] rdata [0:0],
  input  logic [0:0] reset ,
  input  logic [0:0] waddr [0:0],
  input  logic [31:0] wdata [0:0],
  input  logic [0:0] wen [0:0]
);
  localparam logic [0:0] __const__rd_ports_at_up_rf_read  = 1'd1;
  localparam logic [0:0] __const__wr_ports_at_up_rf_write  = 1'd1;
  logic [31:0] regs [0:1];

  // PyMTL Update Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/register_files.py:20
  // @update
  // def up_rf_read():
  //   for i in range( rd_ports ):
  //     s.rdata[i] @= s.regs[ s.raddr[i] ]
  
  always_comb begin : up_rf_read
    for ( int unsigned i = 1'd0; i < 1'( __const__rd_ports_at_up_rf_read ); i += 1'd1 )
      rdata[1'(i)] = regs[raddr[1'(i)]];
  end

  // PyMTL Update Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/register_files.py:32
  // @update_ff
  // def up_rf_write():
  //   for i in range( wr_ports ):
  //     if s.wen[i]:
  //       s.regs[ s.waddr[i] ] <<= s.wdata[i]
  
  always_ff @(posedge clk) begin : up_rf_write
    for ( int unsigned i = 1'd0; i < 1'( __const__wr_ports_at_up_rf_write ); i += 1'd1 )
      if ( wen[1'(i)] ) begin
        regs[waddr[1'(i)]] <= wdata[1'(i)];
      end
  end

endmodule


// PyMTL Component ValRdyNormalQueuePow2DpathRTL Definition
// At /work/global/pp482/cgra/src/fifos/ValRdyNormalQueuePow2RTL.py

module ValRdyNormalQueuePow2DpathRTL__EntryType_Bits32__num_entries_2
(
  input  logic [0:0] clk ,
  output logic [31:0] deq_msg ,
  input  logic [31:0] enq_msg ,
  input  logic [0:0] raddr ,
  input  logic [0:0] reset ,
  input  logic [0:0] waddr ,
  input  logic [0:0] wen 
);
  //-------------------------------------------------------------
  // Component queue
  //-------------------------------------------------------------

  logic [0:0] queue__clk;
  logic [0:0] queue__raddr [0:0];
  logic [31:0] queue__rdata [0:0];
  logic [0:0] queue__reset;
  logic [0:0] queue__waddr [0:0];
  logic [31:0] queue__wdata [0:0];
  logic [0:0] queue__wen [0:0];

  RegisterFile__3a42a011005ae1af queue
  (
    .clk( queue__clk ),
    .raddr( queue__raddr ),
    .rdata( queue__rdata ),
    .reset( queue__reset ),
    .waddr( queue__waddr ),
    .wdata( queue__wdata ),
    .wen( queue__wen )
  );

  //-------------------------------------------------------------
  // End of component queue
  //-------------------------------------------------------------

  assign queue__clk = clk;
  assign queue__reset = reset;
  assign queue__raddr[0] = raddr;
  assign deq_msg = queue__rdata[0];
  assign queue__wen[0] = wen;
  assign queue__waddr[0] = waddr;
  assign queue__wdata[0] = enq_msg;

endmodule


// PyMTL Component ValRdyNormalQueuePow2RTL Definition
// Full name: ValRdyNormalQueuePow2RTL__EntryType_Bits32__num_entries_2__enable_clear_False__enable_accept_False
// At /work/global/pp482/cgra/src/fifos/ValRdyNormalQueuePow2RTL.py

module ValRdyNormalQueuePow2RTL__67ce5f09ba36faec
(
  input  logic [0:0] clk ,
  output logic [0:0] is_empty ,
  input  logic [0:0] reset ,
  output logic [31:0] deq__msg  ,
  input logic [0:0] deq__rdy  ,
  output logic [0:0] deq__val  ,
  input logic [31:0] enq__msg  ,
  output logic [0:0] enq__rdy  ,
  input logic [0:0] enq__val  
);
  //-------------------------------------------------------------
  // Component ctrl
  //-------------------------------------------------------------

  logic [0:0] ctrl__clk;
  logic [0:0] ctrl__deq_rdy;
  logic [0:0] ctrl__deq_val;
  logic [0:0] ctrl__enq_rdy;
  logic [0:0] ctrl__enq_val;
  logic [0:0] ctrl__is_empty;
  logic [0:0] ctrl__raddr;
  logic [0:0] ctrl__reset;
  logic [0:0] ctrl__waddr;
  logic [0:0] ctrl__wen;

  ValRdyNormalQueuePow2CtrlRTL__968b201917f3e91d ctrl
  (
    .clk( ctrl__clk ),
    .deq_rdy( ctrl__deq_rdy ),
    .deq_val( ctrl__deq_val ),
    .enq_rdy( ctrl__enq_rdy ),
    .enq_val( ctrl__enq_val ),
    .is_empty( ctrl__is_empty ),
    .raddr( ctrl__raddr ),
    .reset( ctrl__reset ),
    .waddr( ctrl__waddr ),
    .wen( ctrl__wen )
  );

  //-------------------------------------------------------------
  // End of component ctrl
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component dpath
  //-------------------------------------------------------------

  logic [0:0] dpath__clk;
  logic [31:0] dpath__deq_msg;
  logic [31:0] dpath__enq_msg;
  logic [0:0] dpath__raddr;
  logic [0:0] dpath__reset;
  logic [0:0] dpath__waddr;
  logic [0:0] dpath__wen;

  ValRdyNormalQueuePow2DpathRTL__EntryType_Bits32__num_entries_2 dpath
  (
    .clk( dpath__clk ),
    .deq_msg( dpath__deq_msg ),
    .enq_msg( dpath__enq_msg ),
    .raddr( dpath__raddr ),
    .reset( dpath__reset ),
    .waddr( dpath__waddr ),
    .wen( dpath__wen )
  );

  //-------------------------------------------------------------
  // End of component dpath
  //-------------------------------------------------------------

  assign ctrl__clk = clk;
  assign ctrl__reset = reset;
  assign dpath__clk = clk;
  assign dpath__reset = reset;
  assign dpath__wen = ctrl__wen;
  assign dpath__waddr = ctrl__waddr;
  assign dpath__raddr = ctrl__raddr;
  assign ctrl__enq_val = enq__val;
  assign enq__rdy = ctrl__enq_rdy;
  assign deq__val = ctrl__deq_val;
  assign ctrl__deq_rdy = deq__rdy;
  assign dpath__enq_msg = enq__msg;
  assign deq__msg = dpath__deq_msg;
  assign is_empty = ctrl__is_empty;

endmodule


// PyMTL Component NormalQueuePow2CtrlRTL Definition
// At /work/global/pp482/cgra/src/fifos/NormalQueuePow2RTL.py

module NormalQueuePow2CtrlRTL__num_entries_4
(
  input  logic [0:0] clk ,
  input  logic [0:0] deq_en ,
  output logic [0:0] deq_rdy ,
  input  logic [0:0] enq_en ,
  output logic [0:0] enq_rdy ,
  output logic [1:0] raddr ,
  input  logic [0:0] reset ,
  output logic [1:0] waddr ,
  output logic [0:0] wen 
);
  logic [0:0] empty;
  logic [0:0] full;
  logic [1:0] r_ptr;
  logic [2:0] r_ptr_with_wrapbit;
  logic [1:0] w_ptr;
  logic [2:0] w_ptr_with_wrapbit;

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/fifos/NormalQueuePow2RTL.py:99
  // @update
  // def upblk_empty():
  //   s.empty @= (s.w_ptr_with_wrapbit == s.r_ptr_with_wrapbit)
  
  always_comb begin : upblk_empty
    empty = w_ptr_with_wrapbit == r_ptr_with_wrapbit;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/fifos/NormalQueuePow2RTL.py:95
  // @update
  // def upblk_full():
  //   s.full @= (s.w_ptr == s.r_ptr) & (s.w_ptr_with_wrapbit != s.r_ptr_with_wrapbit)
  
  always_comb begin : upblk_full
    full = ( w_ptr == r_ptr ) & ( w_ptr_with_wrapbit != r_ptr_with_wrapbit );
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/fifos/NormalQueuePow2RTL.py:103
  // @update
  // def upblk_output():
  //   s.enq_rdy @= ~ s.full
  //   s.deq_rdy @= ~ s.empty
  //   s.wen     @= (s.enq_en & s.enq_rdy)
  
  always_comb begin : upblk_output
    enq_rdy = ~full;
    deq_rdy = ~empty;
    wen = enq_en & enq_rdy;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/fifos/NormalQueuePow2RTL.py:88
  // @update_ff
  // def upblk_r_ptr():
  //   if s.reset:
  //     s.r_ptr_with_wrapbit <<= 0
  //   elif s.deq_en & s.deq_rdy:
  //     s.r_ptr_with_wrapbit <<= s.r_ptr_with_wrapbit + 1
  
  always_ff @(posedge clk) begin : upblk_r_ptr
    if ( reset ) begin
      r_ptr_with_wrapbit <= 3'd0;
    end
    else if ( deq_en & deq_rdy ) begin
      r_ptr_with_wrapbit <= r_ptr_with_wrapbit + 3'd1;
    end
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/fifos/NormalQueuePow2RTL.py:81
  // @update_ff
  // def upblk_w_ptr():
  //   if s.reset:
  //     s.w_ptr_with_wrapbit <<= 0
  //   elif s.enq_en & s.enq_rdy:
  //     s.w_ptr_with_wrapbit <<= s.w_ptr_with_wrapbit + 1
  
  always_ff @(posedge clk) begin : upblk_w_ptr
    if ( reset ) begin
      w_ptr_with_wrapbit <= 3'd0;
    end
    else if ( enq_en & enq_rdy ) begin
      w_ptr_with_wrapbit <= w_ptr_with_wrapbit + 3'd1;
    end
  end

  assign w_ptr = w_ptr_with_wrapbit[1:0];
  assign r_ptr = r_ptr_with_wrapbit[1:0];
  assign waddr = w_ptr;
  assign raddr = r_ptr;

endmodule


// PyMTL Component RegisterFile Definition
// Full name: RegisterFile__Type_CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7__nregs_4__rd_ports_1__wr_ports_1__const_zero_False
// At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/register_files.py

module RegisterFile__83b02741e3660ddc
(
  input  logic [0:0] clk ,
  input  logic [1:0] raddr [0:0],
  output CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 rdata [0:0],
  input  logic [0:0] reset ,
  input  logic [1:0] waddr [0:0],
  input  CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 wdata [0:0],
  input  logic [0:0] wen [0:0]
);
  localparam logic [0:0] __const__rd_ports_at_up_rf_read  = 1'd1;
  localparam logic [0:0] __const__wr_ports_at_up_rf_write  = 1'd1;
  CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 regs [0:3];

  // PyMTL Update Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/register_files.py:20
  // @update
  // def up_rf_read():
  //   for i in range( rd_ports ):
  //     s.rdata[i] @= s.regs[ s.raddr[i] ]
  
  always_comb begin : up_rf_read
    for ( int unsigned i = 1'd0; i < 1'( __const__rd_ports_at_up_rf_read ); i += 1'd1 )
      rdata[1'(i)] = regs[raddr[1'(i)]];
  end

  // PyMTL Update Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/register_files.py:32
  // @update_ff
  // def up_rf_write():
  //   for i in range( wr_ports ):
  //     if s.wen[i]:
  //       s.regs[ s.waddr[i] ] <<= s.wdata[i]
  
  always_ff @(posedge clk) begin : up_rf_write
    for ( int unsigned i = 1'd0; i < 1'( __const__wr_ports_at_up_rf_write ); i += 1'd1 )
      if ( wen[1'(i)] ) begin
        regs[waddr[1'(i)]] <= wdata[1'(i)];
      end
  end

endmodule


// PyMTL Component NormalQueuePow2DpathRTL Definition
// Full name: NormalQueuePow2DpathRTL__EntryType_CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7__num_entries_4
// At /work/global/pp482/cgra/src/fifos/NormalQueuePow2RTL.py

module NormalQueuePow2DpathRTL__9291fbbb47766962
(
  input  logic [0:0] clk ,
  output CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 deq_msg ,
  input  CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 enq_msg ,
  input  logic [1:0] raddr ,
  input  logic [0:0] reset ,
  input  logic [1:0] waddr ,
  input  logic [0:0] wen 
);
  //-------------------------------------------------------------
  // Component queue
  //-------------------------------------------------------------

  logic [0:0] queue__clk;
  logic [1:0] queue__raddr [0:0];
  CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 queue__rdata [0:0];
  logic [0:0] queue__reset;
  logic [1:0] queue__waddr [0:0];
  CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 queue__wdata [0:0];
  logic [0:0] queue__wen [0:0];

  RegisterFile__83b02741e3660ddc queue
  (
    .clk( queue__clk ),
    .raddr( queue__raddr ),
    .rdata( queue__rdata ),
    .reset( queue__reset ),
    .waddr( queue__waddr ),
    .wdata( queue__wdata ),
    .wen( queue__wen )
  );

  //-------------------------------------------------------------
  // End of component queue
  //-------------------------------------------------------------

  assign queue__clk = clk;
  assign queue__reset = reset;
  assign queue__raddr[0] = raddr;
  assign deq_msg = queue__rdata[0];
  assign queue__wen[0] = wen;
  assign queue__waddr[0] = waddr;
  assign queue__wdata[0] = enq_msg;

endmodule


// PyMTL Component NormalQueuePow2RTL Definition
// Full name: NormalQueuePow2RTL__EntryType_CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7__num_entries_4
// At /work/global/pp482/cgra/src/fifos/NormalQueuePow2RTL.py

module NormalQueuePow2RTL__9291fbbb47766962
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  input logic [0:0] deq__en  ,
  output logic [0:0] deq__rdy  ,
  output CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 deq__ret  ,
  input logic [0:0] enq__en  ,
  input CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 enq__msg  ,
  output logic [0:0] enq__rdy  
);
  //-------------------------------------------------------------
  // Component ctrl
  //-------------------------------------------------------------

  logic [0:0] ctrl__clk;
  logic [0:0] ctrl__deq_en;
  logic [0:0] ctrl__deq_rdy;
  logic [0:0] ctrl__enq_en;
  logic [0:0] ctrl__enq_rdy;
  logic [1:0] ctrl__raddr;
  logic [0:0] ctrl__reset;
  logic [1:0] ctrl__waddr;
  logic [0:0] ctrl__wen;

  NormalQueuePow2CtrlRTL__num_entries_4 ctrl
  (
    .clk( ctrl__clk ),
    .deq_en( ctrl__deq_en ),
    .deq_rdy( ctrl__deq_rdy ),
    .enq_en( ctrl__enq_en ),
    .enq_rdy( ctrl__enq_rdy ),
    .raddr( ctrl__raddr ),
    .reset( ctrl__reset ),
    .waddr( ctrl__waddr ),
    .wen( ctrl__wen )
  );

  //-------------------------------------------------------------
  // End of component ctrl
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component dpath
  //-------------------------------------------------------------

  logic [0:0] dpath__clk;
  CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 dpath__deq_msg;
  CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 dpath__enq_msg;
  logic [1:0] dpath__raddr;
  logic [0:0] dpath__reset;
  logic [1:0] dpath__waddr;
  logic [0:0] dpath__wen;

  NormalQueuePow2DpathRTL__9291fbbb47766962 dpath
  (
    .clk( dpath__clk ),
    .deq_msg( dpath__deq_msg ),
    .enq_msg( dpath__enq_msg ),
    .raddr( dpath__raddr ),
    .reset( dpath__reset ),
    .waddr( dpath__waddr ),
    .wen( dpath__wen )
  );

  //-------------------------------------------------------------
  // End of component dpath
  //-------------------------------------------------------------

  assign ctrl__clk = clk;
  assign ctrl__reset = reset;
  assign dpath__clk = clk;
  assign dpath__reset = reset;
  assign dpath__wen = ctrl__wen;
  assign dpath__waddr = ctrl__waddr;
  assign dpath__raddr = ctrl__raddr;
  assign ctrl__enq_en = enq__en;
  assign enq__rdy = ctrl__enq_rdy;
  assign ctrl__deq_en = deq__en;
  assign deq__rdy = ctrl__deq_rdy;
  assign dpath__enq_msg = enq__msg;
  assign deq__ret = dpath__deq_msg;

endmodule


// PyMTL Component MemEngine Definition
// Full name: MemEngine__xcel_params_CGRAParams: base_addr_bound:16384, base_addr_register:0, base_addr_scratchpad:256, cfg_nwords:1, cfg_type:<class 'pymtl3.datatypes.bits_import.Bits32'>, data_width:32, enable_FP:True, me_cfg_type:<class 'types.MEConfigMsg_8x8'>, mul_cycles:0, ncols:8, nrows:8, nspads:4, num_remote_masters:4, pe_cfg_type:<class 'types.PEConfigMsg_8x8'>, remote_master_addr_width:28, remote_master_data_width_factor:1, rf_nregs:2, spad_data_width:32, spad_mask_size:0, spad_num_entries:1024, trace_verbosity:0
// At /work/global/pp482/cgra/src/cgra/MemEngine.py

module MemEngine__e7b85fc84228c577
(
  input  logic [0:0] clk ,
  input  logic [3:0] id_cord ,
  input  logic [0:0] is_calc ,
  output logic [0:0] is_done ,
  input  logic [0:0] reset ,
  input  logic [3:0] x_cord ,
  input logic [36:0] cfg_in__msg  ,
  output logic [0:0] cfg_in__rdy  ,
  input logic [0:0] cfg_in__val  ,
  output logic [36:0] cfg_out__msg  ,
  input logic [0:0] cfg_out__rdy  ,
  output logic [0:0] cfg_out__val  ,
  input logic [31:0] in___msg  ,
  output logic [0:0] in___rdy  ,
  input logic [0:0] in___val  ,
  output logic [0:0] mem_ifc__req__en ,
  output CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 mem_ifc__req__msg ,
  input logic [0:0] mem_ifc__req__rdy ,
  input logic [0:0] mem_ifc__resp__en ,
  input CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 mem_ifc__resp__msg ,
  output logic [0:0] mem_ifc__resp__rdy ,
  output logic [31:0] out__msg  ,
  input logic [0:0] out__rdy  ,
  output logic [0:0] out__val  
);
  //-------------------------------------------------------------
  // Component cfg_q
  //-------------------------------------------------------------

  logic [0:0] cfg_q__clk;
  logic [0:0] cfg_q__is_empty;
  logic [0:0] cfg_q__reset;
  logic [36:0] cfg_q__deq__msg;
  logic [0:0] cfg_q__deq__rdy;
  logic [0:0] cfg_q__deq__val;
  logic [36:0] cfg_q__enq__msg;
  logic [0:0] cfg_q__enq__rdy;
  logic [0:0] cfg_q__enq__val;

  ValRdyNormalQueuePow2RTL__43b1a2f4e709c40c cfg_q
  (
    .clk( cfg_q__clk ),
    .is_empty( cfg_q__is_empty ),
    .reset( cfg_q__reset ),
    .deq__msg( cfg_q__deq__msg ),
    .deq__rdy( cfg_q__deq__rdy ),
    .deq__val( cfg_q__deq__val ),
    .enq__msg( cfg_q__enq__msg ),
    .enq__rdy( cfg_q__enq__rdy ),
    .enq__val( cfg_q__enq__val )
  );

  //-------------------------------------------------------------
  // End of component cfg_q
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ctrl
  //-------------------------------------------------------------

  logic [0:0] ctrl__cfg_deq_rdy;
  logic [0:0] ctrl__cfg_deq_val;
  logic [0:0] ctrl__cfg_out_rdy;
  logic [0:0] ctrl__cfg_out_val;
  logic [0:0] ctrl__clk;
  logic [0:0] ctrl__count_zero;
  logic [0:0] ctrl__deq_rdy;
  logic [0:0] ctrl__deq_val;
  logic [0:0] ctrl__is_calc;
  logic [0:0] ctrl__is_cfg_target_self;
  logic [0:0] ctrl__is_cfg_write;
  logic [0:0] ctrl__is_done;
  logic [0:0] ctrl__is_out_credit_zero;
  logic [0:0] ctrl__mem_deq_en;
  logic [0:0] ctrl__mem_deq_rdy;
  logic [0:0] ctrl__mem_req_en;
  logic [0:0] ctrl__mem_req_rdy;
  logic [0:0] ctrl__no_pending_responses;
  logic [0:0] ctrl__out_rdy;
  logic [0:0] ctrl__out_val;
  logic [0:0] ctrl__req_sent;
  logic [0:0] ctrl__reset;
  logic [0:0] ctrl__resp_recved;
  logic [0:0] ctrl__self_cfg_deq;

  MemEngineCtrl__e7b85fc84228c577 ctrl
  (
    .cfg_deq_rdy( ctrl__cfg_deq_rdy ),
    .cfg_deq_val( ctrl__cfg_deq_val ),
    .cfg_out_rdy( ctrl__cfg_out_rdy ),
    .cfg_out_val( ctrl__cfg_out_val ),
    .clk( ctrl__clk ),
    .count_zero( ctrl__count_zero ),
    .deq_rdy( ctrl__deq_rdy ),
    .deq_val( ctrl__deq_val ),
    .is_calc( ctrl__is_calc ),
    .is_cfg_target_self( ctrl__is_cfg_target_self ),
    .is_cfg_write( ctrl__is_cfg_write ),
    .is_done( ctrl__is_done ),
    .is_out_credit_zero( ctrl__is_out_credit_zero ),
    .mem_deq_en( ctrl__mem_deq_en ),
    .mem_deq_rdy( ctrl__mem_deq_rdy ),
    .mem_req_en( ctrl__mem_req_en ),
    .mem_req_rdy( ctrl__mem_req_rdy ),
    .no_pending_responses( ctrl__no_pending_responses ),
    .out_rdy( ctrl__out_rdy ),
    .out_val( ctrl__out_val ),
    .req_sent( ctrl__req_sent ),
    .reset( ctrl__reset ),
    .resp_recved( ctrl__resp_recved ),
    .self_cfg_deq( ctrl__self_cfg_deq )
  );

  //-------------------------------------------------------------
  // End of component ctrl
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component dpath
  //-------------------------------------------------------------

  logic [36:0] dpath__cfg_deq_msg;
  logic [36:0] dpath__cfg_out_msg;
  logic [0:0] dpath__clk;
  logic [0:0] dpath__count_zero;
  logic [31:0] dpath__deq_msg;
  logic [3:0] dpath__id_cord;
  logic [0:0] dpath__is_cfg_target_self;
  logic [0:0] dpath__is_cfg_write;
  logic [0:0] dpath__is_out_credit_zero;
  CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 dpath__mem_deq_ret;
  CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 dpath__mem_req_msg;
  logic [0:0] dpath__no_pending_responses;
  logic [31:0] dpath__out_msg;
  logic [0:0] dpath__req_sent;
  logic [0:0] dpath__reset;
  logic [0:0] dpath__resp_recved;
  logic [0:0] dpath__self_cfg_deq;
  logic [3:0] dpath__x_cord;

  MemEngineDpath__e7b85fc84228c577 dpath
  (
    .cfg_deq_msg( dpath__cfg_deq_msg ),
    .cfg_out_msg( dpath__cfg_out_msg ),
    .clk( dpath__clk ),
    .count_zero( dpath__count_zero ),
    .deq_msg( dpath__deq_msg ),
    .id_cord( dpath__id_cord ),
    .is_cfg_target_self( dpath__is_cfg_target_self ),
    .is_cfg_write( dpath__is_cfg_write ),
    .is_out_credit_zero( dpath__is_out_credit_zero ),
    .mem_deq_ret( dpath__mem_deq_ret ),
    .mem_req_msg( dpath__mem_req_msg ),
    .no_pending_responses( dpath__no_pending_responses ),
    .out_msg( dpath__out_msg ),
    .req_sent( dpath__req_sent ),
    .reset( dpath__reset ),
    .resp_recved( dpath__resp_recved ),
    .self_cfg_deq( dpath__self_cfg_deq ),
    .x_cord( dpath__x_cord )
  );

  //-------------------------------------------------------------
  // End of component dpath
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component in_q
  //-------------------------------------------------------------

  logic [0:0] in_q__clk;
  logic [0:0] in_q__is_empty;
  logic [0:0] in_q__reset;
  logic [31:0] in_q__deq__msg;
  logic [0:0] in_q__deq__rdy;
  logic [0:0] in_q__deq__val;
  logic [31:0] in_q__enq__msg;
  logic [0:0] in_q__enq__rdy;
  logic [0:0] in_q__enq__val;

  ValRdyNormalQueuePow2RTL__67ce5f09ba36faec in_q
  (
    .clk( in_q__clk ),
    .is_empty( in_q__is_empty ),
    .reset( in_q__reset ),
    .deq__msg( in_q__deq__msg ),
    .deq__rdy( in_q__deq__rdy ),
    .deq__val( in_q__deq__val ),
    .enq__msg( in_q__enq__msg ),
    .enq__rdy( in_q__enq__rdy ),
    .enq__val( in_q__enq__val )
  );

  //-------------------------------------------------------------
  // End of component in_q
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component mem_q
  //-------------------------------------------------------------

  logic [0:0] mem_q__clk;
  logic [0:0] mem_q__reset;
  logic [0:0] mem_q__deq__en;
  logic [0:0] mem_q__deq__rdy;
  CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 mem_q__deq__ret;
  logic [0:0] mem_q__enq__en;
  CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 mem_q__enq__msg;
  logic [0:0] mem_q__enq__rdy;

  NormalQueuePow2RTL__9291fbbb47766962 mem_q
  (
    .clk( mem_q__clk ),
    .reset( mem_q__reset ),
    .deq__en( mem_q__deq__en ),
    .deq__rdy( mem_q__deq__rdy ),
    .deq__ret( mem_q__deq__ret ),
    .enq__en( mem_q__enq__en ),
    .enq__msg( mem_q__enq__msg ),
    .enq__rdy( mem_q__enq__rdy )
  );

  //-------------------------------------------------------------
  // End of component mem_q
  //-------------------------------------------------------------

  assign cfg_q__clk = clk;
  assign cfg_q__reset = reset;
  assign in_q__clk = clk;
  assign in_q__reset = reset;
  assign mem_q__clk = clk;
  assign mem_q__reset = reset;
  assign ctrl__clk = clk;
  assign ctrl__reset = reset;
  assign dpath__clk = clk;
  assign dpath__reset = reset;
  assign cfg_q__enq__msg = cfg_in__msg;
  assign cfg_in__rdy = cfg_q__enq__rdy;
  assign cfg_q__enq__val = cfg_in__val;
  assign in_q__enq__msg = in___msg;
  assign in___rdy = in_q__enq__rdy;
  assign in_q__enq__val = in___val;
  assign mem_q__enq__en = mem_ifc__resp__en;
  assign mem_q__enq__msg = mem_ifc__resp__msg;
  assign mem_ifc__resp__rdy = mem_q__enq__rdy;
  assign mem_ifc__req__en = ctrl__mem_req_en;
  assign ctrl__mem_req_rdy = mem_ifc__req__rdy;
  assign mem_ifc__req__msg = dpath__mem_req_msg;
  assign mem_q__deq__en = ctrl__mem_deq_en;
  assign ctrl__mem_deq_rdy = mem_q__deq__rdy;
  assign dpath__mem_deq_ret = mem_q__deq__ret;
  assign ctrl__deq_val = in_q__deq__val;
  assign in_q__deq__rdy = ctrl__deq_rdy;
  assign dpath__deq_msg = in_q__deq__msg;
  assign out__val = ctrl__out_val;
  assign ctrl__out_rdy = out__rdy;
  assign out__msg = dpath__out_msg;
  assign ctrl__cfg_deq_val = cfg_q__deq__val;
  assign cfg_q__deq__rdy = ctrl__cfg_deq_rdy;
  assign dpath__cfg_deq_msg = cfg_q__deq__msg;
  assign cfg_out__val = ctrl__cfg_out_val;
  assign ctrl__cfg_out_rdy = cfg_out__rdy;
  assign cfg_out__msg = dpath__cfg_out_msg;
  assign is_done = ctrl__is_done;
  assign ctrl__is_calc = is_calc;
  assign dpath__id_cord = id_cord;
  assign dpath__x_cord = x_cord;
  assign ctrl__count_zero = dpath__count_zero;
  assign ctrl__no_pending_responses = dpath__no_pending_responses;
  assign ctrl__is_cfg_write = dpath__is_cfg_write;
  assign ctrl__is_cfg_target_self = dpath__is_cfg_target_self;
  assign dpath__self_cfg_deq = ctrl__self_cfg_deq;
  assign dpath__req_sent = ctrl__req_sent;
  assign dpath__resp_recved = ctrl__resp_recved;
  assign ctrl__is_out_credit_zero = dpath__is_out_credit_zero;

endmodule


// PyMTL Component ProcElementCtrl Definition
// Full name: ProcElementCtrl__xcel_params_CGRAParams: base_addr_bound:16384, base_addr_register:0, base_addr_scratchpad:256, cfg_nwords:1, cfg_type:<class 'pymtl3.datatypes.bits_import.Bits32'>, data_width:32, enable_FP:True, me_cfg_type:<class 'types.MEConfigMsg_8x8'>, mul_cycles:0, ncols:8, nrows:8, nspads:4, num_remote_masters:4, pe_cfg_type:<class 'types.PEConfigMsg_8x8'>, remote_master_addr_width:28, remote_master_data_width_factor:1, rf_nregs:2, spad_data_width:32, spad_mask_size:0, spad_num_entries:1024, trace_verbosity:0
// At /work/global/pp482/cgra/src/cgra/ProcElementCtrl.py

module ProcElementCtrl__e7b85fc84228c577
(
  output logic [0:0] cfg_deq_rdy ,
  input  logic [0:0] cfg_deq_val ,
  input  logic [0:0] cfg_out_rdy ,
  output logic [0:0] cfg_out_val ,
  output logic [0:0] cfg_r_en ,
  input  logic [0:0] clk ,
  input  logic [0:0] fu_out_go ,
  input  logic [0:0] is_cfg_target_self ,
  input  logic [0:0] is_reload_cmd ,
  input  logic [0:0] reset ,
  output logic [0:0] rf_reload ,
  input  logic [2:0] rf_src ,
  output logic [0:0] rf_wen 
);
  logic [0:0] self_cfg_deq;

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/ProcElementCtrl.py:46
  // s.cfg_deq_rdy //= lambda: s.self_cfg_deq | s.cfg_out_rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__ctrl_cfg_deq_rdy
    cfg_deq_rdy = self_cfg_deq | cfg_out_rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/ProcElementCtrl.py:47
  // s.cfg_out_val //= lambda: ~s.is_cfg_target_self & s.cfg_deq_val
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__ctrl_cfg_out_val
    cfg_out_val = ( ~is_cfg_target_self ) & cfg_deq_val;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/ProcElementCtrl.py:45
  // s.cfg_r_en    //= lambda: s.self_cfg_deq & ~s.is_reload_cmd
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__ctrl_cfg_r_en
    cfg_r_en = self_cfg_deq & ( ~is_reload_cmd );
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/ProcElementCtrl.py:54
  // s.rf_reload //= lambda: s.self_cfg_deq & s.is_reload_cmd
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__ctrl_rf_reload
    rf_reload = self_cfg_deq & is_reload_cmd;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/ProcElementCtrl.py:53
  // s.rf_wen //= lambda: s.rf_reload | ((s.rf_src == CFG.OUT_SRC_COMP) & s.fu_out_go & ~s.rf_reload)
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__ctrl_rf_wen
    rf_wen = rf_reload | ( ( ( rf_src == 3'd4 ) & fu_out_go ) & ( ~rf_reload ) );
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/ProcElementCtrl.py:43
  // s.self_cfg_deq //= lambda: s.is_cfg_target_self & s.cfg_deq_val
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__ctrl_self_cfg_deq
    self_cfg_deq = is_cfg_target_self & cfg_deq_val;
  end

endmodule


// PyMTL Component RegEnRst Definition
// Full name: RegEnRst__Type_PEConfigMsg_8x8__69ed92dd9fa67f76__reset_value_0:00:0:0:0:0:0:0:0:0:0
// At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/registers.py

module RegEnRst__0fb4f3ed7b8ec906
(
  input  logic [0:0] clk ,
  input  logic [0:0] en ,
  input  PEConfigMsg_8x8__69ed92dd9fa67f76 in_ ,
  output PEConfigMsg_8x8__69ed92dd9fa67f76 out ,
  input  logic [0:0] reset 
);
  localparam PEConfigMsg_8x8__69ed92dd9fa67f76 __const__reset_value_at_up_regenrst  = { 1'd0, 6'd0, 3'd0, 3'd0, 3'd0, 3'd0, 3'd0, 3'd0, 2'd0, 3'd0, 2'd0 };

  // PyMTL Update Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/registers.py:55
  // @update_ff
  // def up_regenrst():
  //   if s.reset: s.out <<= reset_value
  //   elif s.en:  s.out <<= s.in_
  
  always_ff @(posedge clk) begin : up_regenrst
    if ( reset ) begin
      out <= 32'( __const__reset_value_at_up_regenrst );
    end
    else if ( en ) begin
      out <= in_;
    end
  end

endmodule


// PyMTL Component Alu Definition
// At /work/global/pp482/cgra/src/cgra/Alu.py

module Alu__Type_Bits32
(
  input  logic [0:0] clk ,
  input  logic [3:0] fn ,
  input  logic [31:0] in0 ,
  input  logic [31:0] in1 ,
  output logic [31:0] out ,
  input  logic [0:0] reset 
);
  logic [0:0] a_eq_b;
  logic [0:0] a_gt_b;
  logic [31:0] add_a_wire;
  logic [31:0] add_b_wire;
  logic [31:0] and_a_wire;
  logic [31:0] and_b_wire;
  logic [31:0] cp0_wire;
  logic [31:0] cp1_wire;
  logic [31:0] eq_a_wire;
  logic [31:0] eq_b_wire;
  logic [31:0] gt_a_wire;
  logic [31:0] gt_b_wire;
  logic [31:0] or_a_wire;
  logic [31:0] or_b_wire;
  logic [31:0] sll_a_wire;
  logic [31:0] sll_b_wire;
  logic [31:0] srl_a_wire;
  logic [31:0] srl_b_wire;
  logic [31:0] sub_a_wire;
  logic [31:0] sub_b_wire;
  logic [31:0] xor_a_wire;
  logic [31:0] xor_b_wire;

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/Alu.py:109
  // @update
  // def comb_logic():
  //   if   s.fn == AluOp.CP0: s.out @= s.cp0_wire                        # COPY OP0
  //   elif s.fn == AluOp.CP1: s.out @= s.cp1_wire                        # COPY OP1
  //   elif s.fn == AluOp.ADD: s.out @= s.add_a_wire + s.add_b_wire       # ADD
  //   elif s.fn == AluOp.SUB: s.out @= s.sub_a_wire - s.sub_b_wire       # SUB
  //   elif s.fn == AluOp.SLL: s.out @= s.sll_a_wire << s.sll_b_wire      # SLL
  //   elif s.fn == AluOp.SRL: s.out @= s.srl_a_wire >> s.srl_b_wire      # SRL
  //   elif s.fn == AluOp.AND: s.out @= s.and_a_wire & s.and_b_wire       # AND
  //   elif s.fn == AluOp.OR : s.out @= s.or_a_wire  | s.or_b_wire        # OR
  //   elif s.fn == AluOp.XOR: s.out @= s.xor_a_wire ^ s.xor_b_wire       # XOR
  //   elif s.fn == AluOp.EQ : s.out @= 1 if  s.a_eq_b else 0             # EQ
  //   elif s.fn == AluOp.NE : s.out @= 1 if ~s.a_eq_b else 0             # NE
  //   elif s.fn == AluOp.GT : s.out @= 1 if  s.a_gt_b else 0             # GT
  //   elif s.fn == AluOp.GEQ: s.out @= 1 if  s.a_gt_b |  s.a_eq_b else 0 # GEQ
  //   else:                   s.out @= 0                                 # NOP
  
  always_comb begin : comb_logic
    if ( fn == 4'd0 ) begin
      out = cp0_wire;
    end
    else if ( fn == 4'd1 ) begin
      out = cp1_wire;
    end
    else if ( fn == 4'd2 ) begin
      out = add_a_wire + add_b_wire;
    end
    else if ( fn == 4'd3 ) begin
      out = sub_a_wire - sub_b_wire;
    end
    else if ( fn == 4'd4 ) begin
      out = sll_a_wire << sll_b_wire;
    end
    else if ( fn == 4'd5 ) begin
      out = srl_a_wire >> srl_b_wire;
    end
    else if ( fn == 4'd6 ) begin
      out = and_a_wire & and_b_wire;
    end
    else if ( fn == 4'd7 ) begin
      out = or_a_wire | or_b_wire;
    end
    else if ( fn == 4'd8 ) begin
      out = xor_a_wire ^ xor_b_wire;
    end
    else if ( fn == 4'd9 ) begin
      out = a_eq_b ? 32'd1 : 32'd0;
    end
    else if ( fn == 4'd10 ) begin
      out = ( ~a_eq_b ) ? 32'd1 : 32'd0;
    end
    else if ( fn == 4'd11 ) begin
      out = a_gt_b ? 32'd1 : 32'd0;
    end
    else if ( fn == 4'd12 ) begin
      out = ( a_gt_b | a_eq_b ) ? 32'd1 : 32'd0;
    end
    else
      out = 32'd0;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/Alu.py:64
  // @update
  // def up_data_gating():
  //   s.cp0_wire   @= s.in0 if s.fn == AluOp.CP0 else 0
  //   s.cp1_wire   @= s.in1 if s.fn == AluOp.CP1 else 0
  // 
  //   s.add_a_wire @= s.in0 if s.fn == AluOp.ADD else 0
  //   s.add_b_wire @= s.in1 if s.fn == AluOp.ADD else 0
  // 
  //   s.sub_a_wire @= s.in0 if s.fn == AluOp.SUB else 0
  //   s.sub_b_wire @= s.in1 if s.fn == AluOp.SUB else 0
  // 
  //   s.sll_a_wire @= s.in0 if s.fn == AluOp.SLL else 0
  //   s.sll_b_wire @= s.in1 if s.fn == AluOp.SLL else 0
  // 
  //   s.srl_a_wire @= s.in0 if s.fn == AluOp.SRL else 0
  //   s.srl_b_wire @= s.in1 if s.fn == AluOp.SRL else 0
  // 
  //   s.and_a_wire @= s.in0 if s.fn == AluOp.AND else 0
  //   s.and_b_wire @= s.in1 if s.fn == AluOp.AND else 0
  // 
  //   s.or_a_wire  @= s.in0 if s.fn == AluOp.OR  else 0
  //   s.or_b_wire  @= s.in1 if s.fn == AluOp.OR  else 0
  // 
  //   s.xor_a_wire @= s.in0 if s.fn == AluOp.XOR else 0
  //   s.xor_b_wire @= s.in1 if s.fn == AluOp.XOR else 0
  // 
  //   if ( s.fn == AluOp.EQ  ) | ( s.fn == AluOp.NE ) | ( s.fn == AluOp.GEQ ):
  //     s.eq_a_wire @= s.in0
  //     s.eq_b_wire @= s.in1
  //   else:
  //     s.eq_a_wire @= 0
  //     s.eq_b_wire @= 0
  // 
  //   if ( s.fn == AluOp.GT ) | ( s.fn == AluOp.GEQ ):
  //     s.gt_a_wire @= s.in0
  //     s.gt_b_wire @= s.in1
  //   else:
  //     s.gt_a_wire @= 0
  //     s.gt_b_wire @= 0
  
  always_comb begin : up_data_gating
    cp0_wire = ( fn == 4'd0 ) ? in0 : 32'd0;
    cp1_wire = ( fn == 4'd1 ) ? in1 : 32'd0;
    add_a_wire = ( fn == 4'd2 ) ? in0 : 32'd0;
    add_b_wire = ( fn == 4'd2 ) ? in1 : 32'd0;
    sub_a_wire = ( fn == 4'd3 ) ? in0 : 32'd0;
    sub_b_wire = ( fn == 4'd3 ) ? in1 : 32'd0;
    sll_a_wire = ( fn == 4'd4 ) ? in0 : 32'd0;
    sll_b_wire = ( fn == 4'd4 ) ? in1 : 32'd0;
    srl_a_wire = ( fn == 4'd5 ) ? in0 : 32'd0;
    srl_b_wire = ( fn == 4'd5 ) ? in1 : 32'd0;
    and_a_wire = ( fn == 4'd6 ) ? in0 : 32'd0;
    and_b_wire = ( fn == 4'd6 ) ? in1 : 32'd0;
    or_a_wire = ( fn == 4'd7 ) ? in0 : 32'd0;
    or_b_wire = ( fn == 4'd7 ) ? in1 : 32'd0;
    xor_a_wire = ( fn == 4'd8 ) ? in0 : 32'd0;
    xor_b_wire = ( fn == 4'd8 ) ? in1 : 32'd0;
    if ( ( ( fn == 4'd9 ) | ( fn == 4'd10 ) ) | ( fn == 4'd12 ) ) begin
      eq_a_wire = in0;
      eq_b_wire = in1;
    end
    else begin
      eq_a_wire = 32'd0;
      eq_b_wire = 32'd0;
    end
    if ( ( fn == 4'd11 ) | ( fn == 4'd12 ) ) begin
      gt_a_wire = in0;
      gt_b_wire = in1;
    end
    else begin
      gt_a_wire = 32'd0;
      gt_b_wire = 32'd0;
    end
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/Alu.py:104
  // @update
  // def up_eq_gt_wire():
  //   s.a_eq_b @= s.eq_a_wire == s.eq_b_wire
  //   s.a_gt_b @= s.gt_a_wire > s.gt_b_wire
  
  always_comb begin : up_eq_gt_wire
    a_eq_b = eq_a_wire == eq_b_wire;
    a_gt_b = gt_a_wire > gt_b_wire;
  end

endmodule


// PyMTL VerilogPlaceholder AddRecFN Definition
// At /work/global/pp482/cgra/src/pymtl3_hardfloat/HardFloat/AddRecFNRTL.py

//***********************************************************
// Pickled source file of placeholder AddRecFN__expWidth_8__sigWidth_24
//***********************************************************

//-----------------------------------------------------------
// Dependency of placeholder AddRecFN
//-----------------------------------------------------------

//-----------------------------------------------------------
// Wrapper of placeholder AddRecFN__expWidth_8__sigWidth_24
//-----------------------------------------------------------

`ifndef ADDRECFN__EXPWIDTH_8__SIGWIDTH_24
`define ADDRECFN__EXPWIDTH_8__SIGWIDTH_24

module AddRecFN__expWidth_8__sigWidth_24
(
  input logic reset,
  input logic clk,
  input logic [33-1:0] a ,
  input logic [33-1:0] b ,
  input logic [1-1:0] control ,
  output logic [5-1:0] exceptionFlags ,
  output logic [33-1:0] out ,
  input logic [3-1:0] roundingMode ,
  input logic [1-1:0] subOp 
);
  addRecFN
  #(
    .expWidth( 8 ),
    .sigWidth( 24 )
  ) v
  (
    .a( a ),
    .b( b ),
    .control( control ),
    .exceptionFlags( exceptionFlags ),
    .out( out ),
    .roundingMode( roundingMode ),
    .subOp( subOp )
  );
endmodule

`endif /* ADDRECFN__EXPWIDTH_8__SIGWIDTH_24 */



// PyMTL VerilogPlaceholder RecFNToFN Definition
// At /work/global/pp482/cgra/src/pymtl3_hardfloat/HardFloat/RecFNToFNRTL.py

//***********************************************************
// Pickled source file of placeholder RecFNToFN__expWidth_8__sigWidth_24
//***********************************************************

//-----------------------------------------------------------
// Dependency of placeholder RecFNToFN
//-----------------------------------------------------------

//-----------------------------------------------------------
// Wrapper of placeholder RecFNToFN__expWidth_8__sigWidth_24
//-----------------------------------------------------------

`ifndef RECFNTOFN__EXPWIDTH_8__SIGWIDTH_24
`define RECFNTOFN__EXPWIDTH_8__SIGWIDTH_24

module RecFNToFN__expWidth_8__sigWidth_24
(
  input logic reset,
  input logic clk,
  input logic [33-1:0] in_ ,
  output logic [32-1:0] out 
);
  recFNToFN
  #(
    .expWidth( 8 ),
    .sigWidth( 24 )
  ) v
  (
    .in( in_ ),
    .out( out )
  );
endmodule

`endif /* RECFNTOFN__EXPWIDTH_8__SIGWIDTH_24 */



// PyMTL VerilogPlaceholder FNToRecFN Definition
// At /work/global/pp482/cgra/src/pymtl3_hardfloat/HardFloat/FNToRecFNRTL.py

//***********************************************************
// Pickled source file of placeholder FNToRecFN__expWidth_8__sigWidth_24
//***********************************************************

//-----------------------------------------------------------
// Dependency of placeholder FNToRecFN
//-----------------------------------------------------------

//-----------------------------------------------------------
// Wrapper of placeholder FNToRecFN__expWidth_8__sigWidth_24
//-----------------------------------------------------------

`ifndef FNTORECFN__EXPWIDTH_8__SIGWIDTH_24
`define FNTORECFN__EXPWIDTH_8__SIGWIDTH_24

module FNToRecFN__expWidth_8__sigWidth_24
(
  input logic reset,
  input logic clk,
  input logic [32-1:0] in_ ,
  output logic [33-1:0] out 
);
  fNToRecFN
  #(
    .expWidth( 8 ),
    .sigWidth( 24 )
  ) v
  (
    .in( in_ ),
    .out( out )
  );
endmodule

`endif /* FNTORECFN__EXPWIDTH_8__SIGWIDTH_24 */



// PyMTL Component AddFN Definition
// At /work/global/pp482/cgra/src/pymtl3_hardfloat/HardFloat/AddFNRTL.py

module AddFN__expWidth_8__sigWidth_24
(
  input  logic [31:0] a ,
  input  logic [31:0] b ,
  input  logic [0:0] clk ,
  output logic [31:0] out ,
  input  logic [0:0] reset ,
  input  logic [2:0] roundingMode ,
  input  logic [0:0] subOp 
);
  logic [32:0] adder_out;
  logic [32:0] conv_a;
  logic [32:0] conv_b;
  logic [4:0] exception_flags;
  //-------------------------------------------------------------
  // Component adder
  //-------------------------------------------------------------

  logic [32:0] adder__a;
  logic [32:0] adder__b;
  logic [0:0] adder__clk;
  logic [0:0] adder__control;
  logic [4:0] adder__exceptionFlags;
  logic [32:0] adder__out;
  logic [0:0] adder__reset;
  logic [2:0] adder__roundingMode;
  logic [0:0] adder__subOp;

  AddRecFN__expWidth_8__sigWidth_24 adder
  (
    .a( adder__a ),
    .b( adder__b ),
    .clk( adder__clk ),
    .control( adder__control ),
    .exceptionFlags( adder__exceptionFlags ),
    .out( adder__out ),
    .reset( adder__reset ),
    .roundingMode( adder__roundingMode ),
    .subOp( adder__subOp )
  );

  //-------------------------------------------------------------
  // End of component adder
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component rec_to_std_conv
  //-------------------------------------------------------------

  logic [0:0] rec_to_std_conv__clk;
  logic [32:0] rec_to_std_conv__in_;
  logic [31:0] rec_to_std_conv__out;
  logic [0:0] rec_to_std_conv__reset;

  RecFNToFN__expWidth_8__sigWidth_24 rec_to_std_conv
  (
    .clk( rec_to_std_conv__clk ),
    .in_( rec_to_std_conv__in_ ),
    .out( rec_to_std_conv__out ),
    .reset( rec_to_std_conv__reset )
  );

  //-------------------------------------------------------------
  // End of component rec_to_std_conv
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component std_to_rec_conv_a
  //-------------------------------------------------------------

  logic [0:0] std_to_rec_conv_a__clk;
  logic [31:0] std_to_rec_conv_a__in_;
  logic [32:0] std_to_rec_conv_a__out;
  logic [0:0] std_to_rec_conv_a__reset;

  FNToRecFN__expWidth_8__sigWidth_24 std_to_rec_conv_a
  (
    .clk( std_to_rec_conv_a__clk ),
    .in_( std_to_rec_conv_a__in_ ),
    .out( std_to_rec_conv_a__out ),
    .reset( std_to_rec_conv_a__reset )
  );

  //-------------------------------------------------------------
  // End of component std_to_rec_conv_a
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component std_to_rec_conv_b
  //-------------------------------------------------------------

  logic [0:0] std_to_rec_conv_b__clk;
  logic [31:0] std_to_rec_conv_b__in_;
  logic [32:0] std_to_rec_conv_b__out;
  logic [0:0] std_to_rec_conv_b__reset;

  FNToRecFN__expWidth_8__sigWidth_24 std_to_rec_conv_b
  (
    .clk( std_to_rec_conv_b__clk ),
    .in_( std_to_rec_conv_b__in_ ),
    .out( std_to_rec_conv_b__out ),
    .reset( std_to_rec_conv_b__reset )
  );

  //-------------------------------------------------------------
  // End of component std_to_rec_conv_b
  //-------------------------------------------------------------

  assign std_to_rec_conv_a__clk = clk;
  assign std_to_rec_conv_a__reset = reset;
  assign std_to_rec_conv_b__clk = clk;
  assign std_to_rec_conv_b__reset = reset;
  assign rec_to_std_conv__clk = clk;
  assign rec_to_std_conv__reset = reset;
  assign adder__clk = clk;
  assign adder__reset = reset;
  assign std_to_rec_conv_a__in_ = a;
  assign conv_a = std_to_rec_conv_a__out;
  assign std_to_rec_conv_b__in_ = b;
  assign conv_b = std_to_rec_conv_b__out;
  assign adder__control = 1'd1;
  assign adder__a = conv_a;
  assign adder__b = conv_b;
  assign adder__roundingMode = roundingMode;
  assign adder__subOp = subOp;
  assign adder_out = adder__out;
  assign exception_flags = adder__exceptionFlags;
  assign rec_to_std_conv__in_ = adder_out;
  assign out = rec_to_std_conv__out;

endmodule


// PyMTL VerilogPlaceholder MulAddRecFN Definition
// At /work/global/pp482/cgra/src/pymtl3_hardfloat/HardFloat/MulAddRecFNRTL.py

//***********************************************************
// Pickled source file of placeholder MulAddRecFN__expWidth_8__sigWidth_24
//***********************************************************

//-----------------------------------------------------------
// Dependency of placeholder MulAddRecFN
//-----------------------------------------------------------

//-----------------------------------------------------------
// Wrapper of placeholder MulAddRecFN__expWidth_8__sigWidth_24
//-----------------------------------------------------------

`ifndef MULADDRECFN__EXPWIDTH_8__SIGWIDTH_24
`define MULADDRECFN__EXPWIDTH_8__SIGWIDTH_24

module MulAddRecFN__expWidth_8__sigWidth_24
(
  input logic reset,
  input logic clk,
  input logic [33-1:0] a ,
  input logic [33-1:0] b ,
  input logic [33-1:0] c ,
  input logic [1-1:0] control ,
  output logic [5-1:0] exceptionFlags ,
  input logic [3-1:0] op ,
  output logic [33-1:0] out ,
  input logic [3-1:0] roundingMode 
);
  mulAddRecFN
  #(
    .expWidth( 8 ),
    .sigWidth( 24 ),
    .imulEn( 0 )
  ) v
  (
    .a( a ),
    .b( b ),
    .c( c ),
    .control( control ),
    .exceptionFlags( exceptionFlags ),
    .op( op ),
    .out( out ),
    .roundingMode( roundingMode )
  );
endmodule

`endif /* MULADDRECFN__EXPWIDTH_8__SIGWIDTH_24 */



// PyMTL Component MulAddFN Definition
// At /work/global/pp482/cgra/src/pymtl3_hardfloat/HardFloat/MulAddFNRTL.py

module MulAddFN__expWidth_8__sigWidth_24
(
  input  logic [31:0] a ,
  input  logic [31:0] b ,
  input  logic [31:0] c ,
  input  logic [0:0] clk ,
  input  logic [2:0] op ,
  output logic [31:0] out ,
  input  logic [0:0] reset ,
  input  logic [2:0] roundingMode 
);
  logic [32:0] add_mul_out;
  logic [32:0] conv_a;
  logic [32:0] conv_b;
  logic [32:0] conv_c;
  logic [4:0] exception_flags;
  //-------------------------------------------------------------
  // Component adder_multiplier
  //-------------------------------------------------------------

  logic [32:0] adder_multiplier__a;
  logic [32:0] adder_multiplier__b;
  logic [32:0] adder_multiplier__c;
  logic [0:0] adder_multiplier__clk;
  logic [0:0] adder_multiplier__control;
  logic [4:0] adder_multiplier__exceptionFlags;
  logic [2:0] adder_multiplier__op;
  logic [32:0] adder_multiplier__out;
  logic [0:0] adder_multiplier__reset;
  logic [2:0] adder_multiplier__roundingMode;

  MulAddRecFN__expWidth_8__sigWidth_24 adder_multiplier
  (
    .a( adder_multiplier__a ),
    .b( adder_multiplier__b ),
    .c( adder_multiplier__c ),
    .clk( adder_multiplier__clk ),
    .control( adder_multiplier__control ),
    .exceptionFlags( adder_multiplier__exceptionFlags ),
    .op( adder_multiplier__op ),
    .out( adder_multiplier__out ),
    .reset( adder_multiplier__reset ),
    .roundingMode( adder_multiplier__roundingMode )
  );

  //-------------------------------------------------------------
  // End of component adder_multiplier
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component rec_to_std_conv
  //-------------------------------------------------------------

  logic [0:0] rec_to_std_conv__clk;
  logic [32:0] rec_to_std_conv__in_;
  logic [31:0] rec_to_std_conv__out;
  logic [0:0] rec_to_std_conv__reset;

  RecFNToFN__expWidth_8__sigWidth_24 rec_to_std_conv
  (
    .clk( rec_to_std_conv__clk ),
    .in_( rec_to_std_conv__in_ ),
    .out( rec_to_std_conv__out ),
    .reset( rec_to_std_conv__reset )
  );

  //-------------------------------------------------------------
  // End of component rec_to_std_conv
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component std_to_rec_conv_a
  //-------------------------------------------------------------

  logic [0:0] std_to_rec_conv_a__clk;
  logic [31:0] std_to_rec_conv_a__in_;
  logic [32:0] std_to_rec_conv_a__out;
  logic [0:0] std_to_rec_conv_a__reset;

  FNToRecFN__expWidth_8__sigWidth_24 std_to_rec_conv_a
  (
    .clk( std_to_rec_conv_a__clk ),
    .in_( std_to_rec_conv_a__in_ ),
    .out( std_to_rec_conv_a__out ),
    .reset( std_to_rec_conv_a__reset )
  );

  //-------------------------------------------------------------
  // End of component std_to_rec_conv_a
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component std_to_rec_conv_b
  //-------------------------------------------------------------

  logic [0:0] std_to_rec_conv_b__clk;
  logic [31:0] std_to_rec_conv_b__in_;
  logic [32:0] std_to_rec_conv_b__out;
  logic [0:0] std_to_rec_conv_b__reset;

  FNToRecFN__expWidth_8__sigWidth_24 std_to_rec_conv_b
  (
    .clk( std_to_rec_conv_b__clk ),
    .in_( std_to_rec_conv_b__in_ ),
    .out( std_to_rec_conv_b__out ),
    .reset( std_to_rec_conv_b__reset )
  );

  //-------------------------------------------------------------
  // End of component std_to_rec_conv_b
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component std_to_rec_conv_c
  //-------------------------------------------------------------

  logic [0:0] std_to_rec_conv_c__clk;
  logic [31:0] std_to_rec_conv_c__in_;
  logic [32:0] std_to_rec_conv_c__out;
  logic [0:0] std_to_rec_conv_c__reset;

  FNToRecFN__expWidth_8__sigWidth_24 std_to_rec_conv_c
  (
    .clk( std_to_rec_conv_c__clk ),
    .in_( std_to_rec_conv_c__in_ ),
    .out( std_to_rec_conv_c__out ),
    .reset( std_to_rec_conv_c__reset )
  );

  //-------------------------------------------------------------
  // End of component std_to_rec_conv_c
  //-------------------------------------------------------------

  assign std_to_rec_conv_a__clk = clk;
  assign std_to_rec_conv_a__reset = reset;
  assign std_to_rec_conv_b__clk = clk;
  assign std_to_rec_conv_b__reset = reset;
  assign std_to_rec_conv_c__clk = clk;
  assign std_to_rec_conv_c__reset = reset;
  assign rec_to_std_conv__clk = clk;
  assign rec_to_std_conv__reset = reset;
  assign adder_multiplier__clk = clk;
  assign adder_multiplier__reset = reset;
  assign std_to_rec_conv_a__in_ = a;
  assign conv_a = std_to_rec_conv_a__out;
  assign std_to_rec_conv_b__in_ = b;
  assign conv_b = std_to_rec_conv_b__out;
  assign std_to_rec_conv_c__in_ = c;
  assign conv_c = std_to_rec_conv_c__out;
  assign adder_multiplier__control = 1'd1;
  assign adder_multiplier__op = op;
  assign adder_multiplier__a = conv_a;
  assign adder_multiplier__b = conv_b;
  assign adder_multiplier__c = conv_c;
  assign adder_multiplier__roundingMode = roundingMode;
  assign add_mul_out = adder_multiplier__out;
  assign exception_flags = adder_multiplier__exceptionFlags;
  assign rec_to_std_conv__in_ = add_mul_out;
  assign out = rec_to_std_conv__out;

endmodule


// PyMTL VerilogPlaceholder MulRecFN Definition
// At /work/global/pp482/cgra/src/pymtl3_hardfloat/HardFloat/MulRecFNRTL.py

//***********************************************************
// Pickled source file of placeholder MulRecFN__expWidth_8__sigWidth_24
//***********************************************************

//-----------------------------------------------------------
// Dependency of placeholder MulRecFN
//-----------------------------------------------------------

//-----------------------------------------------------------
// Wrapper of placeholder MulRecFN__expWidth_8__sigWidth_24
//-----------------------------------------------------------

`ifndef MULRECFN__EXPWIDTH_8__SIGWIDTH_24
`define MULRECFN__EXPWIDTH_8__SIGWIDTH_24

module MulRecFN__expWidth_8__sigWidth_24
(
  input logic reset,
  input logic clk,
  input logic [33-1:0] a ,
  input logic [33-1:0] b ,
  input logic [1-1:0] control ,
  output logic [5-1:0] exceptionFlags ,
  output logic [33-1:0] out ,
  input logic [3-1:0] roundingMode 
);
  mulRecFN
  #(
    .expWidth( 8 ),
    .sigWidth( 24 )
  ) v
  (
    .a( a ),
    .b( b ),
    .control( control ),
    .exceptionFlags( exceptionFlags ),
    .out( out ),
    .roundingMode( roundingMode )
  );
endmodule

`endif /* MULRECFN__EXPWIDTH_8__SIGWIDTH_24 */



// PyMTL Component MulFN Definition
// At /work/global/pp482/cgra/src/pymtl3_hardfloat/HardFloat/MulFNRTL.py

module MulFN__expWidth_8__sigWidth_24
(
  input  logic [31:0] a ,
  input  logic [31:0] b ,
  input  logic [0:0] clk ,
  output logic [31:0] out ,
  input  logic [0:0] reset ,
  input  logic [2:0] roundingMode 
);
  logic [32:0] conv_a;
  logic [32:0] conv_b;
  logic [4:0] exception_flags;
  logic [32:0] multiplier_out;
  //-------------------------------------------------------------
  // Component multiplier
  //-------------------------------------------------------------

  logic [32:0] multiplier__a;
  logic [32:0] multiplier__b;
  logic [0:0] multiplier__clk;
  logic [0:0] multiplier__control;
  logic [4:0] multiplier__exceptionFlags;
  logic [32:0] multiplier__out;
  logic [0:0] multiplier__reset;
  logic [2:0] multiplier__roundingMode;

  MulRecFN__expWidth_8__sigWidth_24 multiplier
  (
    .a( multiplier__a ),
    .b( multiplier__b ),
    .clk( multiplier__clk ),
    .control( multiplier__control ),
    .exceptionFlags( multiplier__exceptionFlags ),
    .out( multiplier__out ),
    .reset( multiplier__reset ),
    .roundingMode( multiplier__roundingMode )
  );

  //-------------------------------------------------------------
  // End of component multiplier
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component rec_to_std_conv
  //-------------------------------------------------------------

  logic [0:0] rec_to_std_conv__clk;
  logic [32:0] rec_to_std_conv__in_;
  logic [31:0] rec_to_std_conv__out;
  logic [0:0] rec_to_std_conv__reset;

  RecFNToFN__expWidth_8__sigWidth_24 rec_to_std_conv
  (
    .clk( rec_to_std_conv__clk ),
    .in_( rec_to_std_conv__in_ ),
    .out( rec_to_std_conv__out ),
    .reset( rec_to_std_conv__reset )
  );

  //-------------------------------------------------------------
  // End of component rec_to_std_conv
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component std_to_rec_conv_a
  //-------------------------------------------------------------

  logic [0:0] std_to_rec_conv_a__clk;
  logic [31:0] std_to_rec_conv_a__in_;
  logic [32:0] std_to_rec_conv_a__out;
  logic [0:0] std_to_rec_conv_a__reset;

  FNToRecFN__expWidth_8__sigWidth_24 std_to_rec_conv_a
  (
    .clk( std_to_rec_conv_a__clk ),
    .in_( std_to_rec_conv_a__in_ ),
    .out( std_to_rec_conv_a__out ),
    .reset( std_to_rec_conv_a__reset )
  );

  //-------------------------------------------------------------
  // End of component std_to_rec_conv_a
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component std_to_rec_conv_b
  //-------------------------------------------------------------

  logic [0:0] std_to_rec_conv_b__clk;
  logic [31:0] std_to_rec_conv_b__in_;
  logic [32:0] std_to_rec_conv_b__out;
  logic [0:0] std_to_rec_conv_b__reset;

  FNToRecFN__expWidth_8__sigWidth_24 std_to_rec_conv_b
  (
    .clk( std_to_rec_conv_b__clk ),
    .in_( std_to_rec_conv_b__in_ ),
    .out( std_to_rec_conv_b__out ),
    .reset( std_to_rec_conv_b__reset )
  );

  //-------------------------------------------------------------
  // End of component std_to_rec_conv_b
  //-------------------------------------------------------------

  assign std_to_rec_conv_a__clk = clk;
  assign std_to_rec_conv_a__reset = reset;
  assign std_to_rec_conv_b__clk = clk;
  assign std_to_rec_conv_b__reset = reset;
  assign rec_to_std_conv__clk = clk;
  assign rec_to_std_conv__reset = reset;
  assign multiplier__clk = clk;
  assign multiplier__reset = reset;
  assign std_to_rec_conv_a__in_ = a;
  assign conv_a = std_to_rec_conv_a__out;
  assign std_to_rec_conv_b__in_ = b;
  assign conv_b = std_to_rec_conv_b__out;
  assign multiplier__control = 1'd1;
  assign multiplier__a = conv_a;
  assign multiplier__b = conv_b;
  assign multiplier__roundingMode = roundingMode;
  assign multiplier_out = multiplier__out;
  assign exception_flags = multiplier__exceptionFlags;
  assign rec_to_std_conv__in_ = multiplier_out;
  assign out = rec_to_std_conv__out;

endmodule


// PyMTL Component Fpu Definition
// At /work/global/pp482/cgra/src/cgra/Fpu.py

module Fpu__Type_Bits32__is_enabled_True
(
  input  logic [0:0] clk ,
  input  logic [2:0] fn ,
  input  logic [31:0] in0 ,
  input  logic [31:0] in1 ,
  input  logic [31:0] in2 ,
  output logic [31:0] out ,
  input  logic [0:0] reset 
);
  logic [31:0] op_A;
  logic [31:0] op_B;
  logic [31:0] op_C;
  //-------------------------------------------------------------
  // Component add
  //-------------------------------------------------------------

  logic [31:0] add__a;
  logic [31:0] add__b;
  logic [0:0] add__clk;
  logic [31:0] add__out;
  logic [0:0] add__reset;
  logic [2:0] add__roundingMode;
  logic [0:0] add__subOp;

  AddFN__expWidth_8__sigWidth_24 add
  (
    .a( add__a ),
    .b( add__b ),
    .clk( add__clk ),
    .out( add__out ),
    .reset( add__reset ),
    .roundingMode( add__roundingMode ),
    .subOp( add__subOp )
  );

  //-------------------------------------------------------------
  // End of component add
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component mad
  //-------------------------------------------------------------

  logic [31:0] mad__a;
  logic [31:0] mad__b;
  logic [31:0] mad__c;
  logic [0:0] mad__clk;
  logic [2:0] mad__op;
  logic [31:0] mad__out;
  logic [0:0] mad__reset;
  logic [2:0] mad__roundingMode;

  MulAddFN__expWidth_8__sigWidth_24 mad
  (
    .a( mad__a ),
    .b( mad__b ),
    .c( mad__c ),
    .clk( mad__clk ),
    .op( mad__op ),
    .out( mad__out ),
    .reset( mad__reset ),
    .roundingMode( mad__roundingMode )
  );

  //-------------------------------------------------------------
  // End of component mad
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component mul
  //-------------------------------------------------------------

  logic [31:0] mul__a;
  logic [31:0] mul__b;
  logic [0:0] mul__clk;
  logic [31:0] mul__out;
  logic [0:0] mul__reset;
  logic [2:0] mul__roundingMode;

  MulFN__expWidth_8__sigWidth_24 mul
  (
    .a( mul__a ),
    .b( mul__b ),
    .clk( mul__clk ),
    .out( mul__out ),
    .reset( mul__reset ),
    .roundingMode( mul__roundingMode )
  );

  //-------------------------------------------------------------
  // End of component mul
  //-------------------------------------------------------------

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/Fpu.py:70
  // s.add.subOp //= lambda: 1 if s.fn == FpuOp.SUB else 0
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_fu_fpu_add_subOp
    add__subOp = ( fn == 3'd1 ) ? 1'd1 : 1'd0;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/Fpu.py:49
  // s.op_A //= lambda: 0 if s.fn == FpuOp.NOP else s.in0
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_fu_fpu_op_A
    op_A = ( fn == 3'd7 ) ? 32'd0 : in0;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/Fpu.py:50
  // s.op_B //= lambda: 0 if s.fn == FpuOp.NOP else s.in1
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_fu_fpu_op_B
    op_B = ( fn == 3'd7 ) ? 32'd0 : in1;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/Fpu.py:51
  // s.op_C //= lambda: 0 if s.fn == FpuOp.NOP else s.in2
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_fu_fpu_op_C
    op_C = ( fn == 3'd7 ) ? 32'd0 : in2;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/Fpu.py:55
  // @update
  // def select_fpu_out():
  //   s.out @= 0
  //   if (s.fn == FpuOp.ADD) | (s.fn == FpuOp.SUB):
  //     s.out @= s.add.out
  //   if s.fn == FpuOp.MUL:
  //     s.out @= s.mul.out
  //   if s.fn == FpuOp.MAD:
  //     s.out @= s.mad.out
  
  always_comb begin : select_fpu_out
    out = 32'd0;
    if ( ( fn == 3'd0 ) | ( fn == 3'd1 ) ) begin
      out = add__out;
    end
    if ( fn == 3'd2 ) begin
      out = mul__out;
    end
    if ( fn == 3'd3 ) begin
      out = mad__out;
    end
  end

  assign add__clk = clk;
  assign add__reset = reset;
  assign mul__clk = clk;
  assign mul__reset = reset;
  assign mad__clk = clk;
  assign mad__reset = reset;
  assign add__a = op_A;
  assign add__b = op_B;
  assign add__roundingMode = 3'd0;
  assign mul__a = op_A;
  assign mul__b = op_B;
  assign mul__roundingMode = 3'd0;
  assign mad__op = 3'd0;
  assign mad__a = op_A;
  assign mad__b = op_B;
  assign mad__c = op_C;
  assign mad__roundingMode = 3'd0;

endmodule


// PyMTL Component Mul Definition
// At /work/global/pp482/cgra/src/cgra/Mul.py

module Mul__OpdType_Bits32
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  input CgraMulMsg_32__opd_a_32__opd_b_32 in___msg  ,
  output logic [0:0] in___rdy  ,
  input logic [0:0] in___val  ,
  output logic [31:0] out__msg  ,
  input logic [0:0] out__rdy  ,
  output logic [0:0] out__val  
);
  logic [31:0] opd_a_wire;
  logic [31:0] opd_b_wire;

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/Mul.py:46
  // @update
  // def up_mul_send():
  //   s.out.msg @= s.opd_a_wire * s.opd_b_wire
  //   s.in_.rdy @= s.out.rdy
  //   s.out.val @= s.in_.val
  
  always_comb begin : up_mul_send
    out__msg = opd_a_wire * opd_b_wire;
    in___rdy = out__rdy;
    out__val = in___val;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/Mul.py:37
  // @update
  // def up_opd_wires():
  //   if s.in_.val:
  //     s.opd_a_wire @= s.in_.msg.opd_a
  //     s.opd_b_wire @= s.in_.msg.opd_b
  //   else:
  //     s.opd_a_wire @= 0
  //     s.opd_b_wire @= 0
  
  always_comb begin : up_opd_wires
    if ( in___val ) begin
      opd_a_wire = in___msg.opd_a;
      opd_b_wire = in___msg.opd_b;
    end
    else begin
      opd_a_wire = 32'd0;
      opd_b_wire = 32'd0;
    end
  end

endmodule


// PyMTL Component RecurInitUnit Definition
// At /work/global/pp482/cgra/src/cgra/RecurInitUnit.py

module RecurInitUnit_noparam
(
  input  logic [0:0] cfg_reset ,
  input  logic [0:0] clk ,
  input  logic [0:0] is_calc ,
  input  logic [0:0] out_rdy ,
  output logic [0:0] out_val ,
  input  logic [0:0] reset 
);
  logic [0:0] fired;

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/RecurInitUnit.py:41
  // s.out_val //= lambda: ~s.fired
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_fu_riu_out_val
    out_val = ~fired;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/RecurInitUnit.py:31
  // @update_ff
  // def riu_fired():
  //   if s.reset:
  //     s.fired <<= 0
  //   else:
  //     if s.cfg_reset:
  //       s.fired <<= 0
  //     elif ~s.fired & s.is_calc:
  //       s.fired <<= s.out_val & s.out_rdy
  
  always_ff @(posedge clk) begin : riu_fired
    if ( reset ) begin
      fired <= 1'd0;
    end
    else if ( cfg_reset ) begin
      fired <= 1'd0;
    end
    else if ( ( ~fired ) & is_calc ) begin
      fired <= out_val & out_rdy;
    end
  end

endmodule


// PyMTL Component FunctUnit Definition
// Full name: FunctUnit__xcel_params_CGRAParams: base_addr_bound:16384, base_addr_register:0, base_addr_scratchpad:256, cfg_nwords:1, cfg_type:<class 'pymtl3.datatypes.bits_import.Bits32'>, data_width:32, enable_FP:True, me_cfg_type:<class 'types.MEConfigMsg_8x8'>, mul_cycles:0, ncols:8, nrows:8, nspads:4, num_remote_masters:4, pe_cfg_type:<class 'types.PEConfigMsg_8x8'>, remote_master_addr_width:28, remote_master_data_width_factor:1, rf_nregs:2, spad_data_width:32, spad_mask_size:0, spad_num_entries:1024, trace_verbosity:0
// At /work/global/pp482/cgra/src/cgra/FunctUnit.py

module FunctUnit__e7b85fc84228c577
(
  input  PEConfigMsg_8x8__69ed92dd9fa67f76 cfg ,
  input  logic [0:0] cfg_reset ,
  input  logic [0:0] clk ,
  input  logic [0:0] is_calc ,
  input  logic [0:0] is_faking_opA ,
  input  logic [0:0] is_faking_opB ,
  output logic [0:0] is_occupied ,
  output logic [0:0] is_opd_bool_true ,
  output logic [0:0] out_go ,
  input  logic [0:0] reset ,
  input CgraFUMsg_32__opd_a_32__opd_b_32__opd_rf_32 in___msg  ,
  output logic [0:0] in___rdy  ,
  input logic [0:0] in___val  ,
  output logic [31:0] out__msg  ,
  input logic [0:0] out__rdy  ,
  output logic [0:0] out__val  
);
  logic [3:0] alu_fn;
  logic [31:0] alu_opd_a;
  logic [31:0] alu_opd_b;
  logic [2:0] fpu_fn;
  logic [0:0] is_fp_op;
  logic [0:0] is_long_latency_op;
  logic [0:0] is_phi_init;
  logic [31:0] mul_opd_a;
  logic [31:0] mul_opd_b;
  //-------------------------------------------------------------
  // Component alu
  //-------------------------------------------------------------

  logic [0:0] alu__clk;
  logic [3:0] alu__fn;
  logic [31:0] alu__in0;
  logic [31:0] alu__in1;
  logic [31:0] alu__out;
  logic [0:0] alu__reset;

  Alu__Type_Bits32 alu
  (
    .clk( alu__clk ),
    .fn( alu__fn ),
    .in0( alu__in0 ),
    .in1( alu__in1 ),
    .out( alu__out ),
    .reset( alu__reset )
  );

  //-------------------------------------------------------------
  // End of component alu
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component fpu
  //-------------------------------------------------------------

  logic [0:0] fpu__clk;
  logic [2:0] fpu__fn;
  logic [31:0] fpu__in0;
  logic [31:0] fpu__in1;
  logic [31:0] fpu__in2;
  logic [31:0] fpu__out;
  logic [0:0] fpu__reset;

  Fpu__Type_Bits32__is_enabled_True fpu
  (
    .clk( fpu__clk ),
    .fn( fpu__fn ),
    .in0( fpu__in0 ),
    .in1( fpu__in1 ),
    .in2( fpu__in2 ),
    .out( fpu__out ),
    .reset( fpu__reset )
  );

  //-------------------------------------------------------------
  // End of component fpu
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component mul
  //-------------------------------------------------------------

  logic [0:0] mul__clk;
  logic [0:0] mul__reset;
  CgraMulMsg_32__opd_a_32__opd_b_32 mul__in___msg;
  logic [0:0] mul__in___rdy;
  logic [0:0] mul__in___val;
  logic [31:0] mul__out__msg;
  logic [0:0] mul__out__rdy;
  logic [0:0] mul__out__val;

  Mul__OpdType_Bits32 mul
  (
    .clk( mul__clk ),
    .reset( mul__reset ),
    .in___msg( mul__in___msg ),
    .in___rdy( mul__in___rdy ),
    .in___val( mul__in___val ),
    .out__msg( mul__out__msg ),
    .out__rdy( mul__out__rdy ),
    .out__val( mul__out__val )
  );

  //-------------------------------------------------------------
  // End of component mul
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component riu
  //-------------------------------------------------------------

  logic [0:0] riu__cfg_reset;
  logic [0:0] riu__clk;
  logic [0:0] riu__is_calc;
  logic [0:0] riu__out_rdy;
  logic [0:0] riu__out_val;
  logic [0:0] riu__reset;

  RecurInitUnit_noparam riu
  (
    .cfg_reset( riu__cfg_reset ),
    .clk( riu__clk ),
    .is_calc( riu__is_calc ),
    .out_rdy( riu__out_rdy ),
    .out_val( riu__out_val ),
    .reset( riu__reset )
  );

  //-------------------------------------------------------------
  // End of component riu
  //-------------------------------------------------------------

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/FunctUnit.py:255
  // s.is_occupied //= lambda: s.in_.val & s.in_.rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_fu_is_occupied
    is_occupied = in___val & in___rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/FunctUnit.py:133
  // s.is_opd_bool_true //= lambda: s.in_.msg.opd_b != 0
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_fu_is_opd_bool_true
    is_opd_bool_true = in___msg.opd_b != 32'd0;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/FunctUnit.py:208
  // s.mul.in_.val //= lambda: s.is_long_latency_op & s.in_.val & s.is_calc & ~s.cfg_reset
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_fu_mul_in__val
    mul__in___val = ( ( is_long_latency_op & in___val ) & is_calc ) & ( ~cfg_reset );
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/FunctUnit.py:209
  // s.mul.out.rdy //= lambda: s.is_long_latency_op & s.out.rdy & s.is_calc & ~s.cfg_reset
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_fu_mul_out_rdy
    mul__out__rdy = ( ( is_long_latency_op & out__rdy ) & is_calc ) & ( ~cfg_reset );
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/FunctUnit.py:252
  // s.out_go //= lambda: s.out.val & s.out.rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_fu_out_go
    out_go = out__val & out__rdy;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/FunctUnit.py:77
  // @update
  // def fu_gen_alu_fn():
  //   if s.cfg.opcode == CFG.OP_B_TYPE:
  //     # ALU copies src_data to the output
  //     s.alu_fn @= AluOp.CP0
  //   else:
  //     s.alu_fn @= s.cfg.func[0:4]
  //     if s.cfg.func[4]:
  //       s.alu_fn @= AluOp.NOP
  //       if (s.cfg.func == CFG.MAC) | (s.cfg.func == CFG.MAD):
  //         s.alu_fn @= AluOp.ADD
  //       if (s.cfg.func == CFG.PHI) & (~s.riu.out_val | ~s.is_phi_init):
  //         if ~s.is_faking_opA & s.is_faking_opB:
  //           s.alu_fn @= AluOp.CP0
  //         if s.is_faking_opA & ~s.is_faking_opB:
  //           s.alu_fn @= AluOp.CP1
  
  always_comb begin : fu_gen_alu_fn
    if ( cfg.opcode == 1'd1 ) begin
      alu_fn = 4'd0;
    end
    else begin
      alu_fn = cfg.func[3'd3:3'd0];
      if ( cfg.func[3'd4] ) begin
        alu_fn = 4'd15;
        if ( ( cfg.func == 6'd28 ) | ( cfg.func == 6'd29 ) ) begin
          alu_fn = 4'd2;
        end
        if ( ( cfg.func == 6'd30 ) & ( ( ~riu__out_val ) | ( ~is_phi_init ) ) ) begin
          if ( ( ~is_faking_opA ) & is_faking_opB ) begin
            alu_fn = 4'd0;
          end
          if ( is_faking_opA & ( ~is_faking_opB ) ) begin
            alu_fn = 4'd1;
          end
        end
      end
    end
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/FunctUnit.py:142
  // @update
  // def fu_gen_alu_inputs():
  //   s.alu_opd_a @= s.in_.msg.opd_a
  //   s.alu_opd_b @= s.in_.msg.opd_b
  //   if s.cfg.opcode == CFG.OP_Q_TYPE:
  //     if (s.cfg.func == CFG.MUL) | (s.cfg.func == CFG.NOP):
  //       s.alu_opd_a @= 0
  //       s.alu_opd_b @= 0
  //     if s.cfg.func == CFG.MAC:
  //       s.alu_opd_a @= s.mul.out.msg
  //       s.alu_opd_b @= s.in_.msg.opd_rf
  //     if s.cfg.func == CFG.MAD:
  //       s.alu_opd_a @= s.mul.out.msg
  //       s.alu_opd_b @= s.in_.msg.opd_b
  
  always_comb begin : fu_gen_alu_inputs
    alu_opd_a = in___msg.opd_a;
    alu_opd_b = in___msg.opd_b;
    if ( cfg.opcode == 1'd0 ) begin
      if ( ( cfg.func == 6'd15 ) | ( cfg.func == 6'd31 ) ) begin
        alu_opd_a = 32'd0;
        alu_opd_b = 32'd0;
      end
      if ( cfg.func == 6'd28 ) begin
        alu_opd_a = mul__out__msg;
        alu_opd_b = in___msg.opd_rf;
      end
      if ( cfg.func == 6'd29 ) begin
        alu_opd_a = mul__out__msg;
        alu_opd_b = in___msg.opd_b;
      end
    end
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/FunctUnit.py:94
  // @update
  // def fu_gen_fpu_fn():
  //   s.fpu_fn @= FpuOp.NOP
  //   if s.cfg.opcode == CFG.OP_Q_TYPE:
  //     if s.cfg.func == CFG.FADD:
  //       s.fpu_fn @= FpuOp.ADD
  //     if s.cfg.func == CFG.FSUB:
  //       s.fpu_fn @= FpuOp.SUB
  //     if s.cfg.func == CFG.FMUL:
  //       s.fpu_fn @= FpuOp.MUL
  //     if s.cfg.func == CFG.FMAD:
  //       s.fpu_fn @= FpuOp.MAD
  
  always_comb begin : fu_gen_fpu_fn
    fpu_fn = 3'd7;
    if ( cfg.opcode == 1'd0 ) begin
      if ( cfg.func == 6'd16 ) begin
        fpu_fn = 3'd0;
      end
      if ( cfg.func == 6'd17 ) begin
        fpu_fn = 3'd1;
      end
      if ( cfg.func == 6'd18 ) begin
        fpu_fn = 3'd2;
      end
      if ( cfg.func == 6'd19 ) begin
        fpu_fn = 3'd3;
      end
    end
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/FunctUnit.py:215
  // @update
  // def fu_gen_input_rdy():
  //   s.in_.rdy @= 0
  //   if s.is_calc & ~s.cfg_reset:
  //     s.in_.rdy @= s.out.rdy
  //     if s.cfg.opcode == CFG.OP_Q_TYPE:
  //       if s.is_long_latency_op:
  //         s.in_.rdy @= s.mul.in_.rdy
  //       if s.is_phi_init & s.riu.out_val:
  //         s.in_.rdy @= 0
  //       if s.cfg.func == CFG.NOP:
  //         s.in_.rdy @= 0
  
  always_comb begin : fu_gen_input_rdy
    in___rdy = 1'd0;
    if ( is_calc & ( ~cfg_reset ) ) begin
      in___rdy = out__rdy;
      if ( cfg.opcode == 1'd0 ) begin
        if ( is_long_latency_op ) begin
          in___rdy = mul__in___rdy;
        end
        if ( is_phi_init & riu__out_val ) begin
          in___rdy = 1'd0;
        end
        if ( cfg.func == 6'd31 ) begin
          in___rdy = 1'd0;
        end
      end
    end
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/FunctUnit.py:107
  // @update
  // def fu_gen_is_fpu_op():
  //   s.is_fp_op @= 0
  //   if s.cfg.opcode == CFG.OP_Q_TYPE:
  //     if s.cfg.func == CFG.FADD:
  //       s.is_fp_op @= 1
  //     if s.cfg.func == CFG.FSUB:
  //       s.is_fp_op @= 1
  //     if s.cfg.func == CFG.FMUL:
  //       s.is_fp_op @= 1
  //     if s.cfg.func == CFG.FMAD:
  //       s.is_fp_op @= 1
  
  always_comb begin : fu_gen_is_fpu_op
    is_fp_op = 1'd0;
    if ( cfg.opcode == 1'd0 ) begin
      if ( cfg.func == 6'd16 ) begin
        is_fp_op = 1'd1;
      end
      if ( cfg.func == 6'd17 ) begin
        is_fp_op = 1'd1;
      end
      if ( cfg.func == 6'd18 ) begin
        is_fp_op = 1'd1;
      end
      if ( cfg.func == 6'd19 ) begin
        is_fp_op = 1'd1;
      end
    end
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/FunctUnit.py:157
  // @update
  // def fu_gen_mul_inputs():
  //   s.mul_opd_a @= 0
  //   s.mul_opd_b @= 0
  //   if s.cfg.opcode == CFG.OP_Q_TYPE:
  //     if (s.cfg.func == CFG.MUL) | (s.cfg.func == CFG.MAC):
  //       s.mul_opd_a @= s.in_.msg.opd_a
  //       s.mul_opd_b @= s.in_.msg.opd_b
  //     if s.cfg.func == CFG.MAD:
  //       s.mul_opd_a @= s.in_.msg.opd_a
  //       s.mul_opd_b @= s.in_.msg.opd_rf
  
  always_comb begin : fu_gen_mul_inputs
    mul_opd_a = 32'd0;
    mul_opd_b = 32'd0;
    if ( cfg.opcode == 1'd0 ) begin
      if ( ( cfg.func == 6'd15 ) | ( cfg.func == 6'd28 ) ) begin
        mul_opd_a = in___msg.opd_a;
        mul_opd_b = in___msg.opd_b;
      end
      if ( cfg.func == 6'd29 ) begin
        mul_opd_a = in___msg.opd_a;
        mul_opd_b = in___msg.opd_rf;
      end
    end
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/FunctUnit.py:228
  // @update
  // def fu_gen_output_msg():
  //   s.out.msg @= s.alu.out
  //   if s.cfg.opcode == CFG.OP_Q_TYPE:
  //     if s.cfg.func == CFG.MUL:
  //       s.out.msg @= s.mul.out.msg
  //     if s.is_phi_init & s.riu.out_val:
  //       s.out.msg @= s.in_.msg.opd_rf
  //     if s.is_fp_op:
  //       s.out.msg @= s.fpu.out
  
  always_comb begin : fu_gen_output_msg
    out__msg = alu__out;
    if ( cfg.opcode == 1'd0 ) begin
      if ( cfg.func == 6'd15 ) begin
        out__msg = mul__out__msg;
      end
      if ( is_phi_init & riu__out_val ) begin
        out__msg = in___msg.opd_rf;
      end
      if ( is_fp_op ) begin
        out__msg = fpu__out;
      end
    end
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/FunctUnit.py:239
  // @update
  // def fu_gen_output_val():
  //   s.out.val @= 0
  //   if s.is_calc & ~s.cfg_reset:
  //     s.out.val @= s.in_.val
  //     if s.cfg.opcode == CFG.OP_Q_TYPE:
  //       if s.is_long_latency_op:
  //         s.out.val @= s.mul.out.val
  //       if s.is_phi_init & s.riu.out_val:
  //         s.out.val @= s.riu.out_val
  //       if s.cfg.func == CFG.NOP:
  //         s.out.val @= 0
  
  always_comb begin : fu_gen_output_val
    out__val = 1'd0;
    if ( is_calc & ( ~cfg_reset ) ) begin
      out__val = in___val;
      if ( cfg.opcode == 1'd0 ) begin
        if ( is_long_latency_op ) begin
          out__val = mul__out__val;
        end
        if ( is_phi_init & riu__out_val ) begin
          out__val = riu__out_val;
        end
        if ( cfg.func == 6'd31 ) begin
          out__val = 1'd0;
        end
      end
    end
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/FunctUnit.py:181
  // @update
  // def fu_is_long_lat_op():
  //   s.is_long_latency_op @= 0
  //   if s.cfg.opcode == CFG.OP_Q_TYPE:
  //     if s.cfg.func == CFG.MUL:
  //       s.is_long_latency_op @= 1
  //     if s.cfg.func == CFG.MAC:
  //       s.is_long_latency_op @= 1
  //     if s.cfg.func == CFG.MAD:
  //       s.is_long_latency_op @= 1
  
  always_comb begin : fu_is_long_lat_op
    is_long_latency_op = 1'd0;
    if ( cfg.opcode == 1'd0 ) begin
      if ( cfg.func == 6'd15 ) begin
        is_long_latency_op = 1'd1;
      end
      if ( cfg.func == 6'd28 ) begin
        is_long_latency_op = 1'd1;
      end
      if ( cfg.func == 6'd29 ) begin
        is_long_latency_op = 1'd1;
      end
    end
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/FunctUnit.py:71
  // @update
  // def fu_is_phi_init():
  //   s.is_phi_init @= (s.cfg.func == CFG.PHI) & \
  //                    ((s.cfg.src_opd_a == CFG.SRC_SELF) | \
  //                     (s.cfg.src_opd_b == CFG.SRC_SELF))
  
  always_comb begin : fu_is_phi_init
    is_phi_init = ( cfg.func == 6'd30 ) & ( ( cfg.src_opd_a == 3'd4 ) | ( cfg.src_opd_b == 3'd4 ) );
  end

  assign alu__clk = clk;
  assign alu__reset = reset;
  assign mul__clk = clk;
  assign mul__reset = reset;
  assign fpu__clk = clk;
  assign fpu__reset = reset;
  assign riu__clk = clk;
  assign riu__reset = reset;
  assign riu__out_rdy = out__rdy;
  assign riu__cfg_reset = cfg_reset;
  assign riu__is_calc = is_calc;
  assign alu__fn = alu_fn;
  assign alu__in0 = alu_opd_a;
  assign alu__in1 = alu_opd_b;
  assign mul__in___msg.opd_a = mul_opd_a;
  assign mul__in___msg.opd_b = mul_opd_b;
  assign fpu__fn = fpu_fn;
  assign fpu__in0 = alu_opd_a;
  assign fpu__in1 = alu_opd_b;
  assign fpu__in2 = in___msg.opd_rf;

endmodule


// PyMTL Component SwitchBoxCtrl Definition
// Full name: SwitchBoxCtrl__xcel_params_CGRAParams: base_addr_bound:16384, base_addr_register:0, base_addr_scratchpad:256, cfg_nwords:1, cfg_type:<class 'pymtl3.datatypes.bits_import.Bits32'>, data_width:32, enable_FP:True, me_cfg_type:<class 'types.MEConfigMsg_8x8'>, mul_cycles:0, ncols:8, nrows:8, nspads:4, num_remote_masters:4, pe_cfg_type:<class 'types.PEConfigMsg_8x8'>, remote_master_addr_width:28, remote_master_data_width_factor:1, rf_nregs:2, spad_data_width:32, spad_mask_size:0, spad_num_entries:1024, trace_verbosity:0
// At /work/global/pp482/cgra/src/cgra/SwitchBoxCtrl.py

module SwitchBoxCtrl__e7b85fc84228c577
(
  input  PEConfigMsg_8x8__69ed92dd9fa67f76 cfg ,
  input  logic [0:0] cfg_reset ,
  input  logic [0:0] clk ,
  input  logic [0:0] fu_operands_rdy ,
  output logic [0:0] fu_operands_val ,
  output logic [5:0] in_adapter_mask [0:4],
  output logic [0:0] in_adapter_mask_en [0:4],
  output logic [0:0] is_faking_opA ,
  output logic [0:0] is_faking_opB ,
  output logic [0:0] is_opA_rf ,
  output logic [0:0] is_opB_rf ,
  input  logic [0:0] is_opd_bool_true ,
  output logic [1:0] opA_mux_sel ,
  output logic [0:0] opA_rdy ,
  input  logic [0:0] opA_val ,
  output logic [1:0] opB_mux_sel ,
  output logic [0:0] opB_rdy ,
  input  logic [0:0] opB_val ,
  output logic [2:0] out_mux_sel [0:3],
  input  logic [0:0] reset 
);
  logic [0:0] cfg_reset_r;
  logic [2:0] false_dir;
  logic [0:0] is_branch;
  logic [3:0] is_false_dir;
  logic [0:0] is_phi;
  logic [3:0] is_true_dir;
  logic [2:0] non_br_NSWE_sel [0:3];
  logic [2:0] out_mux_src [0:3];
  logic [2:0] true_dir;

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/SwitchBoxCtrl.py:140
  // @update
  // def SB_opA_rdy():
  //   if s.is_opA_rf:
  //     s.opA_rdy @= 1
  //   else:
  //     s.opA_rdy @= s.fu_operands_rdy
  //     if ~s.is_opA_rf & ~s.is_opB_rf & ~s.is_phi:
  //       s.opA_rdy @= s.fu_operands_rdy & s.opB_val
  
  always_comb begin : SB_opA_rdy
    if ( is_opA_rf ) begin
      opA_rdy = 1'd1;
    end
    else begin
      opA_rdy = fu_operands_rdy;
      if ( ( ( ~is_opA_rf ) & ( ~is_opB_rf ) ) & ( ~is_phi ) ) begin
        opA_rdy = fu_operands_rdy & opB_val;
      end
    end
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/SwitchBoxCtrl.py:149
  // @update
  // def SB_opB_rdy():
  //   if s.is_opB_rf:
  //     s.opB_rdy @= 1
  //   else:
  //     s.opB_rdy @= s.fu_operands_rdy
  //     if ~s.is_opA_rf & ~s.is_opB_rf & ~s.is_phi:
  //       s.opB_rdy @= s.fu_operands_rdy & s.opA_val
  
  always_comb begin : SB_opB_rdy
    if ( is_opB_rf ) begin
      opB_rdy = 1'd1;
    end
    else begin
      opB_rdy = fu_operands_rdy;
      if ( ( ( ~is_opA_rf ) & ( ~is_opB_rf ) ) & ( ~is_phi ) ) begin
        opB_rdy = fu_operands_rdy & opA_val;
      end
    end
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/SwitchBoxCtrl.py:86
  // s.is_branch //= lambda: s.cfg.opcode == CFG.OP_B_TYPE
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_sb_ctrl_is_branch
    is_branch = cfg.opcode == 1'd1;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/SwitchBoxCtrl.py:131
  // s.is_opA_rf //= lambda: s.cfg.src_opd_a == CFG.SRC_SELF
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_sb_ctrl_is_opA_rf
    is_opA_rf = cfg.src_opd_a == 3'd4;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/SwitchBoxCtrl.py:132
  // s.is_opB_rf //= lambda: s.cfg.src_opd_b == CFG.SRC_SELF
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_sb_ctrl_is_opB_rf
    is_opB_rf = cfg.src_opd_b == 3'd4;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/SwitchBoxCtrl.py:138
  // s.is_phi //= lambda: (s.cfg.opcode == CFG.OP_Q_TYPE) & (s.cfg.func == CFG.PHI)
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_sb_ctrl_is_phi
    is_phi = ( cfg.opcode == 1'd0 ) & ( cfg.func == 6'd30 );
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/SwitchBoxCtrl.py:134
  // s.opA_mux_sel //= lambda: s.cfg.src_opd_a[0:2]
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_sb_ctrl_opA_mux_sel
    opA_mux_sel = cfg.src_opd_a[2'd1:2'd0];
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/SwitchBoxCtrl.py:135
  // s.opB_mux_sel //= lambda: s.cfg.src_opd_b[0:2]
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_sb_ctrl_opB_mux_sel
    opB_mux_sel = cfg.src_opd_b[2'd1:2'd0];
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/SwitchBoxCtrl.py:162
  // @update
  // def sb_fu_operand_val():
  //   if ~s.is_branch & (s.cfg.func == CFG.PHI):
  //     # A Phi node which dynamically forwards the valid input
  //     if ~s.is_opA_rf & ~s.is_opB_rf:
  //       # Forwards the one that becomes valid first
  //       s.fu_operands_val @= s.opA_val | s.opB_val
  //     if ~s.is_opA_rf & s.is_opB_rf:
  //       s.fu_operands_val @= s.opA_val
  //     if s.is_opA_rf & ~s.is_opB_rf:
  //       s.fu_operands_val @= s.opB_val
  //     if s.is_opA_rf & s.is_opB_rf:
  //       # Phi node with RF as both inputs is undef. Bitstream gen should
  //       # complain about this.
  //       s.fu_operands_val @= 0
  //   else:
  //     # A regular non-phi operation
  //     if ~s.is_opA_rf & ~s.is_opB_rf:
  //       s.fu_operands_val @= s.opA_val & s.opB_val
  //     if ~s.is_opA_rf & s.is_opB_rf:
  //       s.fu_operands_val @= s.opA_val
  //     if s.is_opA_rf & ~s.is_opB_rf:
  //       s.fu_operands_val @= s.opB_val
  //     if s.is_opA_rf & s.is_opB_rf:
  //       # NOTE: Here we are assuming the FU is _blocking_. If the FU is
  //       # pipelined then we could have a RAW hazard...
  //       s.fu_operands_val @= 1
  
  always_comb begin : sb_fu_operand_val
    if ( ( ~is_branch ) & ( cfg.func == 6'd30 ) ) begin
      if ( ( ~is_opA_rf ) & ( ~is_opB_rf ) ) begin
        fu_operands_val = opA_val | opB_val;
      end
      if ( ( ~is_opA_rf ) & is_opB_rf ) begin
        fu_operands_val = opA_val;
      end
      if ( is_opA_rf & ( ~is_opB_rf ) ) begin
        fu_operands_val = opB_val;
      end
      if ( is_opA_rf & is_opB_rf ) begin
        fu_operands_val = 1'd0;
      end
    end
    else begin
      if ( ( ~is_opA_rf ) & ( ~is_opB_rf ) ) begin
        fu_operands_val = opA_val & opB_val;
      end
      if ( ( ~is_opA_rf ) & is_opB_rf ) begin
        fu_operands_val = opA_val;
      end
      if ( is_opA_rf & ( ~is_opB_rf ) ) begin
        fu_operands_val = opB_val;
      end
      if ( is_opA_rf & is_opB_rf ) begin
        fu_operands_val = 1'd1;
      end
    end
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/SwitchBoxCtrl.py:66
  // @update
  // def sb_gen_adapter_masks():
  //   for i in range(p.sb_num_in):
  //     for j in range(4):
  //       # Generate mask for NSWE output muxes
  //       s.in_adapter_mask[i][j] @= i != s.out_mux_src[j]
  //     # Generate mask for opA and opB output muxes
  //     s.in_adapter_mask[i][OMUX.OPA] @= i != concat( b1(0), s.cfg.src_opd_a[0:2] )
  //     s.in_adapter_mask[i][OMUX.OPB] @= i != concat( b1(0), s.cfg.src_opd_b[0:2] )
  
  always_comb begin : sb_gen_adapter_masks
    for ( int unsigned i = 1'd0; i < 3'd5; i += 1'd1 ) begin
      for ( int unsigned j = 1'd0; j < 3'd4; j += 1'd1 )
        in_adapter_mask[3'(i)][3'(j)] = 3'(i) != out_mux_src[2'(j)];
      in_adapter_mask[3'(i)][3'd4] = 3'(i) != { 1'd0, cfg.src_opd_a[2'd1:2'd0] };
      in_adapter_mask[3'(i)][3'd5] = 3'(i) != { 1'd0, cfg.src_opd_b[2'd1:2'd0] };
    end
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/SwitchBoxCtrl.py:97
  // @update
  // def sb_gen_br_bool_dirs():
  //   for i in range(4):
  //     s.is_true_dir[i]  @= s.true_dir  == i
  //     s.is_false_dir[i] @= s.false_dir == i
  
  always_comb begin : sb_gen_br_bool_dirs
    for ( int unsigned i = 1'd0; i < 3'd4; i += 1'd1 ) begin
      is_true_dir[2'(i)] = true_dir == 3'(i);
      is_false_dir[2'(i)] = false_dir == 3'(i);
    end
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/SwitchBoxCtrl.py:190
  // @update
  // def sb_gen_is_faking_signals():
  //   s.is_faking_opA @= 0
  //   s.is_faking_opB @= 0
  //   if ~s.is_branch & (s.cfg.func == CFG.PHI):
  //     if ~s.is_opA_rf & ~s.is_opB_rf:
  //       # Forwards the one that becomes valid the first
  //       s.is_faking_opA @= ~s.opA_val
  //       s.is_faking_opB @= ~s.opB_val
  //     if ~s.is_opA_rf & s.is_opB_rf:
  //       s.is_faking_opA @= 0
  //       s.is_faking_opB @= 1
  //     if s.is_opA_rf & ~s.is_opB_rf:
  //       s.is_faking_opA @= 1
  //       s.is_faking_opB @= 0
  
  always_comb begin : sb_gen_is_faking_signals
    is_faking_opA = 1'd0;
    is_faking_opB = 1'd0;
    if ( ( ~is_branch ) & ( cfg.func == 6'd30 ) ) begin
      if ( ( ~is_opA_rf ) & ( ~is_opB_rf ) ) begin
        is_faking_opA = ~opA_val;
        is_faking_opB = ~opB_val;
      end
      if ( ( ~is_opA_rf ) & is_opB_rf ) begin
        is_faking_opA = 1'd0;
        is_faking_opB = 1'd1;
      end
      if ( is_opA_rf & ( ~is_opB_rf ) ) begin
        is_faking_opA = 1'd1;
        is_faking_opB = 1'd0;
      end
    end
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/SwitchBoxCtrl.py:117
  // @update
  // def sb_output_br_NSWE_mux_sel():
  //   for i in range(4):
  //     if s.is_branch & ((s.is_true_dir[i]  & ~s.is_opd_bool_true) | \
  //                       (s.is_false_dir[i] &  s.is_opd_bool_true)):
  //       s.out_mux_sel[i] @= CFG.OUT_SRC_NONE
  //     else:
  //       s.out_mux_sel[i] @= s.non_br_NSWE_sel[i]
  
  always_comb begin : sb_output_br_NSWE_mux_sel
    for ( int unsigned i = 1'd0; i < 3'd4; i += 1'd1 )
      if ( is_branch & ( ( is_true_dir[2'(i)] & ( ~is_opd_bool_true ) ) | ( is_false_dir[2'(i)] & is_opd_bool_true ) ) ) begin
        out_mux_sel[2'(i)] = 3'd5;
      end
      else
        out_mux_sel[2'(i)] = non_br_NSWE_sel[2'(i)];
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/SwitchBoxCtrl.py:108
  // @update
  // def sb_output_non_br_NSWE_mux_sel():
  //   for i in range(4):
  //     if s.out_mux_src[i] <= CFG.OUT_SRC_EOL:
  //       s.non_br_NSWE_sel[i] @= s.out_mux_src[i]
  //     else:
  //       s.non_br_NSWE_sel[i] @= CFG.OUT_SRC_NONE
  
  always_comb begin : sb_output_non_br_NSWE_mux_sel
    for ( int unsigned i = 1'd0; i < 3'd4; i += 1'd1 )
      if ( out_mux_src[2'(i)] <= 3'd5 ) begin
        non_br_NSWE_sel[2'(i)] = out_mux_src[2'(i)];
      end
      else
        non_br_NSWE_sel[2'(i)] = 3'd5;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/SwitchBoxCtrl.py:55
  // @update_ff
  // def sb_ctrl_register_cfg_reset():
  //   s.cfg_reset_r <<= s.cfg_reset
  
  always_ff @(posedge clk) begin : sb_ctrl_register_cfg_reset
    cfg_reset_r <= cfg_reset;
  end

  assign out_mux_src[0] = cfg.out_n_src;
  assign out_mux_src[1] = cfg.out_s_src;
  assign out_mux_src[2] = cfg.out_w_src;
  assign out_mux_src[3] = cfg.out_e_src;
  assign in_adapter_mask_en[0] = cfg_reset_r;
  assign in_adapter_mask_en[1] = cfg_reset_r;
  assign in_adapter_mask_en[2] = cfg_reset_r;
  assign in_adapter_mask_en[3] = cfg_reset_r;
  assign in_adapter_mask_en[4] = cfg_reset_r;
  assign true_dir = cfg.func[2:0];
  assign false_dir = cfg.func[5:3];

endmodule


// PyMTL Component EagerMultiDstAdapter Definition
// At /work/global/pp482/cgra/src/cgra/EagerMultiDstAdapter.py

module EagerMultiDstAdapter__Type_Bits32__noutputs_6
(
  input  logic [0:0] cfg_reset ,
  input  logic [0:0] clk ,
  input  logic [0:0] is_calc ,
  input  logic [5:0] mask ,
  input  logic [0:0] mask_en ,
  input  logic [0:0] reset ,
  input logic [31:0] in___msg  ,
  output logic [0:0] in___rdy  ,
  input logic [0:0] in___val  ,
  output logic [31:0] out__msg [0:5] ,
  input logic [0:0] out__rdy [0:5] ,
  output logic [0:0] out__val [0:5] 
);
  localparam logic [2:0] __const__noutputs_at_output_go  = 3'd6;
  localparam logic [2:0] __const__noutputs_at_output_val  = 3'd6;
  localparam logic [2:0] __const__noutputs_at_output_msg_data_gating  = 3'd6;
  logic [0:0] in_go;
  logic [0:0] is_safe_to_go;
  logic [5:0] mask_r;
  logic [5:0] out_go;
  logic [5:0] sent_r;

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/EagerMultiDstAdapter.py:79
  // s.in_.rdy //= lambda: s.is_safe_to_go & ((s.mask_r | s.sent_r | s.out_go) == s.full_output_mask)
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_sb_dpath_in_adapters_0__in__rdy
    in___rdy = is_safe_to_go & ( ( ( mask_r | sent_r ) | out_go ) == 6'd63 );
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/EagerMultiDstAdapter.py:35
  // s.in_go //= lambda: s.in_.val & s.in_.rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_sb_dpath_in_adapters_0__in_go
    in_go = in___val & in___rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/EagerMultiDstAdapter.py:77
  // s.is_safe_to_go //= lambda: s.is_calc & ~s.cfg_reset & ~s.mask_en
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_sb_dpath_in_adapters_0__is_safe_to_go
    is_safe_to_go = ( is_calc & ( ~cfg_reset ) ) & ( ~mask_en );
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/EagerMultiDstAdapter.py:39
  // @update
  // def output_go():
  //   for i in range(noutputs):
  //     s.out_go[i] @= s.out[i].val & s.out[i].rdy
  
  always_comb begin : output_go
    for ( int unsigned i = 1'd0; i < 3'( __const__noutputs_at_output_go ); i += 1'd1 )
      out_go[3'(i)] = out__val[3'(i)] & out__rdy[3'(i)];
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/EagerMultiDstAdapter.py:93
  // @update
  // def output_msg_data_gating():
  //   for i in range(noutputs):
  //     if s.mask_r[i]:
  //       s.out[i].msg @= 0
  //     else:
  //       s.out[i].msg @= s.in_.msg
  
  always_comb begin : output_msg_data_gating
    for ( int unsigned i = 1'd0; i < 3'( __const__noutputs_at_output_msg_data_gating ); i += 1'd1 )
      if ( mask_r[3'(i)] ) begin
        out__msg[3'(i)] = 32'd0;
      end
      else
        out__msg[3'(i)] = in___msg;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/EagerMultiDstAdapter.py:85
  // @update
  // def output_val():
  //   for i in range(noutputs):
  //     if s.mask_r[i] | s.sent_r[i]:
  //       s.out[i].val @= 0
  //     else:
  //       s.out[i].val @= s.in_.val & s.is_safe_to_go
  
  always_comb begin : output_val
    for ( int unsigned i = 1'd0; i < 3'( __const__noutputs_at_output_val ); i += 1'd1 )
      if ( mask_r[3'(i)] | sent_r[3'(i)] ) begin
        out__val[3'(i)] = 1'd0;
      end
      else
        out__val[3'(i)] = in___val & is_safe_to_go;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/EagerMultiDstAdapter.py:50
  // @update_ff
  // def mask_register():
  //   if s.reset:
  //     s.mask_r <<= 0
  //   else:
  //     if s.mask_en:
  //       s.mask_r <<= s.mask
  
  always_ff @(posedge clk) begin : mask_register
    if ( reset ) begin
      mask_r <= 6'd0;
    end
    else if ( mask_en ) begin
      mask_r <= mask;
    end
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/EagerMultiDstAdapter.py:60
  // @update_ff
  // def sent_register():
  //   if s.reset:
  //     s.sent_r <<= 0
  //   else:
  //     if s.in_go:
  //       s.sent_r <<= 0
  //     else:
  //       s.sent_r <<= s.sent_r | s.out_go
  
  always_ff @(posedge clk) begin : sent_register
    if ( reset ) begin
      sent_r <= 6'd0;
    end
    else if ( in_go ) begin
      sent_r <= 6'd0;
    end
    else
      sent_r <= sent_r | out_go;
  end

endmodule


// PyMTL Component ValRdyMux Definition
// At /work/global/pp482/cgra/src/misc/ValRdyMux.py

module ValRdyMux__Type_Bits32__ninputs_4
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  input  logic [1:0] sel ,
  input logic [31:0] in___msg [0:3] ,
  output logic [0:0] in___rdy [0:3] ,
  input logic [0:0] in___val [0:3] ,
  output logic [31:0] out__msg  ,
  input logic [0:0] out__rdy  ,
  output logic [0:0] out__val  
);
  localparam logic [2:0] __const__ninputs_at_valrdy_ifc_muxing  = 3'd4;

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/misc/ValRdyMux.py:28
  // @update
  // def valrdy_ifc_muxing():
  //   for i in range(ninputs):
  //     s.in_[i].rdy @= 1
  //   s.in_[s.sel].rdy @= s.out.rdy
  //   s.out.val @= s.in_[s.sel].val
  //   s.out.msg @= s.in_[s.sel].msg
  
  always_comb begin : valrdy_ifc_muxing
    for ( int unsigned i = 1'd0; i < 3'( __const__ninputs_at_valrdy_ifc_muxing ); i += 1'd1 )
      in___rdy[2'(i)] = 1'd1;
    in___rdy[sel] = out__rdy;
    out__val = in___val[sel];
    out__msg = in___msg[sel];
  end

endmodule


// PyMTL Component ValRdyMux Definition
// At /work/global/pp482/cgra/src/misc/ValRdyMux.py

module ValRdyMux__Type_Bits32__ninputs_6
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  input  logic [2:0] sel ,
  input logic [31:0] in___msg [0:5] ,
  output logic [0:0] in___rdy [0:5] ,
  input logic [0:0] in___val [0:5] ,
  output logic [31:0] out__msg  ,
  input logic [0:0] out__rdy  ,
  output logic [0:0] out__val  
);
  localparam logic [2:0] __const__ninputs_at_valrdy_ifc_muxing  = 3'd6;

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/misc/ValRdyMux.py:28
  // @update
  // def valrdy_ifc_muxing():
  //   for i in range(ninputs):
  //     s.in_[i].rdy @= 1
  //   s.in_[s.sel].rdy @= s.out.rdy
  //   s.out.val @= s.in_[s.sel].val
  //   s.out.msg @= s.in_[s.sel].msg
  
  always_comb begin : valrdy_ifc_muxing
    for ( int unsigned i = 1'd0; i < 3'( __const__ninputs_at_valrdy_ifc_muxing ); i += 1'd1 )
      in___rdy[3'(i)] = 1'd1;
    in___rdy[sel] = out__rdy;
    out__val = in___val[sel];
    out__msg = in___msg[sel];
  end

endmodule


// PyMTL Component SwitchBoxDpath Definition
// Full name: SwitchBoxDpath__xcel_params_CGRAParams: base_addr_bound:16384, base_addr_register:0, base_addr_scratchpad:256, cfg_nwords:1, cfg_type:<class 'pymtl3.datatypes.bits_import.Bits32'>, data_width:32, enable_FP:True, me_cfg_type:<class 'types.MEConfigMsg_8x8'>, mul_cycles:0, ncols:8, nrows:8, nspads:4, num_remote_masters:4, pe_cfg_type:<class 'types.PEConfigMsg_8x8'>, remote_master_addr_width:28, remote_master_data_width_factor:1, rf_nregs:2, spad_data_width:32, spad_mask_size:0, spad_num_entries:1024, trace_verbosity:0
// At /work/global/pp482/cgra/src/cgra/SwitchBoxDpath.py

module SwitchBoxDpath__e7b85fc84228c577
(
  input  logic [0:0] cfg_reset ,
  input  logic [0:0] clk ,
  output CgraFUMsg_32__opd_a_32__opd_b_32__opd_rf_32 fu_operands_msg ,
  input  logic [5:0] in_adapter_mask [0:4],
  input  logic [0:0] in_adapter_mask_en [0:4],
  input  logic [0:0] is_calc ,
  input  logic [0:0] is_opA_rf ,
  input  logic [0:0] is_opB_rf ,
  input  logic [1:0] opA_mux_sel ,
  input  logic [0:0] opA_rdy ,
  output logic [0:0] opA_val ,
  input  logic [1:0] opB_mux_sel ,
  input  logic [0:0] opB_rdy ,
  output logic [0:0] opB_val ,
  input  logic [2:0] out_mux_sel [0:3],
  input  logic [0:0] reset ,
  input  logic [31:0] rf_operand ,
  input logic [31:0] in___msg [0:4] ,
  output logic [0:0] in___rdy [0:4] ,
  input logic [0:0] in___val [0:4] ,
  output logic [31:0] out__msg [0:3] ,
  input logic [0:0] out__rdy [0:3] ,
  output logic [0:0] out__val [0:3] 
);
  //-------------------------------------------------------------
  // Component in_adapters[0:4]
  //-------------------------------------------------------------

  logic [0:0] in_adapters__cfg_reset [0:4];
  logic [0:0] in_adapters__clk [0:4];
  logic [0:0] in_adapters__is_calc [0:4];
  logic [5:0] in_adapters__mask [0:4];
  logic [0:0] in_adapters__mask_en [0:4];
  logic [0:0] in_adapters__reset [0:4];
  logic [31:0] in_adapters__in___msg [0:4];
  logic [0:0] in_adapters__in___rdy [0:4];
  logic [0:0] in_adapters__in___val [0:4];
  logic [31:0] in_adapters__out__msg [0:4][0:5];
  logic [0:0] in_adapters__out__rdy [0:4][0:5];
  logic [0:0] in_adapters__out__val [0:4][0:5];

  EagerMultiDstAdapter__Type_Bits32__noutputs_6 in_adapters__0
  (
    .cfg_reset( in_adapters__cfg_reset[0] ),
    .clk( in_adapters__clk[0] ),
    .is_calc( in_adapters__is_calc[0] ),
    .mask( in_adapters__mask[0] ),
    .mask_en( in_adapters__mask_en[0] ),
    .reset( in_adapters__reset[0] ),
    .in___msg( in_adapters__in___msg[0] ),
    .in___rdy( in_adapters__in___rdy[0] ),
    .in___val( in_adapters__in___val[0] ),
    .out__msg( in_adapters__out__msg[0] ),
    .out__rdy( in_adapters__out__rdy[0] ),
    .out__val( in_adapters__out__val[0] )
  );

  EagerMultiDstAdapter__Type_Bits32__noutputs_6 in_adapters__1
  (
    .cfg_reset( in_adapters__cfg_reset[1] ),
    .clk( in_adapters__clk[1] ),
    .is_calc( in_adapters__is_calc[1] ),
    .mask( in_adapters__mask[1] ),
    .mask_en( in_adapters__mask_en[1] ),
    .reset( in_adapters__reset[1] ),
    .in___msg( in_adapters__in___msg[1] ),
    .in___rdy( in_adapters__in___rdy[1] ),
    .in___val( in_adapters__in___val[1] ),
    .out__msg( in_adapters__out__msg[1] ),
    .out__rdy( in_adapters__out__rdy[1] ),
    .out__val( in_adapters__out__val[1] )
  );

  EagerMultiDstAdapter__Type_Bits32__noutputs_6 in_adapters__2
  (
    .cfg_reset( in_adapters__cfg_reset[2] ),
    .clk( in_adapters__clk[2] ),
    .is_calc( in_adapters__is_calc[2] ),
    .mask( in_adapters__mask[2] ),
    .mask_en( in_adapters__mask_en[2] ),
    .reset( in_adapters__reset[2] ),
    .in___msg( in_adapters__in___msg[2] ),
    .in___rdy( in_adapters__in___rdy[2] ),
    .in___val( in_adapters__in___val[2] ),
    .out__msg( in_adapters__out__msg[2] ),
    .out__rdy( in_adapters__out__rdy[2] ),
    .out__val( in_adapters__out__val[2] )
  );

  EagerMultiDstAdapter__Type_Bits32__noutputs_6 in_adapters__3
  (
    .cfg_reset( in_adapters__cfg_reset[3] ),
    .clk( in_adapters__clk[3] ),
    .is_calc( in_adapters__is_calc[3] ),
    .mask( in_adapters__mask[3] ),
    .mask_en( in_adapters__mask_en[3] ),
    .reset( in_adapters__reset[3] ),
    .in___msg( in_adapters__in___msg[3] ),
    .in___rdy( in_adapters__in___rdy[3] ),
    .in___val( in_adapters__in___val[3] ),
    .out__msg( in_adapters__out__msg[3] ),
    .out__rdy( in_adapters__out__rdy[3] ),
    .out__val( in_adapters__out__val[3] )
  );

  EagerMultiDstAdapter__Type_Bits32__noutputs_6 in_adapters__4
  (
    .cfg_reset( in_adapters__cfg_reset[4] ),
    .clk( in_adapters__clk[4] ),
    .is_calc( in_adapters__is_calc[4] ),
    .mask( in_adapters__mask[4] ),
    .mask_en( in_adapters__mask_en[4] ),
    .reset( in_adapters__reset[4] ),
    .in___msg( in_adapters__in___msg[4] ),
    .in___rdy( in_adapters__in___rdy[4] ),
    .in___val( in_adapters__in___val[4] ),
    .out__msg( in_adapters__out__msg[4] ),
    .out__rdy( in_adapters__out__rdy[4] ),
    .out__val( in_adapters__out__val[4] )
  );

  //-------------------------------------------------------------
  // End of component in_adapters[0:4]
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component opA_mux
  //-------------------------------------------------------------

  logic [0:0] opA_mux__clk;
  logic [0:0] opA_mux__reset;
  logic [1:0] opA_mux__sel;
  logic [31:0] opA_mux__in___msg [0:3];
  logic [0:0] opA_mux__in___rdy [0:3];
  logic [0:0] opA_mux__in___val [0:3];
  logic [31:0] opA_mux__out__msg;
  logic [0:0] opA_mux__out__rdy;
  logic [0:0] opA_mux__out__val;

  ValRdyMux__Type_Bits32__ninputs_4 opA_mux
  (
    .clk( opA_mux__clk ),
    .reset( opA_mux__reset ),
    .sel( opA_mux__sel ),
    .in___msg( opA_mux__in___msg ),
    .in___rdy( opA_mux__in___rdy ),
    .in___val( opA_mux__in___val ),
    .out__msg( opA_mux__out__msg ),
    .out__rdy( opA_mux__out__rdy ),
    .out__val( opA_mux__out__val )
  );

  //-------------------------------------------------------------
  // End of component opA_mux
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component opB_mux
  //-------------------------------------------------------------

  logic [0:0] opB_mux__clk;
  logic [0:0] opB_mux__reset;
  logic [1:0] opB_mux__sel;
  logic [31:0] opB_mux__in___msg [0:3];
  logic [0:0] opB_mux__in___rdy [0:3];
  logic [0:0] opB_mux__in___val [0:3];
  logic [31:0] opB_mux__out__msg;
  logic [0:0] opB_mux__out__rdy;
  logic [0:0] opB_mux__out__val;

  ValRdyMux__Type_Bits32__ninputs_4 opB_mux
  (
    .clk( opB_mux__clk ),
    .reset( opB_mux__reset ),
    .sel( opB_mux__sel ),
    .in___msg( opB_mux__in___msg ),
    .in___rdy( opB_mux__in___rdy ),
    .in___val( opB_mux__in___val ),
    .out__msg( opB_mux__out__msg ),
    .out__rdy( opB_mux__out__rdy ),
    .out__val( opB_mux__out__val )
  );

  //-------------------------------------------------------------
  // End of component opB_mux
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component out_muxes[0:3]
  //-------------------------------------------------------------

  logic [0:0] out_muxes__clk [0:3];
  logic [0:0] out_muxes__reset [0:3];
  logic [2:0] out_muxes__sel [0:3];
  logic [31:0] out_muxes__in___msg [0:3][0:5];
  logic [0:0] out_muxes__in___rdy [0:3][0:5];
  logic [0:0] out_muxes__in___val [0:3][0:5];
  logic [31:0] out_muxes__out__msg [0:3];
  logic [0:0] out_muxes__out__rdy [0:3];
  logic [0:0] out_muxes__out__val [0:3];

  ValRdyMux__Type_Bits32__ninputs_6 out_muxes__0
  (
    .clk( out_muxes__clk[0] ),
    .reset( out_muxes__reset[0] ),
    .sel( out_muxes__sel[0] ),
    .in___msg( out_muxes__in___msg[0] ),
    .in___rdy( out_muxes__in___rdy[0] ),
    .in___val( out_muxes__in___val[0] ),
    .out__msg( out_muxes__out__msg[0] ),
    .out__rdy( out_muxes__out__rdy[0] ),
    .out__val( out_muxes__out__val[0] )
  );

  ValRdyMux__Type_Bits32__ninputs_6 out_muxes__1
  (
    .clk( out_muxes__clk[1] ),
    .reset( out_muxes__reset[1] ),
    .sel( out_muxes__sel[1] ),
    .in___msg( out_muxes__in___msg[1] ),
    .in___rdy( out_muxes__in___rdy[1] ),
    .in___val( out_muxes__in___val[1] ),
    .out__msg( out_muxes__out__msg[1] ),
    .out__rdy( out_muxes__out__rdy[1] ),
    .out__val( out_muxes__out__val[1] )
  );

  ValRdyMux__Type_Bits32__ninputs_6 out_muxes__2
  (
    .clk( out_muxes__clk[2] ),
    .reset( out_muxes__reset[2] ),
    .sel( out_muxes__sel[2] ),
    .in___msg( out_muxes__in___msg[2] ),
    .in___rdy( out_muxes__in___rdy[2] ),
    .in___val( out_muxes__in___val[2] ),
    .out__msg( out_muxes__out__msg[2] ),
    .out__rdy( out_muxes__out__rdy[2] ),
    .out__val( out_muxes__out__val[2] )
  );

  ValRdyMux__Type_Bits32__ninputs_6 out_muxes__3
  (
    .clk( out_muxes__clk[3] ),
    .reset( out_muxes__reset[3] ),
    .sel( out_muxes__sel[3] ),
    .in___msg( out_muxes__in___msg[3] ),
    .in___rdy( out_muxes__in___rdy[3] ),
    .in___val( out_muxes__in___val[3] ),
    .out__msg( out_muxes__out__msg[3] ),
    .out__rdy( out_muxes__out__rdy[3] ),
    .out__val( out_muxes__out__val[3] )
  );

  //-------------------------------------------------------------
  // End of component out_muxes[0:3]
  //-------------------------------------------------------------

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/SwitchBoxDpath.py:96
  // s.fu_operands_msg.opd_a  //= lambda: s.rf_operand if s.is_opA_rf else s.opA_mux.out.msg
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_sb_dpath_fu_operands_msg_opd_a
    fu_operands_msg.opd_a = is_opA_rf ? rf_operand : opA_mux__out__msg;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/SwitchBoxDpath.py:97
  // s.fu_operands_msg.opd_b  //= lambda: s.rf_operand if s.is_opB_rf else s.opB_mux.out.msg
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_sb_dpath_fu_operands_msg_opd_b
    fu_operands_msg.opd_b = is_opB_rf ? rf_operand : opB_mux__out__msg;
  end

  assign in_adapters__clk[0] = clk;
  assign in_adapters__reset[0] = reset;
  assign in_adapters__clk[1] = clk;
  assign in_adapters__reset[1] = reset;
  assign in_adapters__clk[2] = clk;
  assign in_adapters__reset[2] = reset;
  assign in_adapters__clk[3] = clk;
  assign in_adapters__reset[3] = reset;
  assign in_adapters__clk[4] = clk;
  assign in_adapters__reset[4] = reset;
  assign out_muxes__clk[0] = clk;
  assign out_muxes__reset[0] = reset;
  assign out_muxes__clk[1] = clk;
  assign out_muxes__reset[1] = reset;
  assign out_muxes__clk[2] = clk;
  assign out_muxes__reset[2] = reset;
  assign out_muxes__clk[3] = clk;
  assign out_muxes__reset[3] = reset;
  assign opA_mux__clk = clk;
  assign opA_mux__reset = reset;
  assign opB_mux__clk = clk;
  assign opB_mux__reset = reset;
  assign in_adapters__in___msg[0] = in___msg[0];
  assign in___rdy[0] = in_adapters__in___rdy[0];
  assign in_adapters__in___val[0] = in___val[0];
  assign in_adapters__mask[0] = in_adapter_mask[0];
  assign in_adapters__mask_en[0] = in_adapter_mask_en[0];
  assign in_adapters__cfg_reset[0] = cfg_reset;
  assign in_adapters__is_calc[0] = is_calc;
  assign in_adapters__in___msg[1] = in___msg[1];
  assign in___rdy[1] = in_adapters__in___rdy[1];
  assign in_adapters__in___val[1] = in___val[1];
  assign in_adapters__mask[1] = in_adapter_mask[1];
  assign in_adapters__mask_en[1] = in_adapter_mask_en[1];
  assign in_adapters__cfg_reset[1] = cfg_reset;
  assign in_adapters__is_calc[1] = is_calc;
  assign in_adapters__in___msg[2] = in___msg[2];
  assign in___rdy[2] = in_adapters__in___rdy[2];
  assign in_adapters__in___val[2] = in___val[2];
  assign in_adapters__mask[2] = in_adapter_mask[2];
  assign in_adapters__mask_en[2] = in_adapter_mask_en[2];
  assign in_adapters__cfg_reset[2] = cfg_reset;
  assign in_adapters__is_calc[2] = is_calc;
  assign in_adapters__in___msg[3] = in___msg[3];
  assign in___rdy[3] = in_adapters__in___rdy[3];
  assign in_adapters__in___val[3] = in___val[3];
  assign in_adapters__mask[3] = in_adapter_mask[3];
  assign in_adapters__mask_en[3] = in_adapter_mask_en[3];
  assign in_adapters__cfg_reset[3] = cfg_reset;
  assign in_adapters__is_calc[3] = is_calc;
  assign in_adapters__in___msg[4] = in___msg[4];
  assign in___rdy[4] = in_adapters__in___rdy[4];
  assign in_adapters__in___val[4] = in___val[4];
  assign in_adapters__mask[4] = in_adapter_mask[4];
  assign in_adapters__mask_en[4] = in_adapter_mask_en[4];
  assign in_adapters__cfg_reset[4] = cfg_reset;
  assign in_adapters__is_calc[4] = is_calc;
  assign out_muxes__sel[0] = out_mux_sel[0];
  assign out__msg[0] = out_muxes__out__msg[0];
  assign out_muxes__out__rdy[0] = out__rdy[0];
  assign out__val[0] = out_muxes__out__val[0];
  assign out_muxes__in___msg[0][0] = in_adapters__out__msg[0][0];
  assign in_adapters__out__rdy[0][0] = out_muxes__in___rdy[0][0];
  assign out_muxes__in___val[0][0] = in_adapters__out__val[0][0];
  assign out_muxes__in___msg[0][1] = in_adapters__out__msg[1][0];
  assign in_adapters__out__rdy[1][0] = out_muxes__in___rdy[0][1];
  assign out_muxes__in___val[0][1] = in_adapters__out__val[1][0];
  assign out_muxes__in___msg[0][2] = in_adapters__out__msg[2][0];
  assign in_adapters__out__rdy[2][0] = out_muxes__in___rdy[0][2];
  assign out_muxes__in___val[0][2] = in_adapters__out__val[2][0];
  assign out_muxes__in___msg[0][3] = in_adapters__out__msg[3][0];
  assign in_adapters__out__rdy[3][0] = out_muxes__in___rdy[0][3];
  assign out_muxes__in___val[0][3] = in_adapters__out__val[3][0];
  assign out_muxes__in___msg[0][4] = in_adapters__out__msg[4][0];
  assign in_adapters__out__rdy[4][0] = out_muxes__in___rdy[0][4];
  assign out_muxes__in___val[0][4] = in_adapters__out__val[4][0];
  assign out_muxes__sel[1] = out_mux_sel[1];
  assign out__msg[1] = out_muxes__out__msg[1];
  assign out_muxes__out__rdy[1] = out__rdy[1];
  assign out__val[1] = out_muxes__out__val[1];
  assign out_muxes__in___msg[1][0] = in_adapters__out__msg[0][1];
  assign in_adapters__out__rdy[0][1] = out_muxes__in___rdy[1][0];
  assign out_muxes__in___val[1][0] = in_adapters__out__val[0][1];
  assign out_muxes__in___msg[1][1] = in_adapters__out__msg[1][1];
  assign in_adapters__out__rdy[1][1] = out_muxes__in___rdy[1][1];
  assign out_muxes__in___val[1][1] = in_adapters__out__val[1][1];
  assign out_muxes__in___msg[1][2] = in_adapters__out__msg[2][1];
  assign in_adapters__out__rdy[2][1] = out_muxes__in___rdy[1][2];
  assign out_muxes__in___val[1][2] = in_adapters__out__val[2][1];
  assign out_muxes__in___msg[1][3] = in_adapters__out__msg[3][1];
  assign in_adapters__out__rdy[3][1] = out_muxes__in___rdy[1][3];
  assign out_muxes__in___val[1][3] = in_adapters__out__val[3][1];
  assign out_muxes__in___msg[1][4] = in_adapters__out__msg[4][1];
  assign in_adapters__out__rdy[4][1] = out_muxes__in___rdy[1][4];
  assign out_muxes__in___val[1][4] = in_adapters__out__val[4][1];
  assign out_muxes__sel[2] = out_mux_sel[2];
  assign out__msg[2] = out_muxes__out__msg[2];
  assign out_muxes__out__rdy[2] = out__rdy[2];
  assign out__val[2] = out_muxes__out__val[2];
  assign out_muxes__in___msg[2][0] = in_adapters__out__msg[0][2];
  assign in_adapters__out__rdy[0][2] = out_muxes__in___rdy[2][0];
  assign out_muxes__in___val[2][0] = in_adapters__out__val[0][2];
  assign out_muxes__in___msg[2][1] = in_adapters__out__msg[1][2];
  assign in_adapters__out__rdy[1][2] = out_muxes__in___rdy[2][1];
  assign out_muxes__in___val[2][1] = in_adapters__out__val[1][2];
  assign out_muxes__in___msg[2][2] = in_adapters__out__msg[2][2];
  assign in_adapters__out__rdy[2][2] = out_muxes__in___rdy[2][2];
  assign out_muxes__in___val[2][2] = in_adapters__out__val[2][2];
  assign out_muxes__in___msg[2][3] = in_adapters__out__msg[3][2];
  assign in_adapters__out__rdy[3][2] = out_muxes__in___rdy[2][3];
  assign out_muxes__in___val[2][3] = in_adapters__out__val[3][2];
  assign out_muxes__in___msg[2][4] = in_adapters__out__msg[4][2];
  assign in_adapters__out__rdy[4][2] = out_muxes__in___rdy[2][4];
  assign out_muxes__in___val[2][4] = in_adapters__out__val[4][2];
  assign out_muxes__sel[3] = out_mux_sel[3];
  assign out__msg[3] = out_muxes__out__msg[3];
  assign out_muxes__out__rdy[3] = out__rdy[3];
  assign out__val[3] = out_muxes__out__val[3];
  assign out_muxes__in___msg[3][0] = in_adapters__out__msg[0][3];
  assign in_adapters__out__rdy[0][3] = out_muxes__in___rdy[3][0];
  assign out_muxes__in___val[3][0] = in_adapters__out__val[0][3];
  assign out_muxes__in___msg[3][1] = in_adapters__out__msg[1][3];
  assign in_adapters__out__rdy[1][3] = out_muxes__in___rdy[3][1];
  assign out_muxes__in___val[3][1] = in_adapters__out__val[1][3];
  assign out_muxes__in___msg[3][2] = in_adapters__out__msg[2][3];
  assign in_adapters__out__rdy[2][3] = out_muxes__in___rdy[3][2];
  assign out_muxes__in___val[3][2] = in_adapters__out__val[2][3];
  assign out_muxes__in___msg[3][3] = in_adapters__out__msg[3][3];
  assign in_adapters__out__rdy[3][3] = out_muxes__in___rdy[3][3];
  assign out_muxes__in___val[3][3] = in_adapters__out__val[3][3];
  assign out_muxes__in___msg[3][4] = in_adapters__out__msg[4][3];
  assign in_adapters__out__rdy[4][3] = out_muxes__in___rdy[3][4];
  assign out_muxes__in___val[3][4] = in_adapters__out__val[4][3];
  assign out_muxes__in___msg[0][5] = 32'd0;
  assign out_muxes__in___val[0][5] = 1'd0;
  assign out_muxes__in___msg[1][5] = 32'd0;
  assign out_muxes__in___val[1][5] = 1'd0;
  assign out_muxes__in___msg[2][5] = 32'd0;
  assign out_muxes__in___val[2][5] = 1'd0;
  assign out_muxes__in___msg[3][5] = 32'd0;
  assign out_muxes__in___val[3][5] = 1'd0;
  assign opA_mux__in___msg[0] = in_adapters__out__msg[0][4];
  assign in_adapters__out__rdy[0][4] = opA_mux__in___rdy[0];
  assign opA_mux__in___val[0] = in_adapters__out__val[0][4];
  assign opB_mux__in___msg[0] = in_adapters__out__msg[0][5];
  assign in_adapters__out__rdy[0][5] = opB_mux__in___rdy[0];
  assign opB_mux__in___val[0] = in_adapters__out__val[0][5];
  assign opA_mux__sel = opA_mux_sel;
  assign opB_mux__sel = opB_mux_sel;
  assign opA_mux__in___msg[1] = in_adapters__out__msg[1][4];
  assign in_adapters__out__rdy[1][4] = opA_mux__in___rdy[1];
  assign opA_mux__in___val[1] = in_adapters__out__val[1][4];
  assign opB_mux__in___msg[1] = in_adapters__out__msg[1][5];
  assign in_adapters__out__rdy[1][5] = opB_mux__in___rdy[1];
  assign opB_mux__in___val[1] = in_adapters__out__val[1][5];
  assign opA_mux__in___msg[2] = in_adapters__out__msg[2][4];
  assign in_adapters__out__rdy[2][4] = opA_mux__in___rdy[2];
  assign opA_mux__in___val[2] = in_adapters__out__val[2][4];
  assign opB_mux__in___msg[2] = in_adapters__out__msg[2][5];
  assign in_adapters__out__rdy[2][5] = opB_mux__in___rdy[2];
  assign opB_mux__in___val[2] = in_adapters__out__val[2][5];
  assign opA_mux__in___msg[3] = in_adapters__out__msg[3][4];
  assign in_adapters__out__rdy[3][4] = opA_mux__in___rdy[3];
  assign opA_mux__in___val[3] = in_adapters__out__val[3][4];
  assign opB_mux__in___msg[3] = in_adapters__out__msg[3][5];
  assign in_adapters__out__rdy[3][5] = opB_mux__in___rdy[3];
  assign opB_mux__in___val[3] = in_adapters__out__val[3][5];
  assign fu_operands_msg.opd_rf = rf_operand;
  assign opA_val = opA_mux__out__val;
  assign opA_mux__out__rdy = opA_rdy;
  assign opB_val = opB_mux__out__val;
  assign opB_mux__out__rdy = opB_rdy;

endmodule


// PyMTL Component SwitchBox Definition
// Full name: SwitchBox__xcel_params_CGRAParams: base_addr_bound:16384, base_addr_register:0, base_addr_scratchpad:256, cfg_nwords:1, cfg_type:<class 'pymtl3.datatypes.bits_import.Bits32'>, data_width:32, enable_FP:True, me_cfg_type:<class 'types.MEConfigMsg_8x8'>, mul_cycles:0, ncols:8, nrows:8, nspads:4, num_remote_masters:4, pe_cfg_type:<class 'types.PEConfigMsg_8x8'>, remote_master_addr_width:28, remote_master_data_width_factor:1, rf_nregs:2, spad_data_width:32, spad_mask_size:0, spad_num_entries:1024, trace_verbosity:0
// At /work/global/pp482/cgra/src/cgra/SwitchBox.py

module SwitchBox__e7b85fc84228c577
(
  input  PEConfigMsg_8x8__69ed92dd9fa67f76 cfg ,
  input  logic [0:0] cfg_reset ,
  input  logic [0:0] clk ,
  input  logic [0:0] is_calc ,
  output logic [0:0] is_faking_opA ,
  output logic [0:0] is_faking_opB ,
  output logic [0:0] is_occupied ,
  input  logic [0:0] is_opd_bool_true ,
  input  logic [0:0] reset ,
  input  logic [31:0] rf_operand ,
  output CgraFUMsg_32__opd_a_32__opd_b_32__opd_rf_32 fu_operands__msg  ,
  input logic [0:0] fu_operands__rdy  ,
  output logic [0:0] fu_operands__val  ,
  input logic [31:0] in___msg [0:4] ,
  output logic [0:0] in___rdy [0:4] ,
  input logic [0:0] in___val [0:4] ,
  output logic [31:0] out__msg [0:3] ,
  input logic [0:0] out__rdy [0:3] ,
  output logic [0:0] out__val [0:3] 
);
  localparam logic [0:0] __const__i_at__lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_sb_occupancy_0_1_  = 1'd0;
  localparam logic [0:0] __const__i_at__lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_sb_occupancy_1_2_  = 1'd1;
  localparam logic [1:0] __const__i_at__lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_sb_occupancy_2_3_  = 2'd2;
  localparam logic [1:0] __const__i_at__lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_sb_occupancy_3_4_  = 2'd3;
  logic [3:0] occupancy;
  //-------------------------------------------------------------
  // Component ctrl
  //-------------------------------------------------------------

  PEConfigMsg_8x8__69ed92dd9fa67f76 ctrl__cfg;
  logic [0:0] ctrl__cfg_reset;
  logic [0:0] ctrl__clk;
  logic [0:0] ctrl__fu_operands_rdy;
  logic [0:0] ctrl__fu_operands_val;
  logic [5:0] ctrl__in_adapter_mask [0:4];
  logic [0:0] ctrl__in_adapter_mask_en [0:4];
  logic [0:0] ctrl__is_faking_opA;
  logic [0:0] ctrl__is_faking_opB;
  logic [0:0] ctrl__is_opA_rf;
  logic [0:0] ctrl__is_opB_rf;
  logic [0:0] ctrl__is_opd_bool_true;
  logic [1:0] ctrl__opA_mux_sel;
  logic [0:0] ctrl__opA_rdy;
  logic [0:0] ctrl__opA_val;
  logic [1:0] ctrl__opB_mux_sel;
  logic [0:0] ctrl__opB_rdy;
  logic [0:0] ctrl__opB_val;
  logic [2:0] ctrl__out_mux_sel [0:3];
  logic [0:0] ctrl__reset;

  SwitchBoxCtrl__e7b85fc84228c577 ctrl
  (
    .cfg( ctrl__cfg ),
    .cfg_reset( ctrl__cfg_reset ),
    .clk( ctrl__clk ),
    .fu_operands_rdy( ctrl__fu_operands_rdy ),
    .fu_operands_val( ctrl__fu_operands_val ),
    .in_adapter_mask( ctrl__in_adapter_mask ),
    .in_adapter_mask_en( ctrl__in_adapter_mask_en ),
    .is_faking_opA( ctrl__is_faking_opA ),
    .is_faking_opB( ctrl__is_faking_opB ),
    .is_opA_rf( ctrl__is_opA_rf ),
    .is_opB_rf( ctrl__is_opB_rf ),
    .is_opd_bool_true( ctrl__is_opd_bool_true ),
    .opA_mux_sel( ctrl__opA_mux_sel ),
    .opA_rdy( ctrl__opA_rdy ),
    .opA_val( ctrl__opA_val ),
    .opB_mux_sel( ctrl__opB_mux_sel ),
    .opB_rdy( ctrl__opB_rdy ),
    .opB_val( ctrl__opB_val ),
    .out_mux_sel( ctrl__out_mux_sel ),
    .reset( ctrl__reset )
  );

  //-------------------------------------------------------------
  // End of component ctrl
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component dpath
  //-------------------------------------------------------------

  logic [0:0] dpath__cfg_reset;
  logic [0:0] dpath__clk;
  CgraFUMsg_32__opd_a_32__opd_b_32__opd_rf_32 dpath__fu_operands_msg;
  logic [5:0] dpath__in_adapter_mask [0:4];
  logic [0:0] dpath__in_adapter_mask_en [0:4];
  logic [0:0] dpath__is_calc;
  logic [0:0] dpath__is_opA_rf;
  logic [0:0] dpath__is_opB_rf;
  logic [1:0] dpath__opA_mux_sel;
  logic [0:0] dpath__opA_rdy;
  logic [0:0] dpath__opA_val;
  logic [1:0] dpath__opB_mux_sel;
  logic [0:0] dpath__opB_rdy;
  logic [0:0] dpath__opB_val;
  logic [2:0] dpath__out_mux_sel [0:3];
  logic [0:0] dpath__reset;
  logic [31:0] dpath__rf_operand;
  logic [31:0] dpath__in___msg [0:4];
  logic [0:0] dpath__in___rdy [0:4];
  logic [0:0] dpath__in___val [0:4];
  logic [31:0] dpath__out__msg [0:3];
  logic [0:0] dpath__out__rdy [0:3];
  logic [0:0] dpath__out__val [0:3];

  SwitchBoxDpath__e7b85fc84228c577 dpath
  (
    .cfg_reset( dpath__cfg_reset ),
    .clk( dpath__clk ),
    .fu_operands_msg( dpath__fu_operands_msg ),
    .in_adapter_mask( dpath__in_adapter_mask ),
    .in_adapter_mask_en( dpath__in_adapter_mask_en ),
    .is_calc( dpath__is_calc ),
    .is_opA_rf( dpath__is_opA_rf ),
    .is_opB_rf( dpath__is_opB_rf ),
    .opA_mux_sel( dpath__opA_mux_sel ),
    .opA_rdy( dpath__opA_rdy ),
    .opA_val( dpath__opA_val ),
    .opB_mux_sel( dpath__opB_mux_sel ),
    .opB_rdy( dpath__opB_rdy ),
    .opB_val( dpath__opB_val ),
    .out_mux_sel( dpath__out_mux_sel ),
    .reset( dpath__reset ),
    .rf_operand( dpath__rf_operand ),
    .in___msg( dpath__in___msg ),
    .in___rdy( dpath__in___rdy ),
    .in___val( dpath__in___val ),
    .out__msg( dpath__out__msg ),
    .out__rdy( dpath__out__rdy ),
    .out__val( dpath__out__val )
  );

  //-------------------------------------------------------------
  // End of component dpath
  //-------------------------------------------------------------

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/SwitchBox.py:104
  // s.is_occupied //= lambda: reduce_or( s.occupancy )
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_sb_is_occupied
    is_occupied = ( | occupancy );
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/SwitchBox.py:102
  // s.occupancy[i] //= lambda: s.out[i].val & s.out[i].rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_sb_occupancy_0_1_
    occupancy[2'd0:2'd0] = out__val[2'( __const__i_at__lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_sb_occupancy_0_1_ )] & out__rdy[2'( __const__i_at__lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_sb_occupancy_0_1_ )];
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/SwitchBox.py:102
  // s.occupancy[i] //= lambda: s.out[i].val & s.out[i].rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_sb_occupancy_1_2_
    occupancy[2'd1:2'd1] = out__val[2'( __const__i_at__lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_sb_occupancy_1_2_ )] & out__rdy[2'( __const__i_at__lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_sb_occupancy_1_2_ )];
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/SwitchBox.py:102
  // s.occupancy[i] //= lambda: s.out[i].val & s.out[i].rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_sb_occupancy_2_3_
    occupancy[2'd2:2'd2] = out__val[2'( __const__i_at__lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_sb_occupancy_2_3_ )] & out__rdy[2'( __const__i_at__lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_sb_occupancy_2_3_ )];
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/SwitchBox.py:102
  // s.occupancy[i] //= lambda: s.out[i].val & s.out[i].rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_sb_occupancy_3_4_
    occupancy[2'd3:2'd3] = out__val[2'( __const__i_at__lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_sb_occupancy_3_4_ )] & out__rdy[2'( __const__i_at__lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_sb_occupancy_3_4_ )];
  end

  assign ctrl__clk = clk;
  assign ctrl__reset = reset;
  assign dpath__clk = clk;
  assign dpath__reset = reset;
  assign ctrl__cfg = cfg;
  assign ctrl__cfg_reset = cfg_reset;
  assign dpath__cfg_reset = cfg_reset;
  assign dpath__is_calc = is_calc;
  assign ctrl__is_opd_bool_true = is_opd_bool_true;
  assign is_faking_opA = ctrl__is_faking_opA;
  assign is_faking_opB = ctrl__is_faking_opB;
  assign dpath__in___msg[0] = in___msg[0];
  assign in___rdy[0] = dpath__in___rdy[0];
  assign dpath__in___val[0] = in___val[0];
  assign dpath__in___msg[1] = in___msg[1];
  assign in___rdy[1] = dpath__in___rdy[1];
  assign dpath__in___val[1] = in___val[1];
  assign dpath__in___msg[2] = in___msg[2];
  assign in___rdy[2] = dpath__in___rdy[2];
  assign dpath__in___val[2] = in___val[2];
  assign dpath__in___msg[3] = in___msg[3];
  assign in___rdy[3] = dpath__in___rdy[3];
  assign dpath__in___val[3] = in___val[3];
  assign dpath__in___msg[4] = in___msg[4];
  assign in___rdy[4] = dpath__in___rdy[4];
  assign dpath__in___val[4] = in___val[4];
  assign out__msg[0] = dpath__out__msg[0];
  assign dpath__out__rdy[0] = out__rdy[0];
  assign out__val[0] = dpath__out__val[0];
  assign out__msg[1] = dpath__out__msg[1];
  assign dpath__out__rdy[1] = out__rdy[1];
  assign out__val[1] = dpath__out__val[1];
  assign out__msg[2] = dpath__out__msg[2];
  assign dpath__out__rdy[2] = out__rdy[2];
  assign out__val[2] = dpath__out__val[2];
  assign out__msg[3] = dpath__out__msg[3];
  assign dpath__out__rdy[3] = out__rdy[3];
  assign out__val[3] = dpath__out__val[3];
  assign dpath__rf_operand = rf_operand;
  assign fu_operands__msg = dpath__fu_operands_msg;
  assign fu_operands__val = ctrl__fu_operands_val;
  assign ctrl__fu_operands_rdy = fu_operands__rdy;
  assign dpath__in_adapter_mask[0] = ctrl__in_adapter_mask[0];
  assign dpath__in_adapter_mask_en[0] = ctrl__in_adapter_mask_en[0];
  assign dpath__in_adapter_mask[1] = ctrl__in_adapter_mask[1];
  assign dpath__in_adapter_mask_en[1] = ctrl__in_adapter_mask_en[1];
  assign dpath__in_adapter_mask[2] = ctrl__in_adapter_mask[2];
  assign dpath__in_adapter_mask_en[2] = ctrl__in_adapter_mask_en[2];
  assign dpath__in_adapter_mask[3] = ctrl__in_adapter_mask[3];
  assign dpath__in_adapter_mask_en[3] = ctrl__in_adapter_mask_en[3];
  assign dpath__in_adapter_mask[4] = ctrl__in_adapter_mask[4];
  assign dpath__in_adapter_mask_en[4] = ctrl__in_adapter_mask_en[4];
  assign dpath__out_mux_sel[0] = ctrl__out_mux_sel[0];
  assign dpath__out_mux_sel[1] = ctrl__out_mux_sel[1];
  assign dpath__out_mux_sel[2] = ctrl__out_mux_sel[2];
  assign dpath__out_mux_sel[3] = ctrl__out_mux_sel[3];
  assign dpath__opA_mux_sel = ctrl__opA_mux_sel;
  assign dpath__opB_mux_sel = ctrl__opB_mux_sel;
  assign dpath__is_opA_rf = ctrl__is_opA_rf;
  assign dpath__is_opB_rf = ctrl__is_opB_rf;
  assign ctrl__opA_val = dpath__opA_val;
  assign dpath__opA_rdy = ctrl__opA_rdy;
  assign ctrl__opB_val = dpath__opB_val;
  assign dpath__opB_rdy = ctrl__opB_rdy;

endmodule


// PyMTL Component ProcElementDpath Definition
// Full name: ProcElementDpath__xcel_params_CGRAParams: base_addr_bound:16384, base_addr_register:0, base_addr_scratchpad:256, cfg_nwords:1, cfg_type:<class 'pymtl3.datatypes.bits_import.Bits32'>, data_width:32, enable_FP:True, me_cfg_type:<class 'types.MEConfigMsg_8x8'>, mul_cycles:0, ncols:8, nrows:8, nspads:4, num_remote_masters:4, pe_cfg_type:<class 'types.PEConfigMsg_8x8'>, remote_master_addr_width:28, remote_master_data_width_factor:1, rf_nregs:2, spad_data_width:32, spad_mask_size:0, spad_num_entries:1024, trace_verbosity:0
// At /work/global/pp482/cgra/src/cgra/ProcElementDpath.py

module ProcElementDpath__e7b85fc84228c577
(
  input  logic [36:0] cfg_deq_msg ,
  output logic [36:0] cfg_out_msg ,
  input  logic [0:0] cfg_r_en ,
  output logic [0:0] cfg_reset ,
  input  logic [0:0] clk ,
  output logic [0:0] fu_out_go ,
  input  logic [0:0] is_calc ,
  output logic [0:0] is_cfg_target_self ,
  output logic [0:0] is_occupied ,
  output logic [0:0] is_reload_cmd ,
  input  logic [0:0] reset ,
  input  logic [0:0] rf_reload ,
  output logic [2:0] rf_src ,
  input  logic [0:0] rf_wen ,
  input  logic [3:0] x_cord ,
  input logic [31:0] in___msg [0:3] ,
  output logic [0:0] in___rdy [0:3] ,
  input logic [0:0] in___val [0:3] ,
  output logic [31:0] out__msg [0:3] ,
  input logic [0:0] out__rdy [0:3] ,
  output logic [0:0] out__val [0:3] 
);
  PEConfigMsg_8x8__69ed92dd9fa67f76 cfg_struct;
  logic [3:0] cfg_x_cord;
  logic [31:0] rf_operand;
  logic [31:0] rf_wdata;
  //-------------------------------------------------------------
  // Component cfg_r
  //-------------------------------------------------------------

  logic [0:0] cfg_r__clk;
  logic [0:0] cfg_r__en;
  PEConfigMsg_8x8__69ed92dd9fa67f76 cfg_r__in_;
  PEConfigMsg_8x8__69ed92dd9fa67f76 cfg_r__out;
  logic [0:0] cfg_r__reset;

  RegEnRst__0fb4f3ed7b8ec906 cfg_r
  (
    .clk( cfg_r__clk ),
    .en( cfg_r__en ),
    .in_( cfg_r__in_ ),
    .out( cfg_r__out ),
    .reset( cfg_r__reset )
  );

  //-------------------------------------------------------------
  // End of component cfg_r
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component fu
  //-------------------------------------------------------------

  PEConfigMsg_8x8__69ed92dd9fa67f76 fu__cfg;
  logic [0:0] fu__cfg_reset;
  logic [0:0] fu__clk;
  logic [0:0] fu__is_calc;
  logic [0:0] fu__is_faking_opA;
  logic [0:0] fu__is_faking_opB;
  logic [0:0] fu__is_occupied;
  logic [0:0] fu__is_opd_bool_true;
  logic [0:0] fu__out_go;
  logic [0:0] fu__reset;
  CgraFUMsg_32__opd_a_32__opd_b_32__opd_rf_32 fu__in___msg;
  logic [0:0] fu__in___rdy;
  logic [0:0] fu__in___val;
  logic [31:0] fu__out__msg;
  logic [0:0] fu__out__rdy;
  logic [0:0] fu__out__val;

  FunctUnit__e7b85fc84228c577 fu
  (
    .cfg( fu__cfg ),
    .cfg_reset( fu__cfg_reset ),
    .clk( fu__clk ),
    .is_calc( fu__is_calc ),
    .is_faking_opA( fu__is_faking_opA ),
    .is_faking_opB( fu__is_faking_opB ),
    .is_occupied( fu__is_occupied ),
    .is_opd_bool_true( fu__is_opd_bool_true ),
    .out_go( fu__out_go ),
    .reset( fu__reset ),
    .in___msg( fu__in___msg ),
    .in___rdy( fu__in___rdy ),
    .in___val( fu__in___val ),
    .out__msg( fu__out__msg ),
    .out__rdy( fu__out__rdy ),
    .out__val( fu__out__val )
  );

  //-------------------------------------------------------------
  // End of component fu
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component rf
  //-------------------------------------------------------------

  logic [0:0] rf__clk;
  logic [0:0] rf__raddr [0:0];
  logic [31:0] rf__rdata [0:0];
  logic [0:0] rf__reset;
  logic [0:0] rf__waddr [0:0];
  logic [31:0] rf__wdata [0:0];
  logic [0:0] rf__wen [0:0];

  RegisterFile__3a42a011005ae1af rf
  (
    .clk( rf__clk ),
    .raddr( rf__raddr ),
    .rdata( rf__rdata ),
    .reset( rf__reset ),
    .waddr( rf__waddr ),
    .wdata( rf__wdata ),
    .wen( rf__wen )
  );

  //-------------------------------------------------------------
  // End of component rf
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component sb
  //-------------------------------------------------------------

  PEConfigMsg_8x8__69ed92dd9fa67f76 sb__cfg;
  logic [0:0] sb__cfg_reset;
  logic [0:0] sb__clk;
  logic [0:0] sb__is_calc;
  logic [0:0] sb__is_faking_opA;
  logic [0:0] sb__is_faking_opB;
  logic [0:0] sb__is_occupied;
  logic [0:0] sb__is_opd_bool_true;
  logic [0:0] sb__reset;
  logic [31:0] sb__rf_operand;
  CgraFUMsg_32__opd_a_32__opd_b_32__opd_rf_32 sb__fu_operands__msg;
  logic [0:0] sb__fu_operands__rdy;
  logic [0:0] sb__fu_operands__val;
  logic [31:0] sb__in___msg [0:4];
  logic [0:0] sb__in___rdy [0:4];
  logic [0:0] sb__in___val [0:4];
  logic [31:0] sb__out__msg [0:3];
  logic [0:0] sb__out__rdy [0:3];
  logic [0:0] sb__out__val [0:3];

  SwitchBox__e7b85fc84228c577 sb
  (
    .cfg( sb__cfg ),
    .cfg_reset( sb__cfg_reset ),
    .clk( sb__clk ),
    .is_calc( sb__is_calc ),
    .is_faking_opA( sb__is_faking_opA ),
    .is_faking_opB( sb__is_faking_opB ),
    .is_occupied( sb__is_occupied ),
    .is_opd_bool_true( sb__is_opd_bool_true ),
    .reset( sb__reset ),
    .rf_operand( sb__rf_operand ),
    .fu_operands__msg( sb__fu_operands__msg ),
    .fu_operands__rdy( sb__fu_operands__rdy ),
    .fu_operands__val( sb__fu_operands__val ),
    .in___msg( sb__in___msg ),
    .in___rdy( sb__in___rdy ),
    .in___val( sb__in___val ),
    .out__msg( sb__out__msg ),
    .out__rdy( sb__out__rdy ),
    .out__val( sb__out__val )
  );

  //-------------------------------------------------------------
  // End of component sb
  //-------------------------------------------------------------

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/ProcElementDpath.py:66
  // s.is_cfg_target_self //= lambda: s.cfg_x_cord == s.x_cord
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_is_cfg_target_self
    is_cfg_target_self = cfg_x_cord == x_cord;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/ProcElementDpath.py:135
  // s.is_occupied //= lambda: s.fu.is_occupied | s.sb.is_occupied
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_is_occupied
    is_occupied = fu__is_occupied | sb__is_occupied;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/ProcElementDpath.py:67
  // s.is_reload_cmd //= lambda: s.cfg_deq_msg[p.cfg_width:p.cfg_width+p.cfg_cmd_width] == 1
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_is_reload_cmd
    is_reload_cmd = cfg_deq_msg[6'd32:6'd32] == 1'd1;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/ProcElementDpath.py:90
  // s.rf_wdata //= lambda: s.cfg_deq_msg[0:p.data_width] if s.rf_reload else s.fu.out.msg
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__dpath_rf_wdata
    rf_wdata = rf_reload ? cfg_deq_msg[6'd31:6'd0] : fu__out__msg;
  end

  assign sb__clk = clk;
  assign sb__reset = reset;
  assign fu__clk = clk;
  assign fu__reset = reset;
  assign rf__clk = clk;
  assign rf__reset = reset;
  assign cfg_x_cord = cfg_deq_msg[36:33];
  assign cfg_struct.unused = cfg_deq_msg[1:0];
  assign cfg_struct.reg_src = cfg_deq_msg[4:2];
  assign cfg_struct.reg_id = cfg_deq_msg[6:5];
  assign cfg_struct.out_e_src = cfg_deq_msg[9:7];
  assign cfg_struct.out_w_src = cfg_deq_msg[12:10];
  assign cfg_struct.out_s_src = cfg_deq_msg[15:13];
  assign cfg_struct.out_n_src = cfg_deq_msg[18:16];
  assign cfg_struct.src_opd_b = cfg_deq_msg[21:19];
  assign cfg_struct.src_opd_a = cfg_deq_msg[24:22];
  assign cfg_struct.func = cfg_deq_msg[30:25];
  assign cfg_struct.opcode = cfg_deq_msg[31:31];
  assign cfg_out_msg = cfg_deq_msg;
  assign cfg_r__clk = clk;
  assign cfg_r__reset = reset;
  assign cfg_r__in_ = cfg_struct;
  assign cfg_r__en = cfg_r_en;
  assign rf__raddr[0] = 1'd0;
  assign rf__waddr[0] = 1'd0;
  assign rf_operand = rf__rdata[0];
  assign rf__wdata[0] = rf_wdata;
  assign rf__wen[0] = rf_wen;
  assign sb__rf_operand = rf_operand;
  assign fu__in___msg = sb__fu_operands__msg;
  assign sb__fu_operands__rdy = fu__in___rdy;
  assign fu__in___val = sb__fu_operands__val;
  assign sb__is_opd_bool_true = fu__is_opd_bool_true;
  assign fu__is_faking_opA = sb__is_faking_opA;
  assign fu__is_faking_opB = sb__is_faking_opB;
  assign sb__in___msg[0] = in___msg[0];
  assign in___rdy[0] = sb__in___rdy[0];
  assign sb__in___val[0] = in___val[0];
  assign sb__in___msg[1] = in___msg[1];
  assign in___rdy[1] = sb__in___rdy[1];
  assign sb__in___val[1] = in___val[1];
  assign sb__in___msg[2] = in___msg[2];
  assign in___rdy[2] = sb__in___rdy[2];
  assign sb__in___val[2] = in___val[2];
  assign sb__in___msg[3] = in___msg[3];
  assign in___rdy[3] = sb__in___rdy[3];
  assign sb__in___val[3] = in___val[3];
  assign sb__in___msg[4] = fu__out__msg;
  assign fu__out__rdy = sb__in___rdy[4];
  assign sb__in___val[4] = fu__out__val;
  assign out__msg[0] = sb__out__msg[0];
  assign sb__out__rdy[0] = out__rdy[0];
  assign out__val[0] = sb__out__val[0];
  assign out__msg[1] = sb__out__msg[1];
  assign sb__out__rdy[1] = out__rdy[1];
  assign out__val[1] = sb__out__val[1];
  assign out__msg[2] = sb__out__msg[2];
  assign sb__out__rdy[2] = out__rdy[2];
  assign out__val[2] = sb__out__val[2];
  assign out__msg[3] = sb__out__msg[3];
  assign sb__out__rdy[3] = out__rdy[3];
  assign out__val[3] = sb__out__val[3];
  assign sb__cfg = cfg_r__out;
  assign sb__cfg_reset = cfg_r_en;
  assign sb__is_calc = is_calc;
  assign fu__cfg = cfg_r__out;
  assign fu__cfg_reset = cfg_r_en;
  assign fu__is_calc = is_calc;
  assign rf_src = cfg_r__out.reg_src;
  assign fu_out_go = fu__out_go;
  assign cfg_reset = cfg_r_en;

endmodule


// PyMTL Component ValRdyNormalQueuePow2CtrlRTL Definition
// Full name: ValRdyNormalQueuePow2CtrlRTL__num_entries_2__enable_clear_True__enable_accept_True
// At /work/global/pp482/cgra/src/fifos/ValRdyNormalQueuePow2RTL.py

module ValRdyNormalQueuePow2CtrlRTL__b79c6c030dcf4445
(
  input  logic [0:0] accept ,
  input  logic [0:0] clear ,
  input  logic [0:0] clk ,
  input  logic [0:0] deq_rdy ,
  output logic [0:0] deq_val ,
  output logic [0:0] enq_rdy ,
  input  logic [0:0] enq_val ,
  output logic [0:0] is_empty ,
  output logic [0:0] raddr ,
  input  logic [0:0] reset ,
  output logic [0:0] waddr ,
  output logic [0:0] wen 
);
  logic [0:0] empty;
  logic [0:0] full;
  logic [0:0] r_ptr;
  logic [1:0] r_ptr_with_wrapbit;
  logic [0:0] w_ptr;
  logic [1:0] w_ptr_with_wrapbit;

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/fifos/ValRdyNormalQueuePow2RTL.py:100
  // @update
  // def upblk_empty():
  //   s.empty @= (s.w_ptr_with_wrapbit == s.r_ptr_with_wrapbit)
  
  always_comb begin : upblk_empty
    empty = w_ptr_with_wrapbit == r_ptr_with_wrapbit;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/fifos/ValRdyNormalQueuePow2RTL.py:96
  // @update
  // def upblk_full():
  //   s.full @= (s.w_ptr == s.r_ptr) & (s.w_ptr_with_wrapbit != s.r_ptr_with_wrapbit)
  
  always_comb begin : upblk_full
    full = ( w_ptr == r_ptr ) & ( w_ptr_with_wrapbit != r_ptr_with_wrapbit );
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/fifos/ValRdyNormalQueuePow2RTL.py:148
  // @update
  // def upblk_output():
  //   s.enq_rdy @= ~ s.full
  //   s.deq_val @= ~ s.empty
  //   s.wen     @= (s.enq_val & s.enq_rdy)
  
  always_comb begin : upblk_output
    enq_rdy = ~full;
    deq_val = ~empty;
    wen = enq_val & enq_rdy;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/fifos/ValRdyNormalQueuePow2RTL.py:133
  // @update_ff
  // def upblk_r_ptr():
  //   if s.reset:
  //     s.r_ptr_with_wrapbit <<= 0
  //   elif s.deq_val & s.deq_rdy:
  //     s.r_ptr_with_wrapbit <<= s.r_ptr_with_wrapbit + 1
  
  always_ff @(posedge clk) begin : upblk_r_ptr
    if ( reset ) begin
      r_ptr_with_wrapbit <= 2'd0;
    end
    else if ( deq_val & deq_rdy ) begin
      r_ptr_with_wrapbit <= r_ptr_with_wrapbit + 2'd1;
    end
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/fifos/ValRdyNormalQueuePow2RTL.py:126
  // @update_ff
  // def upblk_w_ptr():
  //   if s.reset:
  //     s.w_ptr_with_wrapbit <<= 0
  //   elif s.enq_val & s.enq_rdy:
  //     s.w_ptr_with_wrapbit <<= s.w_ptr_with_wrapbit + 1
  
  always_ff @(posedge clk) begin : upblk_w_ptr
    if ( reset ) begin
      w_ptr_with_wrapbit <= 2'd0;
    end
    else if ( enq_val & enq_rdy ) begin
      w_ptr_with_wrapbit <= w_ptr_with_wrapbit + 2'd1;
    end
  end

  assign w_ptr = w_ptr_with_wrapbit[0:0];
  assign r_ptr = r_ptr_with_wrapbit[0:0];
  assign waddr = w_ptr;
  assign raddr = r_ptr;
  assign is_empty = empty;

endmodule


// PyMTL Component ValRdyNormalQueuePow2RTL Definition
// Full name: ValRdyNormalQueuePow2RTL__EntryType_Bits32__num_entries_2__enable_clear_True__enable_accept_True
// At /work/global/pp482/cgra/src/fifos/ValRdyNormalQueuePow2RTL.py

module ValRdyNormalQueuePow2RTL__6da05b2a6d7fb22a
(
  input  logic [0:0] accept ,
  input  logic [0:0] clear ,
  input  logic [0:0] clk ,
  output logic [0:0] is_empty ,
  input  logic [0:0] reset ,
  output logic [31:0] deq__msg  ,
  input logic [0:0] deq__rdy  ,
  output logic [0:0] deq__val  ,
  input logic [31:0] enq__msg  ,
  output logic [0:0] enq__rdy  ,
  input logic [0:0] enq__val  
);
  //-------------------------------------------------------------
  // Component ctrl
  //-------------------------------------------------------------

  logic [0:0] ctrl__accept;
  logic [0:0] ctrl__clear;
  logic [0:0] ctrl__clk;
  logic [0:0] ctrl__deq_rdy;
  logic [0:0] ctrl__deq_val;
  logic [0:0] ctrl__enq_rdy;
  logic [0:0] ctrl__enq_val;
  logic [0:0] ctrl__is_empty;
  logic [0:0] ctrl__raddr;
  logic [0:0] ctrl__reset;
  logic [0:0] ctrl__waddr;
  logic [0:0] ctrl__wen;

  ValRdyNormalQueuePow2CtrlRTL__b79c6c030dcf4445 ctrl
  (
    .accept( ctrl__accept ),
    .clear( ctrl__clear ),
    .clk( ctrl__clk ),
    .deq_rdy( ctrl__deq_rdy ),
    .deq_val( ctrl__deq_val ),
    .enq_rdy( ctrl__enq_rdy ),
    .enq_val( ctrl__enq_val ),
    .is_empty( ctrl__is_empty ),
    .raddr( ctrl__raddr ),
    .reset( ctrl__reset ),
    .waddr( ctrl__waddr ),
    .wen( ctrl__wen )
  );

  //-------------------------------------------------------------
  // End of component ctrl
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component dpath
  //-------------------------------------------------------------

  logic [0:0] dpath__clk;
  logic [31:0] dpath__deq_msg;
  logic [31:0] dpath__enq_msg;
  logic [0:0] dpath__raddr;
  logic [0:0] dpath__reset;
  logic [0:0] dpath__waddr;
  logic [0:0] dpath__wen;

  ValRdyNormalQueuePow2DpathRTL__EntryType_Bits32__num_entries_2 dpath
  (
    .clk( dpath__clk ),
    .deq_msg( dpath__deq_msg ),
    .enq_msg( dpath__enq_msg ),
    .raddr( dpath__raddr ),
    .reset( dpath__reset ),
    .waddr( dpath__waddr ),
    .wen( dpath__wen )
  );

  //-------------------------------------------------------------
  // End of component dpath
  //-------------------------------------------------------------

  assign ctrl__clk = clk;
  assign ctrl__reset = reset;
  assign dpath__clk = clk;
  assign dpath__reset = reset;
  assign dpath__wen = ctrl__wen;
  assign dpath__waddr = ctrl__waddr;
  assign dpath__raddr = ctrl__raddr;
  assign ctrl__enq_val = enq__val;
  assign enq__rdy = ctrl__enq_rdy;
  assign deq__val = ctrl__deq_val;
  assign ctrl__deq_rdy = deq__rdy;
  assign dpath__enq_msg = enq__msg;
  assign deq__msg = dpath__deq_msg;
  assign is_empty = ctrl__is_empty;
  assign ctrl__clear = clear;
  assign ctrl__accept = accept;

endmodule


// PyMTL Component ProcElement Definition
// Full name: ProcElement__xcel_params_CGRAParams: base_addr_bound:16384, base_addr_register:0, base_addr_scratchpad:256, cfg_nwords:1, cfg_type:<class 'pymtl3.datatypes.bits_import.Bits32'>, data_width:32, enable_FP:True, me_cfg_type:<class 'types.MEConfigMsg_8x8'>, mul_cycles:0, ncols:8, nrows:8, nspads:4, num_remote_masters:4, pe_cfg_type:<class 'types.PEConfigMsg_8x8'>, remote_master_addr_width:28, remote_master_data_width_factor:1, rf_nregs:2, spad_data_width:32, spad_mask_size:0, spad_num_entries:1024, trace_verbosity:0
// At /work/global/pp482/cgra/src/cgra/ProcElement.py

module ProcElement__e7b85fc84228c577
(
  input  logic [0:0] clk ,
  input  logic [0:0] is_calc ,
  output logic [0:0] is_occupied ,
  input  logic [0:0] reset ,
  input  logic [3:0] x_cord ,
  input  logic [3:0] y_cord ,
  input logic [36:0] cfg_in__msg  ,
  output logic [0:0] cfg_in__rdy  ,
  input logic [0:0] cfg_in__val  ,
  output logic [36:0] cfg_out__msg  ,
  input logic [0:0] cfg_out__rdy  ,
  output logic [0:0] cfg_out__val  ,
  input logic [31:0] in___msg [0:3] ,
  output logic [0:0] in___rdy [0:3] ,
  input logic [0:0] in___val [0:3] ,
  output logic [31:0] out__msg [0:3] ,
  input logic [0:0] out__rdy [0:3] ,
  output logic [0:0] out__val [0:3] 
);
  //-------------------------------------------------------------
  // Component cfg_q
  //-------------------------------------------------------------

  logic [0:0] cfg_q__clk;
  logic [0:0] cfg_q__is_empty;
  logic [0:0] cfg_q__reset;
  logic [36:0] cfg_q__deq__msg;
  logic [0:0] cfg_q__deq__rdy;
  logic [0:0] cfg_q__deq__val;
  logic [36:0] cfg_q__enq__msg;
  logic [0:0] cfg_q__enq__rdy;
  logic [0:0] cfg_q__enq__val;

  ValRdyNormalQueuePow2RTL__43b1a2f4e709c40c cfg_q
  (
    .clk( cfg_q__clk ),
    .is_empty( cfg_q__is_empty ),
    .reset( cfg_q__reset ),
    .deq__msg( cfg_q__deq__msg ),
    .deq__rdy( cfg_q__deq__rdy ),
    .deq__val( cfg_q__deq__val ),
    .enq__msg( cfg_q__enq__msg ),
    .enq__rdy( cfg_q__enq__rdy ),
    .enq__val( cfg_q__enq__val )
  );

  //-------------------------------------------------------------
  // End of component cfg_q
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ctrl
  //-------------------------------------------------------------

  logic [0:0] ctrl__cfg_deq_rdy;
  logic [0:0] ctrl__cfg_deq_val;
  logic [0:0] ctrl__cfg_out_rdy;
  logic [0:0] ctrl__cfg_out_val;
  logic [0:0] ctrl__cfg_r_en;
  logic [0:0] ctrl__clk;
  logic [0:0] ctrl__fu_out_go;
  logic [0:0] ctrl__is_cfg_target_self;
  logic [0:0] ctrl__is_reload_cmd;
  logic [0:0] ctrl__reset;
  logic [0:0] ctrl__rf_reload;
  logic [2:0] ctrl__rf_src;
  logic [0:0] ctrl__rf_wen;

  ProcElementCtrl__e7b85fc84228c577 ctrl
  (
    .cfg_deq_rdy( ctrl__cfg_deq_rdy ),
    .cfg_deq_val( ctrl__cfg_deq_val ),
    .cfg_out_rdy( ctrl__cfg_out_rdy ),
    .cfg_out_val( ctrl__cfg_out_val ),
    .cfg_r_en( ctrl__cfg_r_en ),
    .clk( ctrl__clk ),
    .fu_out_go( ctrl__fu_out_go ),
    .is_cfg_target_self( ctrl__is_cfg_target_self ),
    .is_reload_cmd( ctrl__is_reload_cmd ),
    .reset( ctrl__reset ),
    .rf_reload( ctrl__rf_reload ),
    .rf_src( ctrl__rf_src ),
    .rf_wen( ctrl__rf_wen )
  );

  //-------------------------------------------------------------
  // End of component ctrl
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component dpath
  //-------------------------------------------------------------

  logic [36:0] dpath__cfg_deq_msg;
  logic [36:0] dpath__cfg_out_msg;
  logic [0:0] dpath__cfg_r_en;
  logic [0:0] dpath__cfg_reset;
  logic [0:0] dpath__clk;
  logic [0:0] dpath__fu_out_go;
  logic [0:0] dpath__is_calc;
  logic [0:0] dpath__is_cfg_target_self;
  logic [0:0] dpath__is_occupied;
  logic [0:0] dpath__is_reload_cmd;
  logic [0:0] dpath__reset;
  logic [0:0] dpath__rf_reload;
  logic [2:0] dpath__rf_src;
  logic [0:0] dpath__rf_wen;
  logic [3:0] dpath__x_cord;
  logic [31:0] dpath__in___msg [0:3];
  logic [0:0] dpath__in___rdy [0:3];
  logic [0:0] dpath__in___val [0:3];
  logic [31:0] dpath__out__msg [0:3];
  logic [0:0] dpath__out__rdy [0:3];
  logic [0:0] dpath__out__val [0:3];

  ProcElementDpath__e7b85fc84228c577 dpath
  (
    .cfg_deq_msg( dpath__cfg_deq_msg ),
    .cfg_out_msg( dpath__cfg_out_msg ),
    .cfg_r_en( dpath__cfg_r_en ),
    .cfg_reset( dpath__cfg_reset ),
    .clk( dpath__clk ),
    .fu_out_go( dpath__fu_out_go ),
    .is_calc( dpath__is_calc ),
    .is_cfg_target_self( dpath__is_cfg_target_self ),
    .is_occupied( dpath__is_occupied ),
    .is_reload_cmd( dpath__is_reload_cmd ),
    .reset( dpath__reset ),
    .rf_reload( dpath__rf_reload ),
    .rf_src( dpath__rf_src ),
    .rf_wen( dpath__rf_wen ),
    .x_cord( dpath__x_cord ),
    .in___msg( dpath__in___msg ),
    .in___rdy( dpath__in___rdy ),
    .in___val( dpath__in___val ),
    .out__msg( dpath__out__msg ),
    .out__rdy( dpath__out__rdy ),
    .out__val( dpath__out__val )
  );

  //-------------------------------------------------------------
  // End of component dpath
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component in_q[0:3]
  //-------------------------------------------------------------

  logic [0:0] in_q__accept [0:3];
  logic [0:0] in_q__clear [0:3];
  logic [0:0] in_q__clk [0:3];
  logic [0:0] in_q__is_empty [0:3];
  logic [0:0] in_q__reset [0:3];
  logic [31:0] in_q__deq__msg [0:3];
  logic [0:0] in_q__deq__rdy [0:3];
  logic [0:0] in_q__deq__val [0:3];
  logic [31:0] in_q__enq__msg [0:3];
  logic [0:0] in_q__enq__rdy [0:3];
  logic [0:0] in_q__enq__val [0:3];

  ValRdyNormalQueuePow2RTL__6da05b2a6d7fb22a in_q__0
  (
    .accept( in_q__accept[0] ),
    .clear( in_q__clear[0] ),
    .clk( in_q__clk[0] ),
    .is_empty( in_q__is_empty[0] ),
    .reset( in_q__reset[0] ),
    .deq__msg( in_q__deq__msg[0] ),
    .deq__rdy( in_q__deq__rdy[0] ),
    .deq__val( in_q__deq__val[0] ),
    .enq__msg( in_q__enq__msg[0] ),
    .enq__rdy( in_q__enq__rdy[0] ),
    .enq__val( in_q__enq__val[0] )
  );

  ValRdyNormalQueuePow2RTL__6da05b2a6d7fb22a in_q__1
  (
    .accept( in_q__accept[1] ),
    .clear( in_q__clear[1] ),
    .clk( in_q__clk[1] ),
    .is_empty( in_q__is_empty[1] ),
    .reset( in_q__reset[1] ),
    .deq__msg( in_q__deq__msg[1] ),
    .deq__rdy( in_q__deq__rdy[1] ),
    .deq__val( in_q__deq__val[1] ),
    .enq__msg( in_q__enq__msg[1] ),
    .enq__rdy( in_q__enq__rdy[1] ),
    .enq__val( in_q__enq__val[1] )
  );

  ValRdyNormalQueuePow2RTL__6da05b2a6d7fb22a in_q__2
  (
    .accept( in_q__accept[2] ),
    .clear( in_q__clear[2] ),
    .clk( in_q__clk[2] ),
    .is_empty( in_q__is_empty[2] ),
    .reset( in_q__reset[2] ),
    .deq__msg( in_q__deq__msg[2] ),
    .deq__rdy( in_q__deq__rdy[2] ),
    .deq__val( in_q__deq__val[2] ),
    .enq__msg( in_q__enq__msg[2] ),
    .enq__rdy( in_q__enq__rdy[2] ),
    .enq__val( in_q__enq__val[2] )
  );

  ValRdyNormalQueuePow2RTL__6da05b2a6d7fb22a in_q__3
  (
    .accept( in_q__accept[3] ),
    .clear( in_q__clear[3] ),
    .clk( in_q__clk[3] ),
    .is_empty( in_q__is_empty[3] ),
    .reset( in_q__reset[3] ),
    .deq__msg( in_q__deq__msg[3] ),
    .deq__rdy( in_q__deq__rdy[3] ),
    .deq__val( in_q__deq__val[3] ),
    .enq__msg( in_q__enq__msg[3] ),
    .enq__rdy( in_q__enq__rdy[3] ),
    .enq__val( in_q__enq__val[3] )
  );

  //-------------------------------------------------------------
  // End of component in_q[0:3]
  //-------------------------------------------------------------

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/ProcElement.py:99
  // s.is_occupied //= lambda: s.is_calc & ~s.dpath.is_occupied
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_PE_rc_0__is_occupied
    is_occupied = is_calc & ( ~dpath__is_occupied );
  end

  assign cfg_q__clk = clk;
  assign cfg_q__reset = reset;
  assign cfg_q__enq__msg = cfg_in__msg;
  assign cfg_in__rdy = cfg_q__enq__rdy;
  assign cfg_q__enq__val = cfg_in__val;
  assign in_q__clk[0] = clk;
  assign in_q__reset[0] = reset;
  assign in_q__clk[1] = clk;
  assign in_q__reset[1] = reset;
  assign in_q__clk[2] = clk;
  assign in_q__reset[2] = reset;
  assign in_q__clk[3] = clk;
  assign in_q__reset[3] = reset;
  assign ctrl__clk = clk;
  assign ctrl__reset = reset;
  assign dpath__clk = clk;
  assign dpath__reset = reset;
  assign ctrl__is_cfg_target_self = dpath__is_cfg_target_self;
  assign ctrl__is_reload_cmd = dpath__is_reload_cmd;
  assign dpath__cfg_r_en = ctrl__cfg_r_en;
  assign ctrl__fu_out_go = dpath__fu_out_go;
  assign dpath__rf_wen = ctrl__rf_wen;
  assign dpath__rf_reload = ctrl__rf_reload;
  assign ctrl__rf_src = dpath__rf_src;
  assign ctrl__cfg_deq_val = cfg_q__deq__val;
  assign cfg_q__deq__rdy = ctrl__cfg_deq_rdy;
  assign dpath__cfg_deq_msg = cfg_q__deq__msg;
  assign in_q__enq__msg[0] = in___msg[0];
  assign in___rdy[0] = in_q__enq__rdy[0];
  assign in_q__enq__val[0] = in___val[0];
  assign dpath__in___msg[0] = in_q__deq__msg[0];
  assign in_q__deq__rdy[0] = dpath__in___rdy[0];
  assign dpath__in___val[0] = in_q__deq__val[0];
  assign out__msg[0] = dpath__out__msg[0];
  assign dpath__out__rdy[0] = out__rdy[0];
  assign out__val[0] = dpath__out__val[0];
  assign in_q__enq__msg[1] = in___msg[1];
  assign in___rdy[1] = in_q__enq__rdy[1];
  assign in_q__enq__val[1] = in___val[1];
  assign dpath__in___msg[1] = in_q__deq__msg[1];
  assign in_q__deq__rdy[1] = dpath__in___rdy[1];
  assign dpath__in___val[1] = in_q__deq__val[1];
  assign out__msg[1] = dpath__out__msg[1];
  assign dpath__out__rdy[1] = out__rdy[1];
  assign out__val[1] = dpath__out__val[1];
  assign in_q__enq__msg[2] = in___msg[2];
  assign in___rdy[2] = in_q__enq__rdy[2];
  assign in_q__enq__val[2] = in___val[2];
  assign dpath__in___msg[2] = in_q__deq__msg[2];
  assign in_q__deq__rdy[2] = dpath__in___rdy[2];
  assign dpath__in___val[2] = in_q__deq__val[2];
  assign out__msg[2] = dpath__out__msg[2];
  assign dpath__out__rdy[2] = out__rdy[2];
  assign out__val[2] = dpath__out__val[2];
  assign in_q__enq__msg[3] = in___msg[3];
  assign in___rdy[3] = in_q__enq__rdy[3];
  assign in_q__enq__val[3] = in___val[3];
  assign dpath__in___msg[3] = in_q__deq__msg[3];
  assign in_q__deq__rdy[3] = dpath__in___rdy[3];
  assign dpath__in___val[3] = in_q__deq__val[3];
  assign out__msg[3] = dpath__out__msg[3];
  assign dpath__out__rdy[3] = out__rdy[3];
  assign out__val[3] = dpath__out__val[3];
  assign dpath__x_cord = x_cord;
  assign dpath__is_calc = is_calc;
  assign cfg_out__val = ctrl__cfg_out_val;
  assign ctrl__cfg_out_rdy = cfg_out__rdy;
  assign cfg_out__msg = dpath__cfg_out_msg;
  assign in_q__clear[0] = dpath__cfg_reset;
  assign in_q__accept[0] = is_calc;
  assign in_q__clear[1] = dpath__cfg_reset;
  assign in_q__accept[1] = is_calc;
  assign in_q__clear[2] = dpath__cfg_reset;
  assign in_q__accept[2] = is_calc;
  assign in_q__clear[3] = dpath__cfg_reset;
  assign in_q__accept[3] = is_calc;

endmodule


// PyMTL Component Reg Definition
// At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/registers.py

module Reg__Type_Bits1
(
  input  logic [0:0] clk ,
  input  logic [0:0] in_ ,
  output logic [0:0] out ,
  input  logic [0:0] reset 
);

  // PyMTL Update Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/registers.py:10
  // @update_ff
  // def up_reg():
  //   s.out <<= s.in_
  
  always_ff @(posedge clk) begin : up_reg
    out <= in_;
  end

endmodule


// PyMTL Component ShiftRegister Definition
// At /work/global/pp482/cgra/src/misc/ShiftRegister.py

module ShiftRegister__Type_Bits1__ncycles_1
(
  input  logic [0:0] cfg_reset ,
  input  logic [0:0] clk ,
  input  logic [0:0] in_ ,
  output logic [0:0] out ,
  input  logic [0:0] reset 
);
  localparam logic [0:0] __const__ncycles_at_SR_in  = 1'd1;
  localparam logic [0:0] __const__ncycles_at_SR_out  = 1'd1;
  //-------------------------------------------------------------
  // Component regs[0:0]
  //-------------------------------------------------------------

  logic [0:0] regs__clk [0:0];
  logic [0:0] regs__in_ [0:0];
  logic [0:0] regs__out [0:0];
  logic [0:0] regs__reset [0:0];

  Reg__Type_Bits1 regs__0
  (
    .clk( regs__clk[0] ),
    .in_( regs__in_[0] ),
    .out( regs__out[0] ),
    .reset( regs__reset[0] )
  );

  //-------------------------------------------------------------
  // End of component regs[0:0]
  //-------------------------------------------------------------

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/misc/ShiftRegister.py:20
  // @update
  // def SR_in():
  //   s.regs[0].in_ @= s.in_
  //   if s.cfg_reset:
  //     s.regs[0].in_ @= 0
  //   for i in range(ncycles-1):
  //     s.regs[i+1].in_ @= s.regs[i].out
  //     if s.cfg_reset:
  //       s.regs[i+1].in_ @= 0
  
  always_comb begin : SR_in
    regs__in_[1'd0] = in_;
    if ( cfg_reset ) begin
      regs__in_[1'd0] = 1'd0;
    end
    for ( int unsigned i = 1'd0; i < 1'( __const__ncycles_at_SR_in ) - 1'd1; i += 1'd1 ) begin
      regs__in_[1'(i) + 1'd1] = regs__out[1'(i)];
      if ( cfg_reset ) begin
        regs__in_[1'(i) + 1'd1] = 1'd0;
      end
    end
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/misc/ShiftRegister.py:30
  // @update
  // def SR_out():
  //   s.out @= s.regs[ncycles-1].out
  //   if s.cfg_reset:
  //     s.out @= 0
  
  always_comb begin : SR_out
    out = regs__out[1'( __const__ncycles_at_SR_out ) - 1'd1];
    if ( cfg_reset ) begin
      out = 1'd0;
    end
  end

  assign regs__clk[0] = clk;
  assign regs__reset[0] = reset;

endmodule


// PyMTL Component MemMasterIfcMux Definition
// Full name: MemMasterIfcMux__ninputs_2__MasterIfcType_MemMasterIfcRTL__MinionIfcType_MemMinionIfcRTL__ReqType_CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7__RespType_CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7
// At /work/global/pp482/cgra/src/misc/MemMasterIfcMux.py

module MemMasterIfcMux__a729082d09b6eb01
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  input  logic [0:0] sel ,
  input logic [0:0] in___req__en [0:1],
  input CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 in___req__msg [0:1],
  output logic [0:0] in___req__rdy [0:1],
  output logic [0:0] in___resp__en [0:1],
  output CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 in___resp__msg [0:1],
  input logic [0:0] in___resp__rdy [0:1],
  output logic [0:0] out__req__en ,
  output CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 out__req__msg ,
  input logic [0:0] out__req__rdy ,
  input logic [0:0] out__resp__en ,
  input CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 out__resp__msg ,
  output logic [0:0] out__resp__rdy 
);
  localparam logic [1:0] __const__ninputs_at_mem_master_ifc_mux_upblk  = 2'd2;

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/misc/MemMasterIfcMux.py:27
  // @update
  // def mem_master_ifc_mux_upblk():
  //   s.out.req.en          @= s.in_[s.sel].req.en
  //   s.out.req.msg         @= s.in_[s.sel].req.msg
  //   s.out.resp.rdy        @= s.in_[s.sel].resp.rdy
  // 
  //   # Remove inferred latches
  //   for i in range( ninputs ):
  //     s.in_[i].req.rdy @= 0
  //     s.in_[i].resp.en @= 0
  //     s.in_[i].resp.msg @= RespType()
  // 
  //   s.in_[s.sel].req.rdy  @= s.out.req.rdy
  //   s.in_[s.sel].resp.en  @= s.out.resp.en
  //   s.in_[s.sel].resp.msg @= s.out.resp.msg
  
  always_comb begin : mem_master_ifc_mux_upblk
    out__req__en = in___req__en[sel];
    out__req__msg = in___req__msg[sel];
    out__resp__rdy = in___resp__rdy[sel];
    for ( int unsigned i = 1'd0; i < 2'( __const__ninputs_at_mem_master_ifc_mux_upblk ); i += 1'd1 ) begin
      in___req__rdy[1'(i)] = 1'd0;
      in___resp__en[1'(i)] = 1'd0;
      in___resp__msg[1'(i)] = { 1'd0, 14'd0, 32'd0, 7'd0 };
    end
    in___req__rdy[sel] = out__req__rdy;
    in___resp__en[sel] = out__resp__en;
    in___resp__msg[sel] = out__resp__msg;
  end

endmodule


// PyMTL Component CGRACoreDpath Definition
// Full name: CGRACoreDpath__xcel_params_CGRAParams: base_addr_bound:16384, base_addr_register:0, base_addr_scratchpad:256, cfg_nwords:1, cfg_type:<class 'pymtl3.datatypes.bits_import.Bits32'>, data_width:32, enable_FP:True, me_cfg_type:<class 'types.MEConfigMsg_8x8'>, mul_cycles:0, ncols:8, nrows:8, nspads:4, num_remote_masters:4, pe_cfg_type:<class 'types.PEConfigMsg_8x8'>, remote_master_addr_width:28, remote_master_data_width_factor:1, rf_nregs:2, spad_data_width:32, spad_mask_size:0, spad_num_entries:1024, trace_verbosity:0
// At /work/global/pp482/cgra/src/cgra/CGRACoreDpath.py

module CGRACoreDpath__e7b85fc84228c577
(
  input  logic [0:0] CSR_wen ,
  input  logic [0:0] cfg_init ,
  input  logic [0:0] clk ,
  input  logic [0:0] is_calc ,
  output logic [0:0] is_calc_done ,
  input  logic [0:0] is_calc_go ,
  output logic [0:0] is_calc_go_transaction ,
  input  logic [0:0] is_cfg ,
  output logic [0:0] is_cfg_done ,
  input  logic [0:0] is_cfg_go ,
  output logic [0:0] is_cfg_go_transaction ,
  output logic [0:0] is_wen ,
  input  logic [0:0] reset ,
  input  CgraXcelReqMsg__wen_1__addr_14__data_32 xminion_req_msg ,
  output CgraXcelRespMsg__wen_1__addr_14__data_32 xminion_resp_msg ,
  output logic [0:0] spad_masters__req__en [0:15],
  output CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 spad_masters__req__msg [0:15],
  input logic [0:0] spad_masters__req__rdy [0:15],
  input logic [0:0] spad_masters__resp__en [0:15],
  input CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 spad_masters__resp__msg [0:15],
  output logic [0:0] spad_masters__resp__rdy [0:15]
);
  localparam logic [2:0] __const__i_at__lambda__s_dut_cgra_xcel_dpath_cgra_dpath_CSRs_in_6_  = 3'd6;
  localparam logic [2:0] __const__i_at__lambda__s_dut_cgra_xcel_dpath_cgra_dpath_CSRs_in_7_  = 3'd7;
  localparam logic [1:0] __const__bytes_offset_at__lambda__s_dut_cgra_xcel_dpath_cgra_dpath_xminion_resp_msg_data  = 2'd2;
  localparam logic [2:0] __const__num_registers_width_at__lambda__s_dut_cgra_xcel_dpath_cgra_dpath_xminion_resp_msg_data  = 3'd6;
  localparam logic [0:0] __const__GO_CFG  = 1'd1;
  localparam logic [0:0] __const__GO_CALC  = 1'd0;
  logic [63:0] CSR_wen_bits;
  logic [63:0] CSRs_en;
  logic [31:0] CSRs_in [0:63];
  logic [8:0] all_CE_done;
  logic [15:0] all_ME_done;
  logic [63:0] all_PE_occupancy;
  logic [13:0] reg_CSR_raddr;
  logic [11:0] xminion_req_word_addr;
  //-------------------------------------------------------------
  // Component CE_e[0:7]
  //-------------------------------------------------------------

  logic [0:0] CE_e__cfg_cmd [0:7];
  logic [0:0] CE_e__cfg_init [0:7];
  logic [13:0] CE_e__cfg_me_base_addr [0:7];
  logic [13:0] CE_e__cfg_pe_base_addr [0:7];
  logic [13:0] CE_e__cfg_pe_line_stride [0:7];
  logic [0:0] CE_e__clk [0:7];
  logic [0:0] CE_e__is_done [0:7];
  logic [0:0] CE_e__reset [0:7];
  logic [3:0] CE_e__y_cord [0:7];
  logic [36:0] CE_e__cfg_out__msg [0:7];
  logic [0:0] CE_e__cfg_out__rdy [0:7];
  logic [0:0] CE_e__cfg_out__val [0:7];
  logic [0:0] CE_e__mem_master__req__en [0:7];
  CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 CE_e__mem_master__req__msg [0:7];
  logic [0:0] CE_e__mem_master__req__rdy [0:7];
  logic [0:0] CE_e__mem_master__resp__en [0:7];
  CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 CE_e__mem_master__resp__msg [0:7];
  logic [0:0] CE_e__mem_master__resp__rdy [0:7];

  ConfigEngine__9c875dc70f278f0e CE_e__0
  (
    .cfg_cmd( CE_e__cfg_cmd[0] ),
    .cfg_init( CE_e__cfg_init[0] ),
    .cfg_me_base_addr( CE_e__cfg_me_base_addr[0] ),
    .cfg_pe_base_addr( CE_e__cfg_pe_base_addr[0] ),
    .cfg_pe_line_stride( CE_e__cfg_pe_line_stride[0] ),
    .clk( CE_e__clk[0] ),
    .is_done( CE_e__is_done[0] ),
    .reset( CE_e__reset[0] ),
    .y_cord( CE_e__y_cord[0] ),
    .cfg_out__msg( CE_e__cfg_out__msg[0] ),
    .cfg_out__rdy( CE_e__cfg_out__rdy[0] ),
    .cfg_out__val( CE_e__cfg_out__val[0] ),
    .mem_master__req__en( CE_e__mem_master__req__en[0] ),
    .mem_master__req__msg( CE_e__mem_master__req__msg[0] ),
    .mem_master__req__rdy( CE_e__mem_master__req__rdy[0] ),
    .mem_master__resp__en( CE_e__mem_master__resp__en[0] ),
    .mem_master__resp__msg( CE_e__mem_master__resp__msg[0] ),
    .mem_master__resp__rdy( CE_e__mem_master__resp__rdy[0] )
  );

  ConfigEngine__9c875dc70f278f0e CE_e__1
  (
    .cfg_cmd( CE_e__cfg_cmd[1] ),
    .cfg_init( CE_e__cfg_init[1] ),
    .cfg_me_base_addr( CE_e__cfg_me_base_addr[1] ),
    .cfg_pe_base_addr( CE_e__cfg_pe_base_addr[1] ),
    .cfg_pe_line_stride( CE_e__cfg_pe_line_stride[1] ),
    .clk( CE_e__clk[1] ),
    .is_done( CE_e__is_done[1] ),
    .reset( CE_e__reset[1] ),
    .y_cord( CE_e__y_cord[1] ),
    .cfg_out__msg( CE_e__cfg_out__msg[1] ),
    .cfg_out__rdy( CE_e__cfg_out__rdy[1] ),
    .cfg_out__val( CE_e__cfg_out__val[1] ),
    .mem_master__req__en( CE_e__mem_master__req__en[1] ),
    .mem_master__req__msg( CE_e__mem_master__req__msg[1] ),
    .mem_master__req__rdy( CE_e__mem_master__req__rdy[1] ),
    .mem_master__resp__en( CE_e__mem_master__resp__en[1] ),
    .mem_master__resp__msg( CE_e__mem_master__resp__msg[1] ),
    .mem_master__resp__rdy( CE_e__mem_master__resp__rdy[1] )
  );

  ConfigEngine__9c875dc70f278f0e CE_e__2
  (
    .cfg_cmd( CE_e__cfg_cmd[2] ),
    .cfg_init( CE_e__cfg_init[2] ),
    .cfg_me_base_addr( CE_e__cfg_me_base_addr[2] ),
    .cfg_pe_base_addr( CE_e__cfg_pe_base_addr[2] ),
    .cfg_pe_line_stride( CE_e__cfg_pe_line_stride[2] ),
    .clk( CE_e__clk[2] ),
    .is_done( CE_e__is_done[2] ),
    .reset( CE_e__reset[2] ),
    .y_cord( CE_e__y_cord[2] ),
    .cfg_out__msg( CE_e__cfg_out__msg[2] ),
    .cfg_out__rdy( CE_e__cfg_out__rdy[2] ),
    .cfg_out__val( CE_e__cfg_out__val[2] ),
    .mem_master__req__en( CE_e__mem_master__req__en[2] ),
    .mem_master__req__msg( CE_e__mem_master__req__msg[2] ),
    .mem_master__req__rdy( CE_e__mem_master__req__rdy[2] ),
    .mem_master__resp__en( CE_e__mem_master__resp__en[2] ),
    .mem_master__resp__msg( CE_e__mem_master__resp__msg[2] ),
    .mem_master__resp__rdy( CE_e__mem_master__resp__rdy[2] )
  );

  ConfigEngine__9c875dc70f278f0e CE_e__3
  (
    .cfg_cmd( CE_e__cfg_cmd[3] ),
    .cfg_init( CE_e__cfg_init[3] ),
    .cfg_me_base_addr( CE_e__cfg_me_base_addr[3] ),
    .cfg_pe_base_addr( CE_e__cfg_pe_base_addr[3] ),
    .cfg_pe_line_stride( CE_e__cfg_pe_line_stride[3] ),
    .clk( CE_e__clk[3] ),
    .is_done( CE_e__is_done[3] ),
    .reset( CE_e__reset[3] ),
    .y_cord( CE_e__y_cord[3] ),
    .cfg_out__msg( CE_e__cfg_out__msg[3] ),
    .cfg_out__rdy( CE_e__cfg_out__rdy[3] ),
    .cfg_out__val( CE_e__cfg_out__val[3] ),
    .mem_master__req__en( CE_e__mem_master__req__en[3] ),
    .mem_master__req__msg( CE_e__mem_master__req__msg[3] ),
    .mem_master__req__rdy( CE_e__mem_master__req__rdy[3] ),
    .mem_master__resp__en( CE_e__mem_master__resp__en[3] ),
    .mem_master__resp__msg( CE_e__mem_master__resp__msg[3] ),
    .mem_master__resp__rdy( CE_e__mem_master__resp__rdy[3] )
  );

  ConfigEngine__9c875dc70f278f0e CE_e__4
  (
    .cfg_cmd( CE_e__cfg_cmd[4] ),
    .cfg_init( CE_e__cfg_init[4] ),
    .cfg_me_base_addr( CE_e__cfg_me_base_addr[4] ),
    .cfg_pe_base_addr( CE_e__cfg_pe_base_addr[4] ),
    .cfg_pe_line_stride( CE_e__cfg_pe_line_stride[4] ),
    .clk( CE_e__clk[4] ),
    .is_done( CE_e__is_done[4] ),
    .reset( CE_e__reset[4] ),
    .y_cord( CE_e__y_cord[4] ),
    .cfg_out__msg( CE_e__cfg_out__msg[4] ),
    .cfg_out__rdy( CE_e__cfg_out__rdy[4] ),
    .cfg_out__val( CE_e__cfg_out__val[4] ),
    .mem_master__req__en( CE_e__mem_master__req__en[4] ),
    .mem_master__req__msg( CE_e__mem_master__req__msg[4] ),
    .mem_master__req__rdy( CE_e__mem_master__req__rdy[4] ),
    .mem_master__resp__en( CE_e__mem_master__resp__en[4] ),
    .mem_master__resp__msg( CE_e__mem_master__resp__msg[4] ),
    .mem_master__resp__rdy( CE_e__mem_master__resp__rdy[4] )
  );

  ConfigEngine__9c875dc70f278f0e CE_e__5
  (
    .cfg_cmd( CE_e__cfg_cmd[5] ),
    .cfg_init( CE_e__cfg_init[5] ),
    .cfg_me_base_addr( CE_e__cfg_me_base_addr[5] ),
    .cfg_pe_base_addr( CE_e__cfg_pe_base_addr[5] ),
    .cfg_pe_line_stride( CE_e__cfg_pe_line_stride[5] ),
    .clk( CE_e__clk[5] ),
    .is_done( CE_e__is_done[5] ),
    .reset( CE_e__reset[5] ),
    .y_cord( CE_e__y_cord[5] ),
    .cfg_out__msg( CE_e__cfg_out__msg[5] ),
    .cfg_out__rdy( CE_e__cfg_out__rdy[5] ),
    .cfg_out__val( CE_e__cfg_out__val[5] ),
    .mem_master__req__en( CE_e__mem_master__req__en[5] ),
    .mem_master__req__msg( CE_e__mem_master__req__msg[5] ),
    .mem_master__req__rdy( CE_e__mem_master__req__rdy[5] ),
    .mem_master__resp__en( CE_e__mem_master__resp__en[5] ),
    .mem_master__resp__msg( CE_e__mem_master__resp__msg[5] ),
    .mem_master__resp__rdy( CE_e__mem_master__resp__rdy[5] )
  );

  ConfigEngine__9c875dc70f278f0e CE_e__6
  (
    .cfg_cmd( CE_e__cfg_cmd[6] ),
    .cfg_init( CE_e__cfg_init[6] ),
    .cfg_me_base_addr( CE_e__cfg_me_base_addr[6] ),
    .cfg_pe_base_addr( CE_e__cfg_pe_base_addr[6] ),
    .cfg_pe_line_stride( CE_e__cfg_pe_line_stride[6] ),
    .clk( CE_e__clk[6] ),
    .is_done( CE_e__is_done[6] ),
    .reset( CE_e__reset[6] ),
    .y_cord( CE_e__y_cord[6] ),
    .cfg_out__msg( CE_e__cfg_out__msg[6] ),
    .cfg_out__rdy( CE_e__cfg_out__rdy[6] ),
    .cfg_out__val( CE_e__cfg_out__val[6] ),
    .mem_master__req__en( CE_e__mem_master__req__en[6] ),
    .mem_master__req__msg( CE_e__mem_master__req__msg[6] ),
    .mem_master__req__rdy( CE_e__mem_master__req__rdy[6] ),
    .mem_master__resp__en( CE_e__mem_master__resp__en[6] ),
    .mem_master__resp__msg( CE_e__mem_master__resp__msg[6] ),
    .mem_master__resp__rdy( CE_e__mem_master__resp__rdy[6] )
  );

  ConfigEngine__9c875dc70f278f0e CE_e__7
  (
    .cfg_cmd( CE_e__cfg_cmd[7] ),
    .cfg_init( CE_e__cfg_init[7] ),
    .cfg_me_base_addr( CE_e__cfg_me_base_addr[7] ),
    .cfg_pe_base_addr( CE_e__cfg_pe_base_addr[7] ),
    .cfg_pe_line_stride( CE_e__cfg_pe_line_stride[7] ),
    .clk( CE_e__clk[7] ),
    .is_done( CE_e__is_done[7] ),
    .reset( CE_e__reset[7] ),
    .y_cord( CE_e__y_cord[7] ),
    .cfg_out__msg( CE_e__cfg_out__msg[7] ),
    .cfg_out__rdy( CE_e__cfg_out__rdy[7] ),
    .cfg_out__val( CE_e__cfg_out__val[7] ),
    .mem_master__req__en( CE_e__mem_master__req__en[7] ),
    .mem_master__req__msg( CE_e__mem_master__req__msg[7] ),
    .mem_master__req__rdy( CE_e__mem_master__req__rdy[7] ),
    .mem_master__resp__en( CE_e__mem_master__resp__en[7] ),
    .mem_master__resp__msg( CE_e__mem_master__resp__msg[7] ),
    .mem_master__resp__rdy( CE_e__mem_master__resp__rdy[7] )
  );

  //-------------------------------------------------------------
  // End of component CE_e[0:7]
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component CE_s
  //-------------------------------------------------------------

  logic [0:0] CE_s__cfg_cmd;
  logic [0:0] CE_s__cfg_init;
  logic [13:0] CE_s__cfg_me_base_addr;
  logic [13:0] CE_s__cfg_pe_base_addr;
  logic [13:0] CE_s__cfg_pe_line_stride;
  logic [0:0] CE_s__clk;
  logic [0:0] CE_s__is_done;
  logic [0:0] CE_s__reset;
  logic [3:0] CE_s__y_cord;
  logic [36:0] CE_s__cfg_out__msg;
  logic [0:0] CE_s__cfg_out__rdy;
  logic [0:0] CE_s__cfg_out__val;
  logic [0:0] CE_s__mem_master__req__en;
  CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 CE_s__mem_master__req__msg;
  logic [0:0] CE_s__mem_master__req__rdy;
  logic [0:0] CE_s__mem_master__resp__en;
  CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 CE_s__mem_master__resp__msg;
  logic [0:0] CE_s__mem_master__resp__rdy;

  ConfigEngine__9486fd872e9f5118 CE_s
  (
    .cfg_cmd( CE_s__cfg_cmd ),
    .cfg_init( CE_s__cfg_init ),
    .cfg_me_base_addr( CE_s__cfg_me_base_addr ),
    .cfg_pe_base_addr( CE_s__cfg_pe_base_addr ),
    .cfg_pe_line_stride( CE_s__cfg_pe_line_stride ),
    .clk( CE_s__clk ),
    .is_done( CE_s__is_done ),
    .reset( CE_s__reset ),
    .y_cord( CE_s__y_cord ),
    .cfg_out__msg( CE_s__cfg_out__msg ),
    .cfg_out__rdy( CE_s__cfg_out__rdy ),
    .cfg_out__val( CE_s__cfg_out__val ),
    .mem_master__req__en( CE_s__mem_master__req__en ),
    .mem_master__req__msg( CE_s__mem_master__req__msg ),
    .mem_master__req__rdy( CE_s__mem_master__req__rdy ),
    .mem_master__resp__en( CE_s__mem_master__resp__en ),
    .mem_master__resp__msg( CE_s__mem_master__resp__msg ),
    .mem_master__resp__rdy( CE_s__mem_master__resp__rdy )
  );

  //-------------------------------------------------------------
  // End of component CE_s
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component CSRs[0:63]
  //-------------------------------------------------------------

  logic [0:0] CSRs__clk [0:63];
  logic [0:0] CSRs__en [0:63];
  logic [31:0] CSRs__in_ [0:63];
  logic [31:0] CSRs__out [0:63];
  logic [0:0] CSRs__reset [0:63];

  RegEnRst__Type_32__reset_value_0 CSRs__0
  (
    .clk( CSRs__clk[0] ),
    .en( CSRs__en[0] ),
    .in_( CSRs__in_[0] ),
    .out( CSRs__out[0] ),
    .reset( CSRs__reset[0] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__1
  (
    .clk( CSRs__clk[1] ),
    .en( CSRs__en[1] ),
    .in_( CSRs__in_[1] ),
    .out( CSRs__out[1] ),
    .reset( CSRs__reset[1] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__2
  (
    .clk( CSRs__clk[2] ),
    .en( CSRs__en[2] ),
    .in_( CSRs__in_[2] ),
    .out( CSRs__out[2] ),
    .reset( CSRs__reset[2] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__3
  (
    .clk( CSRs__clk[3] ),
    .en( CSRs__en[3] ),
    .in_( CSRs__in_[3] ),
    .out( CSRs__out[3] ),
    .reset( CSRs__reset[3] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__4
  (
    .clk( CSRs__clk[4] ),
    .en( CSRs__en[4] ),
    .in_( CSRs__in_[4] ),
    .out( CSRs__out[4] ),
    .reset( CSRs__reset[4] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__5
  (
    .clk( CSRs__clk[5] ),
    .en( CSRs__en[5] ),
    .in_( CSRs__in_[5] ),
    .out( CSRs__out[5] ),
    .reset( CSRs__reset[5] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__6
  (
    .clk( CSRs__clk[6] ),
    .en( CSRs__en[6] ),
    .in_( CSRs__in_[6] ),
    .out( CSRs__out[6] ),
    .reset( CSRs__reset[6] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__7
  (
    .clk( CSRs__clk[7] ),
    .en( CSRs__en[7] ),
    .in_( CSRs__in_[7] ),
    .out( CSRs__out[7] ),
    .reset( CSRs__reset[7] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__8
  (
    .clk( CSRs__clk[8] ),
    .en( CSRs__en[8] ),
    .in_( CSRs__in_[8] ),
    .out( CSRs__out[8] ),
    .reset( CSRs__reset[8] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__9
  (
    .clk( CSRs__clk[9] ),
    .en( CSRs__en[9] ),
    .in_( CSRs__in_[9] ),
    .out( CSRs__out[9] ),
    .reset( CSRs__reset[9] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__10
  (
    .clk( CSRs__clk[10] ),
    .en( CSRs__en[10] ),
    .in_( CSRs__in_[10] ),
    .out( CSRs__out[10] ),
    .reset( CSRs__reset[10] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__11
  (
    .clk( CSRs__clk[11] ),
    .en( CSRs__en[11] ),
    .in_( CSRs__in_[11] ),
    .out( CSRs__out[11] ),
    .reset( CSRs__reset[11] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__12
  (
    .clk( CSRs__clk[12] ),
    .en( CSRs__en[12] ),
    .in_( CSRs__in_[12] ),
    .out( CSRs__out[12] ),
    .reset( CSRs__reset[12] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__13
  (
    .clk( CSRs__clk[13] ),
    .en( CSRs__en[13] ),
    .in_( CSRs__in_[13] ),
    .out( CSRs__out[13] ),
    .reset( CSRs__reset[13] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__14
  (
    .clk( CSRs__clk[14] ),
    .en( CSRs__en[14] ),
    .in_( CSRs__in_[14] ),
    .out( CSRs__out[14] ),
    .reset( CSRs__reset[14] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__15
  (
    .clk( CSRs__clk[15] ),
    .en( CSRs__en[15] ),
    .in_( CSRs__in_[15] ),
    .out( CSRs__out[15] ),
    .reset( CSRs__reset[15] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__16
  (
    .clk( CSRs__clk[16] ),
    .en( CSRs__en[16] ),
    .in_( CSRs__in_[16] ),
    .out( CSRs__out[16] ),
    .reset( CSRs__reset[16] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__17
  (
    .clk( CSRs__clk[17] ),
    .en( CSRs__en[17] ),
    .in_( CSRs__in_[17] ),
    .out( CSRs__out[17] ),
    .reset( CSRs__reset[17] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__18
  (
    .clk( CSRs__clk[18] ),
    .en( CSRs__en[18] ),
    .in_( CSRs__in_[18] ),
    .out( CSRs__out[18] ),
    .reset( CSRs__reset[18] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__19
  (
    .clk( CSRs__clk[19] ),
    .en( CSRs__en[19] ),
    .in_( CSRs__in_[19] ),
    .out( CSRs__out[19] ),
    .reset( CSRs__reset[19] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__20
  (
    .clk( CSRs__clk[20] ),
    .en( CSRs__en[20] ),
    .in_( CSRs__in_[20] ),
    .out( CSRs__out[20] ),
    .reset( CSRs__reset[20] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__21
  (
    .clk( CSRs__clk[21] ),
    .en( CSRs__en[21] ),
    .in_( CSRs__in_[21] ),
    .out( CSRs__out[21] ),
    .reset( CSRs__reset[21] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__22
  (
    .clk( CSRs__clk[22] ),
    .en( CSRs__en[22] ),
    .in_( CSRs__in_[22] ),
    .out( CSRs__out[22] ),
    .reset( CSRs__reset[22] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__23
  (
    .clk( CSRs__clk[23] ),
    .en( CSRs__en[23] ),
    .in_( CSRs__in_[23] ),
    .out( CSRs__out[23] ),
    .reset( CSRs__reset[23] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__24
  (
    .clk( CSRs__clk[24] ),
    .en( CSRs__en[24] ),
    .in_( CSRs__in_[24] ),
    .out( CSRs__out[24] ),
    .reset( CSRs__reset[24] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__25
  (
    .clk( CSRs__clk[25] ),
    .en( CSRs__en[25] ),
    .in_( CSRs__in_[25] ),
    .out( CSRs__out[25] ),
    .reset( CSRs__reset[25] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__26
  (
    .clk( CSRs__clk[26] ),
    .en( CSRs__en[26] ),
    .in_( CSRs__in_[26] ),
    .out( CSRs__out[26] ),
    .reset( CSRs__reset[26] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__27
  (
    .clk( CSRs__clk[27] ),
    .en( CSRs__en[27] ),
    .in_( CSRs__in_[27] ),
    .out( CSRs__out[27] ),
    .reset( CSRs__reset[27] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__28
  (
    .clk( CSRs__clk[28] ),
    .en( CSRs__en[28] ),
    .in_( CSRs__in_[28] ),
    .out( CSRs__out[28] ),
    .reset( CSRs__reset[28] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__29
  (
    .clk( CSRs__clk[29] ),
    .en( CSRs__en[29] ),
    .in_( CSRs__in_[29] ),
    .out( CSRs__out[29] ),
    .reset( CSRs__reset[29] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__30
  (
    .clk( CSRs__clk[30] ),
    .en( CSRs__en[30] ),
    .in_( CSRs__in_[30] ),
    .out( CSRs__out[30] ),
    .reset( CSRs__reset[30] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__31
  (
    .clk( CSRs__clk[31] ),
    .en( CSRs__en[31] ),
    .in_( CSRs__in_[31] ),
    .out( CSRs__out[31] ),
    .reset( CSRs__reset[31] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__32
  (
    .clk( CSRs__clk[32] ),
    .en( CSRs__en[32] ),
    .in_( CSRs__in_[32] ),
    .out( CSRs__out[32] ),
    .reset( CSRs__reset[32] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__33
  (
    .clk( CSRs__clk[33] ),
    .en( CSRs__en[33] ),
    .in_( CSRs__in_[33] ),
    .out( CSRs__out[33] ),
    .reset( CSRs__reset[33] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__34
  (
    .clk( CSRs__clk[34] ),
    .en( CSRs__en[34] ),
    .in_( CSRs__in_[34] ),
    .out( CSRs__out[34] ),
    .reset( CSRs__reset[34] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__35
  (
    .clk( CSRs__clk[35] ),
    .en( CSRs__en[35] ),
    .in_( CSRs__in_[35] ),
    .out( CSRs__out[35] ),
    .reset( CSRs__reset[35] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__36
  (
    .clk( CSRs__clk[36] ),
    .en( CSRs__en[36] ),
    .in_( CSRs__in_[36] ),
    .out( CSRs__out[36] ),
    .reset( CSRs__reset[36] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__37
  (
    .clk( CSRs__clk[37] ),
    .en( CSRs__en[37] ),
    .in_( CSRs__in_[37] ),
    .out( CSRs__out[37] ),
    .reset( CSRs__reset[37] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__38
  (
    .clk( CSRs__clk[38] ),
    .en( CSRs__en[38] ),
    .in_( CSRs__in_[38] ),
    .out( CSRs__out[38] ),
    .reset( CSRs__reset[38] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__39
  (
    .clk( CSRs__clk[39] ),
    .en( CSRs__en[39] ),
    .in_( CSRs__in_[39] ),
    .out( CSRs__out[39] ),
    .reset( CSRs__reset[39] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__40
  (
    .clk( CSRs__clk[40] ),
    .en( CSRs__en[40] ),
    .in_( CSRs__in_[40] ),
    .out( CSRs__out[40] ),
    .reset( CSRs__reset[40] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__41
  (
    .clk( CSRs__clk[41] ),
    .en( CSRs__en[41] ),
    .in_( CSRs__in_[41] ),
    .out( CSRs__out[41] ),
    .reset( CSRs__reset[41] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__42
  (
    .clk( CSRs__clk[42] ),
    .en( CSRs__en[42] ),
    .in_( CSRs__in_[42] ),
    .out( CSRs__out[42] ),
    .reset( CSRs__reset[42] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__43
  (
    .clk( CSRs__clk[43] ),
    .en( CSRs__en[43] ),
    .in_( CSRs__in_[43] ),
    .out( CSRs__out[43] ),
    .reset( CSRs__reset[43] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__44
  (
    .clk( CSRs__clk[44] ),
    .en( CSRs__en[44] ),
    .in_( CSRs__in_[44] ),
    .out( CSRs__out[44] ),
    .reset( CSRs__reset[44] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__45
  (
    .clk( CSRs__clk[45] ),
    .en( CSRs__en[45] ),
    .in_( CSRs__in_[45] ),
    .out( CSRs__out[45] ),
    .reset( CSRs__reset[45] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__46
  (
    .clk( CSRs__clk[46] ),
    .en( CSRs__en[46] ),
    .in_( CSRs__in_[46] ),
    .out( CSRs__out[46] ),
    .reset( CSRs__reset[46] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__47
  (
    .clk( CSRs__clk[47] ),
    .en( CSRs__en[47] ),
    .in_( CSRs__in_[47] ),
    .out( CSRs__out[47] ),
    .reset( CSRs__reset[47] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__48
  (
    .clk( CSRs__clk[48] ),
    .en( CSRs__en[48] ),
    .in_( CSRs__in_[48] ),
    .out( CSRs__out[48] ),
    .reset( CSRs__reset[48] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__49
  (
    .clk( CSRs__clk[49] ),
    .en( CSRs__en[49] ),
    .in_( CSRs__in_[49] ),
    .out( CSRs__out[49] ),
    .reset( CSRs__reset[49] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__50
  (
    .clk( CSRs__clk[50] ),
    .en( CSRs__en[50] ),
    .in_( CSRs__in_[50] ),
    .out( CSRs__out[50] ),
    .reset( CSRs__reset[50] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__51
  (
    .clk( CSRs__clk[51] ),
    .en( CSRs__en[51] ),
    .in_( CSRs__in_[51] ),
    .out( CSRs__out[51] ),
    .reset( CSRs__reset[51] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__52
  (
    .clk( CSRs__clk[52] ),
    .en( CSRs__en[52] ),
    .in_( CSRs__in_[52] ),
    .out( CSRs__out[52] ),
    .reset( CSRs__reset[52] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__53
  (
    .clk( CSRs__clk[53] ),
    .en( CSRs__en[53] ),
    .in_( CSRs__in_[53] ),
    .out( CSRs__out[53] ),
    .reset( CSRs__reset[53] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__54
  (
    .clk( CSRs__clk[54] ),
    .en( CSRs__en[54] ),
    .in_( CSRs__in_[54] ),
    .out( CSRs__out[54] ),
    .reset( CSRs__reset[54] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__55
  (
    .clk( CSRs__clk[55] ),
    .en( CSRs__en[55] ),
    .in_( CSRs__in_[55] ),
    .out( CSRs__out[55] ),
    .reset( CSRs__reset[55] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__56
  (
    .clk( CSRs__clk[56] ),
    .en( CSRs__en[56] ),
    .in_( CSRs__in_[56] ),
    .out( CSRs__out[56] ),
    .reset( CSRs__reset[56] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__57
  (
    .clk( CSRs__clk[57] ),
    .en( CSRs__en[57] ),
    .in_( CSRs__in_[57] ),
    .out( CSRs__out[57] ),
    .reset( CSRs__reset[57] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__58
  (
    .clk( CSRs__clk[58] ),
    .en( CSRs__en[58] ),
    .in_( CSRs__in_[58] ),
    .out( CSRs__out[58] ),
    .reset( CSRs__reset[58] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__59
  (
    .clk( CSRs__clk[59] ),
    .en( CSRs__en[59] ),
    .in_( CSRs__in_[59] ),
    .out( CSRs__out[59] ),
    .reset( CSRs__reset[59] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__60
  (
    .clk( CSRs__clk[60] ),
    .en( CSRs__en[60] ),
    .in_( CSRs__in_[60] ),
    .out( CSRs__out[60] ),
    .reset( CSRs__reset[60] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__61
  (
    .clk( CSRs__clk[61] ),
    .en( CSRs__en[61] ),
    .in_( CSRs__in_[61] ),
    .out( CSRs__out[61] ),
    .reset( CSRs__reset[61] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__62
  (
    .clk( CSRs__clk[62] ),
    .en( CSRs__en[62] ),
    .in_( CSRs__in_[62] ),
    .out( CSRs__out[62] ),
    .reset( CSRs__reset[62] )
  );

  RegEnRst__Type_32__reset_value_0 CSRs__63
  (
    .clk( CSRs__clk[63] ),
    .en( CSRs__en[63] ),
    .in_( CSRs__in_[63] ),
    .out( CSRs__out[63] ),
    .reset( CSRs__reset[63] )
  );

  //-------------------------------------------------------------
  // End of component CSRs[0:63]
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ME[0:15]
  //-------------------------------------------------------------

  logic [0:0] ME__clk [0:15];
  logic [3:0] ME__id_cord [0:15];
  logic [0:0] ME__is_calc [0:15];
  logic [0:0] ME__is_done [0:15];
  logic [0:0] ME__reset [0:15];
  logic [3:0] ME__x_cord [0:15];
  logic [36:0] ME__cfg_in__msg [0:15];
  logic [0:0] ME__cfg_in__rdy [0:15];
  logic [0:0] ME__cfg_in__val [0:15];
  logic [36:0] ME__cfg_out__msg [0:15];
  logic [0:0] ME__cfg_out__rdy [0:15];
  logic [0:0] ME__cfg_out__val [0:15];
  logic [31:0] ME__in___msg [0:15];
  logic [0:0] ME__in___rdy [0:15];
  logic [0:0] ME__in___val [0:15];
  logic [0:0] ME__mem_ifc__req__en [0:15];
  CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 ME__mem_ifc__req__msg [0:15];
  logic [0:0] ME__mem_ifc__req__rdy [0:15];
  logic [0:0] ME__mem_ifc__resp__en [0:15];
  CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 ME__mem_ifc__resp__msg [0:15];
  logic [0:0] ME__mem_ifc__resp__rdy [0:15];
  logic [31:0] ME__out__msg [0:15];
  logic [0:0] ME__out__rdy [0:15];
  logic [0:0] ME__out__val [0:15];

  MemEngine__e7b85fc84228c577 ME__0
  (
    .clk( ME__clk[0] ),
    .id_cord( ME__id_cord[0] ),
    .is_calc( ME__is_calc[0] ),
    .is_done( ME__is_done[0] ),
    .reset( ME__reset[0] ),
    .x_cord( ME__x_cord[0] ),
    .cfg_in__msg( ME__cfg_in__msg[0] ),
    .cfg_in__rdy( ME__cfg_in__rdy[0] ),
    .cfg_in__val( ME__cfg_in__val[0] ),
    .cfg_out__msg( ME__cfg_out__msg[0] ),
    .cfg_out__rdy( ME__cfg_out__rdy[0] ),
    .cfg_out__val( ME__cfg_out__val[0] ),
    .in___msg( ME__in___msg[0] ),
    .in___rdy( ME__in___rdy[0] ),
    .in___val( ME__in___val[0] ),
    .mem_ifc__req__en( ME__mem_ifc__req__en[0] ),
    .mem_ifc__req__msg( ME__mem_ifc__req__msg[0] ),
    .mem_ifc__req__rdy( ME__mem_ifc__req__rdy[0] ),
    .mem_ifc__resp__en( ME__mem_ifc__resp__en[0] ),
    .mem_ifc__resp__msg( ME__mem_ifc__resp__msg[0] ),
    .mem_ifc__resp__rdy( ME__mem_ifc__resp__rdy[0] ),
    .out__msg( ME__out__msg[0] ),
    .out__rdy( ME__out__rdy[0] ),
    .out__val( ME__out__val[0] )
  );

  MemEngine__e7b85fc84228c577 ME__1
  (
    .clk( ME__clk[1] ),
    .id_cord( ME__id_cord[1] ),
    .is_calc( ME__is_calc[1] ),
    .is_done( ME__is_done[1] ),
    .reset( ME__reset[1] ),
    .x_cord( ME__x_cord[1] ),
    .cfg_in__msg( ME__cfg_in__msg[1] ),
    .cfg_in__rdy( ME__cfg_in__rdy[1] ),
    .cfg_in__val( ME__cfg_in__val[1] ),
    .cfg_out__msg( ME__cfg_out__msg[1] ),
    .cfg_out__rdy( ME__cfg_out__rdy[1] ),
    .cfg_out__val( ME__cfg_out__val[1] ),
    .in___msg( ME__in___msg[1] ),
    .in___rdy( ME__in___rdy[1] ),
    .in___val( ME__in___val[1] ),
    .mem_ifc__req__en( ME__mem_ifc__req__en[1] ),
    .mem_ifc__req__msg( ME__mem_ifc__req__msg[1] ),
    .mem_ifc__req__rdy( ME__mem_ifc__req__rdy[1] ),
    .mem_ifc__resp__en( ME__mem_ifc__resp__en[1] ),
    .mem_ifc__resp__msg( ME__mem_ifc__resp__msg[1] ),
    .mem_ifc__resp__rdy( ME__mem_ifc__resp__rdy[1] ),
    .out__msg( ME__out__msg[1] ),
    .out__rdy( ME__out__rdy[1] ),
    .out__val( ME__out__val[1] )
  );

  MemEngine__e7b85fc84228c577 ME__2
  (
    .clk( ME__clk[2] ),
    .id_cord( ME__id_cord[2] ),
    .is_calc( ME__is_calc[2] ),
    .is_done( ME__is_done[2] ),
    .reset( ME__reset[2] ),
    .x_cord( ME__x_cord[2] ),
    .cfg_in__msg( ME__cfg_in__msg[2] ),
    .cfg_in__rdy( ME__cfg_in__rdy[2] ),
    .cfg_in__val( ME__cfg_in__val[2] ),
    .cfg_out__msg( ME__cfg_out__msg[2] ),
    .cfg_out__rdy( ME__cfg_out__rdy[2] ),
    .cfg_out__val( ME__cfg_out__val[2] ),
    .in___msg( ME__in___msg[2] ),
    .in___rdy( ME__in___rdy[2] ),
    .in___val( ME__in___val[2] ),
    .mem_ifc__req__en( ME__mem_ifc__req__en[2] ),
    .mem_ifc__req__msg( ME__mem_ifc__req__msg[2] ),
    .mem_ifc__req__rdy( ME__mem_ifc__req__rdy[2] ),
    .mem_ifc__resp__en( ME__mem_ifc__resp__en[2] ),
    .mem_ifc__resp__msg( ME__mem_ifc__resp__msg[2] ),
    .mem_ifc__resp__rdy( ME__mem_ifc__resp__rdy[2] ),
    .out__msg( ME__out__msg[2] ),
    .out__rdy( ME__out__rdy[2] ),
    .out__val( ME__out__val[2] )
  );

  MemEngine__e7b85fc84228c577 ME__3
  (
    .clk( ME__clk[3] ),
    .id_cord( ME__id_cord[3] ),
    .is_calc( ME__is_calc[3] ),
    .is_done( ME__is_done[3] ),
    .reset( ME__reset[3] ),
    .x_cord( ME__x_cord[3] ),
    .cfg_in__msg( ME__cfg_in__msg[3] ),
    .cfg_in__rdy( ME__cfg_in__rdy[3] ),
    .cfg_in__val( ME__cfg_in__val[3] ),
    .cfg_out__msg( ME__cfg_out__msg[3] ),
    .cfg_out__rdy( ME__cfg_out__rdy[3] ),
    .cfg_out__val( ME__cfg_out__val[3] ),
    .in___msg( ME__in___msg[3] ),
    .in___rdy( ME__in___rdy[3] ),
    .in___val( ME__in___val[3] ),
    .mem_ifc__req__en( ME__mem_ifc__req__en[3] ),
    .mem_ifc__req__msg( ME__mem_ifc__req__msg[3] ),
    .mem_ifc__req__rdy( ME__mem_ifc__req__rdy[3] ),
    .mem_ifc__resp__en( ME__mem_ifc__resp__en[3] ),
    .mem_ifc__resp__msg( ME__mem_ifc__resp__msg[3] ),
    .mem_ifc__resp__rdy( ME__mem_ifc__resp__rdy[3] ),
    .out__msg( ME__out__msg[3] ),
    .out__rdy( ME__out__rdy[3] ),
    .out__val( ME__out__val[3] )
  );

  MemEngine__e7b85fc84228c577 ME__4
  (
    .clk( ME__clk[4] ),
    .id_cord( ME__id_cord[4] ),
    .is_calc( ME__is_calc[4] ),
    .is_done( ME__is_done[4] ),
    .reset( ME__reset[4] ),
    .x_cord( ME__x_cord[4] ),
    .cfg_in__msg( ME__cfg_in__msg[4] ),
    .cfg_in__rdy( ME__cfg_in__rdy[4] ),
    .cfg_in__val( ME__cfg_in__val[4] ),
    .cfg_out__msg( ME__cfg_out__msg[4] ),
    .cfg_out__rdy( ME__cfg_out__rdy[4] ),
    .cfg_out__val( ME__cfg_out__val[4] ),
    .in___msg( ME__in___msg[4] ),
    .in___rdy( ME__in___rdy[4] ),
    .in___val( ME__in___val[4] ),
    .mem_ifc__req__en( ME__mem_ifc__req__en[4] ),
    .mem_ifc__req__msg( ME__mem_ifc__req__msg[4] ),
    .mem_ifc__req__rdy( ME__mem_ifc__req__rdy[4] ),
    .mem_ifc__resp__en( ME__mem_ifc__resp__en[4] ),
    .mem_ifc__resp__msg( ME__mem_ifc__resp__msg[4] ),
    .mem_ifc__resp__rdy( ME__mem_ifc__resp__rdy[4] ),
    .out__msg( ME__out__msg[4] ),
    .out__rdy( ME__out__rdy[4] ),
    .out__val( ME__out__val[4] )
  );

  MemEngine__e7b85fc84228c577 ME__5
  (
    .clk( ME__clk[5] ),
    .id_cord( ME__id_cord[5] ),
    .is_calc( ME__is_calc[5] ),
    .is_done( ME__is_done[5] ),
    .reset( ME__reset[5] ),
    .x_cord( ME__x_cord[5] ),
    .cfg_in__msg( ME__cfg_in__msg[5] ),
    .cfg_in__rdy( ME__cfg_in__rdy[5] ),
    .cfg_in__val( ME__cfg_in__val[5] ),
    .cfg_out__msg( ME__cfg_out__msg[5] ),
    .cfg_out__rdy( ME__cfg_out__rdy[5] ),
    .cfg_out__val( ME__cfg_out__val[5] ),
    .in___msg( ME__in___msg[5] ),
    .in___rdy( ME__in___rdy[5] ),
    .in___val( ME__in___val[5] ),
    .mem_ifc__req__en( ME__mem_ifc__req__en[5] ),
    .mem_ifc__req__msg( ME__mem_ifc__req__msg[5] ),
    .mem_ifc__req__rdy( ME__mem_ifc__req__rdy[5] ),
    .mem_ifc__resp__en( ME__mem_ifc__resp__en[5] ),
    .mem_ifc__resp__msg( ME__mem_ifc__resp__msg[5] ),
    .mem_ifc__resp__rdy( ME__mem_ifc__resp__rdy[5] ),
    .out__msg( ME__out__msg[5] ),
    .out__rdy( ME__out__rdy[5] ),
    .out__val( ME__out__val[5] )
  );

  MemEngine__e7b85fc84228c577 ME__6
  (
    .clk( ME__clk[6] ),
    .id_cord( ME__id_cord[6] ),
    .is_calc( ME__is_calc[6] ),
    .is_done( ME__is_done[6] ),
    .reset( ME__reset[6] ),
    .x_cord( ME__x_cord[6] ),
    .cfg_in__msg( ME__cfg_in__msg[6] ),
    .cfg_in__rdy( ME__cfg_in__rdy[6] ),
    .cfg_in__val( ME__cfg_in__val[6] ),
    .cfg_out__msg( ME__cfg_out__msg[6] ),
    .cfg_out__rdy( ME__cfg_out__rdy[6] ),
    .cfg_out__val( ME__cfg_out__val[6] ),
    .in___msg( ME__in___msg[6] ),
    .in___rdy( ME__in___rdy[6] ),
    .in___val( ME__in___val[6] ),
    .mem_ifc__req__en( ME__mem_ifc__req__en[6] ),
    .mem_ifc__req__msg( ME__mem_ifc__req__msg[6] ),
    .mem_ifc__req__rdy( ME__mem_ifc__req__rdy[6] ),
    .mem_ifc__resp__en( ME__mem_ifc__resp__en[6] ),
    .mem_ifc__resp__msg( ME__mem_ifc__resp__msg[6] ),
    .mem_ifc__resp__rdy( ME__mem_ifc__resp__rdy[6] ),
    .out__msg( ME__out__msg[6] ),
    .out__rdy( ME__out__rdy[6] ),
    .out__val( ME__out__val[6] )
  );

  MemEngine__e7b85fc84228c577 ME__7
  (
    .clk( ME__clk[7] ),
    .id_cord( ME__id_cord[7] ),
    .is_calc( ME__is_calc[7] ),
    .is_done( ME__is_done[7] ),
    .reset( ME__reset[7] ),
    .x_cord( ME__x_cord[7] ),
    .cfg_in__msg( ME__cfg_in__msg[7] ),
    .cfg_in__rdy( ME__cfg_in__rdy[7] ),
    .cfg_in__val( ME__cfg_in__val[7] ),
    .cfg_out__msg( ME__cfg_out__msg[7] ),
    .cfg_out__rdy( ME__cfg_out__rdy[7] ),
    .cfg_out__val( ME__cfg_out__val[7] ),
    .in___msg( ME__in___msg[7] ),
    .in___rdy( ME__in___rdy[7] ),
    .in___val( ME__in___val[7] ),
    .mem_ifc__req__en( ME__mem_ifc__req__en[7] ),
    .mem_ifc__req__msg( ME__mem_ifc__req__msg[7] ),
    .mem_ifc__req__rdy( ME__mem_ifc__req__rdy[7] ),
    .mem_ifc__resp__en( ME__mem_ifc__resp__en[7] ),
    .mem_ifc__resp__msg( ME__mem_ifc__resp__msg[7] ),
    .mem_ifc__resp__rdy( ME__mem_ifc__resp__rdy[7] ),
    .out__msg( ME__out__msg[7] ),
    .out__rdy( ME__out__rdy[7] ),
    .out__val( ME__out__val[7] )
  );

  MemEngine__e7b85fc84228c577 ME__8
  (
    .clk( ME__clk[8] ),
    .id_cord( ME__id_cord[8] ),
    .is_calc( ME__is_calc[8] ),
    .is_done( ME__is_done[8] ),
    .reset( ME__reset[8] ),
    .x_cord( ME__x_cord[8] ),
    .cfg_in__msg( ME__cfg_in__msg[8] ),
    .cfg_in__rdy( ME__cfg_in__rdy[8] ),
    .cfg_in__val( ME__cfg_in__val[8] ),
    .cfg_out__msg( ME__cfg_out__msg[8] ),
    .cfg_out__rdy( ME__cfg_out__rdy[8] ),
    .cfg_out__val( ME__cfg_out__val[8] ),
    .in___msg( ME__in___msg[8] ),
    .in___rdy( ME__in___rdy[8] ),
    .in___val( ME__in___val[8] ),
    .mem_ifc__req__en( ME__mem_ifc__req__en[8] ),
    .mem_ifc__req__msg( ME__mem_ifc__req__msg[8] ),
    .mem_ifc__req__rdy( ME__mem_ifc__req__rdy[8] ),
    .mem_ifc__resp__en( ME__mem_ifc__resp__en[8] ),
    .mem_ifc__resp__msg( ME__mem_ifc__resp__msg[8] ),
    .mem_ifc__resp__rdy( ME__mem_ifc__resp__rdy[8] ),
    .out__msg( ME__out__msg[8] ),
    .out__rdy( ME__out__rdy[8] ),
    .out__val( ME__out__val[8] )
  );

  MemEngine__e7b85fc84228c577 ME__9
  (
    .clk( ME__clk[9] ),
    .id_cord( ME__id_cord[9] ),
    .is_calc( ME__is_calc[9] ),
    .is_done( ME__is_done[9] ),
    .reset( ME__reset[9] ),
    .x_cord( ME__x_cord[9] ),
    .cfg_in__msg( ME__cfg_in__msg[9] ),
    .cfg_in__rdy( ME__cfg_in__rdy[9] ),
    .cfg_in__val( ME__cfg_in__val[9] ),
    .cfg_out__msg( ME__cfg_out__msg[9] ),
    .cfg_out__rdy( ME__cfg_out__rdy[9] ),
    .cfg_out__val( ME__cfg_out__val[9] ),
    .in___msg( ME__in___msg[9] ),
    .in___rdy( ME__in___rdy[9] ),
    .in___val( ME__in___val[9] ),
    .mem_ifc__req__en( ME__mem_ifc__req__en[9] ),
    .mem_ifc__req__msg( ME__mem_ifc__req__msg[9] ),
    .mem_ifc__req__rdy( ME__mem_ifc__req__rdy[9] ),
    .mem_ifc__resp__en( ME__mem_ifc__resp__en[9] ),
    .mem_ifc__resp__msg( ME__mem_ifc__resp__msg[9] ),
    .mem_ifc__resp__rdy( ME__mem_ifc__resp__rdy[9] ),
    .out__msg( ME__out__msg[9] ),
    .out__rdy( ME__out__rdy[9] ),
    .out__val( ME__out__val[9] )
  );

  MemEngine__e7b85fc84228c577 ME__10
  (
    .clk( ME__clk[10] ),
    .id_cord( ME__id_cord[10] ),
    .is_calc( ME__is_calc[10] ),
    .is_done( ME__is_done[10] ),
    .reset( ME__reset[10] ),
    .x_cord( ME__x_cord[10] ),
    .cfg_in__msg( ME__cfg_in__msg[10] ),
    .cfg_in__rdy( ME__cfg_in__rdy[10] ),
    .cfg_in__val( ME__cfg_in__val[10] ),
    .cfg_out__msg( ME__cfg_out__msg[10] ),
    .cfg_out__rdy( ME__cfg_out__rdy[10] ),
    .cfg_out__val( ME__cfg_out__val[10] ),
    .in___msg( ME__in___msg[10] ),
    .in___rdy( ME__in___rdy[10] ),
    .in___val( ME__in___val[10] ),
    .mem_ifc__req__en( ME__mem_ifc__req__en[10] ),
    .mem_ifc__req__msg( ME__mem_ifc__req__msg[10] ),
    .mem_ifc__req__rdy( ME__mem_ifc__req__rdy[10] ),
    .mem_ifc__resp__en( ME__mem_ifc__resp__en[10] ),
    .mem_ifc__resp__msg( ME__mem_ifc__resp__msg[10] ),
    .mem_ifc__resp__rdy( ME__mem_ifc__resp__rdy[10] ),
    .out__msg( ME__out__msg[10] ),
    .out__rdy( ME__out__rdy[10] ),
    .out__val( ME__out__val[10] )
  );

  MemEngine__e7b85fc84228c577 ME__11
  (
    .clk( ME__clk[11] ),
    .id_cord( ME__id_cord[11] ),
    .is_calc( ME__is_calc[11] ),
    .is_done( ME__is_done[11] ),
    .reset( ME__reset[11] ),
    .x_cord( ME__x_cord[11] ),
    .cfg_in__msg( ME__cfg_in__msg[11] ),
    .cfg_in__rdy( ME__cfg_in__rdy[11] ),
    .cfg_in__val( ME__cfg_in__val[11] ),
    .cfg_out__msg( ME__cfg_out__msg[11] ),
    .cfg_out__rdy( ME__cfg_out__rdy[11] ),
    .cfg_out__val( ME__cfg_out__val[11] ),
    .in___msg( ME__in___msg[11] ),
    .in___rdy( ME__in___rdy[11] ),
    .in___val( ME__in___val[11] ),
    .mem_ifc__req__en( ME__mem_ifc__req__en[11] ),
    .mem_ifc__req__msg( ME__mem_ifc__req__msg[11] ),
    .mem_ifc__req__rdy( ME__mem_ifc__req__rdy[11] ),
    .mem_ifc__resp__en( ME__mem_ifc__resp__en[11] ),
    .mem_ifc__resp__msg( ME__mem_ifc__resp__msg[11] ),
    .mem_ifc__resp__rdy( ME__mem_ifc__resp__rdy[11] ),
    .out__msg( ME__out__msg[11] ),
    .out__rdy( ME__out__rdy[11] ),
    .out__val( ME__out__val[11] )
  );

  MemEngine__e7b85fc84228c577 ME__12
  (
    .clk( ME__clk[12] ),
    .id_cord( ME__id_cord[12] ),
    .is_calc( ME__is_calc[12] ),
    .is_done( ME__is_done[12] ),
    .reset( ME__reset[12] ),
    .x_cord( ME__x_cord[12] ),
    .cfg_in__msg( ME__cfg_in__msg[12] ),
    .cfg_in__rdy( ME__cfg_in__rdy[12] ),
    .cfg_in__val( ME__cfg_in__val[12] ),
    .cfg_out__msg( ME__cfg_out__msg[12] ),
    .cfg_out__rdy( ME__cfg_out__rdy[12] ),
    .cfg_out__val( ME__cfg_out__val[12] ),
    .in___msg( ME__in___msg[12] ),
    .in___rdy( ME__in___rdy[12] ),
    .in___val( ME__in___val[12] ),
    .mem_ifc__req__en( ME__mem_ifc__req__en[12] ),
    .mem_ifc__req__msg( ME__mem_ifc__req__msg[12] ),
    .mem_ifc__req__rdy( ME__mem_ifc__req__rdy[12] ),
    .mem_ifc__resp__en( ME__mem_ifc__resp__en[12] ),
    .mem_ifc__resp__msg( ME__mem_ifc__resp__msg[12] ),
    .mem_ifc__resp__rdy( ME__mem_ifc__resp__rdy[12] ),
    .out__msg( ME__out__msg[12] ),
    .out__rdy( ME__out__rdy[12] ),
    .out__val( ME__out__val[12] )
  );

  MemEngine__e7b85fc84228c577 ME__13
  (
    .clk( ME__clk[13] ),
    .id_cord( ME__id_cord[13] ),
    .is_calc( ME__is_calc[13] ),
    .is_done( ME__is_done[13] ),
    .reset( ME__reset[13] ),
    .x_cord( ME__x_cord[13] ),
    .cfg_in__msg( ME__cfg_in__msg[13] ),
    .cfg_in__rdy( ME__cfg_in__rdy[13] ),
    .cfg_in__val( ME__cfg_in__val[13] ),
    .cfg_out__msg( ME__cfg_out__msg[13] ),
    .cfg_out__rdy( ME__cfg_out__rdy[13] ),
    .cfg_out__val( ME__cfg_out__val[13] ),
    .in___msg( ME__in___msg[13] ),
    .in___rdy( ME__in___rdy[13] ),
    .in___val( ME__in___val[13] ),
    .mem_ifc__req__en( ME__mem_ifc__req__en[13] ),
    .mem_ifc__req__msg( ME__mem_ifc__req__msg[13] ),
    .mem_ifc__req__rdy( ME__mem_ifc__req__rdy[13] ),
    .mem_ifc__resp__en( ME__mem_ifc__resp__en[13] ),
    .mem_ifc__resp__msg( ME__mem_ifc__resp__msg[13] ),
    .mem_ifc__resp__rdy( ME__mem_ifc__resp__rdy[13] ),
    .out__msg( ME__out__msg[13] ),
    .out__rdy( ME__out__rdy[13] ),
    .out__val( ME__out__val[13] )
  );

  MemEngine__e7b85fc84228c577 ME__14
  (
    .clk( ME__clk[14] ),
    .id_cord( ME__id_cord[14] ),
    .is_calc( ME__is_calc[14] ),
    .is_done( ME__is_done[14] ),
    .reset( ME__reset[14] ),
    .x_cord( ME__x_cord[14] ),
    .cfg_in__msg( ME__cfg_in__msg[14] ),
    .cfg_in__rdy( ME__cfg_in__rdy[14] ),
    .cfg_in__val( ME__cfg_in__val[14] ),
    .cfg_out__msg( ME__cfg_out__msg[14] ),
    .cfg_out__rdy( ME__cfg_out__rdy[14] ),
    .cfg_out__val( ME__cfg_out__val[14] ),
    .in___msg( ME__in___msg[14] ),
    .in___rdy( ME__in___rdy[14] ),
    .in___val( ME__in___val[14] ),
    .mem_ifc__req__en( ME__mem_ifc__req__en[14] ),
    .mem_ifc__req__msg( ME__mem_ifc__req__msg[14] ),
    .mem_ifc__req__rdy( ME__mem_ifc__req__rdy[14] ),
    .mem_ifc__resp__en( ME__mem_ifc__resp__en[14] ),
    .mem_ifc__resp__msg( ME__mem_ifc__resp__msg[14] ),
    .mem_ifc__resp__rdy( ME__mem_ifc__resp__rdy[14] ),
    .out__msg( ME__out__msg[14] ),
    .out__rdy( ME__out__rdy[14] ),
    .out__val( ME__out__val[14] )
  );

  MemEngine__e7b85fc84228c577 ME__15
  (
    .clk( ME__clk[15] ),
    .id_cord( ME__id_cord[15] ),
    .is_calc( ME__is_calc[15] ),
    .is_done( ME__is_done[15] ),
    .reset( ME__reset[15] ),
    .x_cord( ME__x_cord[15] ),
    .cfg_in__msg( ME__cfg_in__msg[15] ),
    .cfg_in__rdy( ME__cfg_in__rdy[15] ),
    .cfg_in__val( ME__cfg_in__val[15] ),
    .cfg_out__msg( ME__cfg_out__msg[15] ),
    .cfg_out__rdy( ME__cfg_out__rdy[15] ),
    .cfg_out__val( ME__cfg_out__val[15] ),
    .in___msg( ME__in___msg[15] ),
    .in___rdy( ME__in___rdy[15] ),
    .in___val( ME__in___val[15] ),
    .mem_ifc__req__en( ME__mem_ifc__req__en[15] ),
    .mem_ifc__req__msg( ME__mem_ifc__req__msg[15] ),
    .mem_ifc__req__rdy( ME__mem_ifc__req__rdy[15] ),
    .mem_ifc__resp__en( ME__mem_ifc__resp__en[15] ),
    .mem_ifc__resp__msg( ME__mem_ifc__resp__msg[15] ),
    .mem_ifc__resp__rdy( ME__mem_ifc__resp__rdy[15] ),
    .out__msg( ME__out__msg[15] ),
    .out__rdy( ME__out__rdy[15] ),
    .out__val( ME__out__val[15] )
  );

  //-------------------------------------------------------------
  // End of component ME[0:15]
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component PE_rc[0:63]
  //-------------------------------------------------------------

  logic [0:0] PE_rc__clk [0:63];
  logic [0:0] PE_rc__is_calc [0:63];
  logic [0:0] PE_rc__is_occupied [0:63];
  logic [0:0] PE_rc__reset [0:63];
  logic [3:0] PE_rc__x_cord [0:63];
  logic [3:0] PE_rc__y_cord [0:63];
  logic [36:0] PE_rc__cfg_in__msg [0:63];
  logic [0:0] PE_rc__cfg_in__rdy [0:63];
  logic [0:0] PE_rc__cfg_in__val [0:63];
  logic [36:0] PE_rc__cfg_out__msg [0:63];
  logic [0:0] PE_rc__cfg_out__rdy [0:63];
  logic [0:0] PE_rc__cfg_out__val [0:63];
  logic [31:0] PE_rc__in___msg [0:63][0:3];
  logic [0:0] PE_rc__in___rdy [0:63][0:3];
  logic [0:0] PE_rc__in___val [0:63][0:3];
  logic [31:0] PE_rc__out__msg [0:63][0:3];
  logic [0:0] PE_rc__out__rdy [0:63][0:3];
  logic [0:0] PE_rc__out__val [0:63][0:3];

  ProcElement__e7b85fc84228c577 PE_rc__0
  (
    .clk( PE_rc__clk[0] ),
    .is_calc( PE_rc__is_calc[0] ),
    .is_occupied( PE_rc__is_occupied[0] ),
    .reset( PE_rc__reset[0] ),
    .x_cord( PE_rc__x_cord[0] ),
    .y_cord( PE_rc__y_cord[0] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[0] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[0] ),
    .cfg_in__val( PE_rc__cfg_in__val[0] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[0] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[0] ),
    .cfg_out__val( PE_rc__cfg_out__val[0] ),
    .in___msg( PE_rc__in___msg[0] ),
    .in___rdy( PE_rc__in___rdy[0] ),
    .in___val( PE_rc__in___val[0] ),
    .out__msg( PE_rc__out__msg[0] ),
    .out__rdy( PE_rc__out__rdy[0] ),
    .out__val( PE_rc__out__val[0] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__1
  (
    .clk( PE_rc__clk[1] ),
    .is_calc( PE_rc__is_calc[1] ),
    .is_occupied( PE_rc__is_occupied[1] ),
    .reset( PE_rc__reset[1] ),
    .x_cord( PE_rc__x_cord[1] ),
    .y_cord( PE_rc__y_cord[1] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[1] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[1] ),
    .cfg_in__val( PE_rc__cfg_in__val[1] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[1] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[1] ),
    .cfg_out__val( PE_rc__cfg_out__val[1] ),
    .in___msg( PE_rc__in___msg[1] ),
    .in___rdy( PE_rc__in___rdy[1] ),
    .in___val( PE_rc__in___val[1] ),
    .out__msg( PE_rc__out__msg[1] ),
    .out__rdy( PE_rc__out__rdy[1] ),
    .out__val( PE_rc__out__val[1] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__2
  (
    .clk( PE_rc__clk[2] ),
    .is_calc( PE_rc__is_calc[2] ),
    .is_occupied( PE_rc__is_occupied[2] ),
    .reset( PE_rc__reset[2] ),
    .x_cord( PE_rc__x_cord[2] ),
    .y_cord( PE_rc__y_cord[2] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[2] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[2] ),
    .cfg_in__val( PE_rc__cfg_in__val[2] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[2] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[2] ),
    .cfg_out__val( PE_rc__cfg_out__val[2] ),
    .in___msg( PE_rc__in___msg[2] ),
    .in___rdy( PE_rc__in___rdy[2] ),
    .in___val( PE_rc__in___val[2] ),
    .out__msg( PE_rc__out__msg[2] ),
    .out__rdy( PE_rc__out__rdy[2] ),
    .out__val( PE_rc__out__val[2] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__3
  (
    .clk( PE_rc__clk[3] ),
    .is_calc( PE_rc__is_calc[3] ),
    .is_occupied( PE_rc__is_occupied[3] ),
    .reset( PE_rc__reset[3] ),
    .x_cord( PE_rc__x_cord[3] ),
    .y_cord( PE_rc__y_cord[3] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[3] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[3] ),
    .cfg_in__val( PE_rc__cfg_in__val[3] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[3] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[3] ),
    .cfg_out__val( PE_rc__cfg_out__val[3] ),
    .in___msg( PE_rc__in___msg[3] ),
    .in___rdy( PE_rc__in___rdy[3] ),
    .in___val( PE_rc__in___val[3] ),
    .out__msg( PE_rc__out__msg[3] ),
    .out__rdy( PE_rc__out__rdy[3] ),
    .out__val( PE_rc__out__val[3] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__4
  (
    .clk( PE_rc__clk[4] ),
    .is_calc( PE_rc__is_calc[4] ),
    .is_occupied( PE_rc__is_occupied[4] ),
    .reset( PE_rc__reset[4] ),
    .x_cord( PE_rc__x_cord[4] ),
    .y_cord( PE_rc__y_cord[4] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[4] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[4] ),
    .cfg_in__val( PE_rc__cfg_in__val[4] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[4] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[4] ),
    .cfg_out__val( PE_rc__cfg_out__val[4] ),
    .in___msg( PE_rc__in___msg[4] ),
    .in___rdy( PE_rc__in___rdy[4] ),
    .in___val( PE_rc__in___val[4] ),
    .out__msg( PE_rc__out__msg[4] ),
    .out__rdy( PE_rc__out__rdy[4] ),
    .out__val( PE_rc__out__val[4] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__5
  (
    .clk( PE_rc__clk[5] ),
    .is_calc( PE_rc__is_calc[5] ),
    .is_occupied( PE_rc__is_occupied[5] ),
    .reset( PE_rc__reset[5] ),
    .x_cord( PE_rc__x_cord[5] ),
    .y_cord( PE_rc__y_cord[5] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[5] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[5] ),
    .cfg_in__val( PE_rc__cfg_in__val[5] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[5] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[5] ),
    .cfg_out__val( PE_rc__cfg_out__val[5] ),
    .in___msg( PE_rc__in___msg[5] ),
    .in___rdy( PE_rc__in___rdy[5] ),
    .in___val( PE_rc__in___val[5] ),
    .out__msg( PE_rc__out__msg[5] ),
    .out__rdy( PE_rc__out__rdy[5] ),
    .out__val( PE_rc__out__val[5] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__6
  (
    .clk( PE_rc__clk[6] ),
    .is_calc( PE_rc__is_calc[6] ),
    .is_occupied( PE_rc__is_occupied[6] ),
    .reset( PE_rc__reset[6] ),
    .x_cord( PE_rc__x_cord[6] ),
    .y_cord( PE_rc__y_cord[6] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[6] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[6] ),
    .cfg_in__val( PE_rc__cfg_in__val[6] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[6] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[6] ),
    .cfg_out__val( PE_rc__cfg_out__val[6] ),
    .in___msg( PE_rc__in___msg[6] ),
    .in___rdy( PE_rc__in___rdy[6] ),
    .in___val( PE_rc__in___val[6] ),
    .out__msg( PE_rc__out__msg[6] ),
    .out__rdy( PE_rc__out__rdy[6] ),
    .out__val( PE_rc__out__val[6] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__7
  (
    .clk( PE_rc__clk[7] ),
    .is_calc( PE_rc__is_calc[7] ),
    .is_occupied( PE_rc__is_occupied[7] ),
    .reset( PE_rc__reset[7] ),
    .x_cord( PE_rc__x_cord[7] ),
    .y_cord( PE_rc__y_cord[7] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[7] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[7] ),
    .cfg_in__val( PE_rc__cfg_in__val[7] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[7] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[7] ),
    .cfg_out__val( PE_rc__cfg_out__val[7] ),
    .in___msg( PE_rc__in___msg[7] ),
    .in___rdy( PE_rc__in___rdy[7] ),
    .in___val( PE_rc__in___val[7] ),
    .out__msg( PE_rc__out__msg[7] ),
    .out__rdy( PE_rc__out__rdy[7] ),
    .out__val( PE_rc__out__val[7] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__8
  (
    .clk( PE_rc__clk[8] ),
    .is_calc( PE_rc__is_calc[8] ),
    .is_occupied( PE_rc__is_occupied[8] ),
    .reset( PE_rc__reset[8] ),
    .x_cord( PE_rc__x_cord[8] ),
    .y_cord( PE_rc__y_cord[8] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[8] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[8] ),
    .cfg_in__val( PE_rc__cfg_in__val[8] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[8] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[8] ),
    .cfg_out__val( PE_rc__cfg_out__val[8] ),
    .in___msg( PE_rc__in___msg[8] ),
    .in___rdy( PE_rc__in___rdy[8] ),
    .in___val( PE_rc__in___val[8] ),
    .out__msg( PE_rc__out__msg[8] ),
    .out__rdy( PE_rc__out__rdy[8] ),
    .out__val( PE_rc__out__val[8] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__9
  (
    .clk( PE_rc__clk[9] ),
    .is_calc( PE_rc__is_calc[9] ),
    .is_occupied( PE_rc__is_occupied[9] ),
    .reset( PE_rc__reset[9] ),
    .x_cord( PE_rc__x_cord[9] ),
    .y_cord( PE_rc__y_cord[9] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[9] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[9] ),
    .cfg_in__val( PE_rc__cfg_in__val[9] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[9] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[9] ),
    .cfg_out__val( PE_rc__cfg_out__val[9] ),
    .in___msg( PE_rc__in___msg[9] ),
    .in___rdy( PE_rc__in___rdy[9] ),
    .in___val( PE_rc__in___val[9] ),
    .out__msg( PE_rc__out__msg[9] ),
    .out__rdy( PE_rc__out__rdy[9] ),
    .out__val( PE_rc__out__val[9] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__10
  (
    .clk( PE_rc__clk[10] ),
    .is_calc( PE_rc__is_calc[10] ),
    .is_occupied( PE_rc__is_occupied[10] ),
    .reset( PE_rc__reset[10] ),
    .x_cord( PE_rc__x_cord[10] ),
    .y_cord( PE_rc__y_cord[10] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[10] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[10] ),
    .cfg_in__val( PE_rc__cfg_in__val[10] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[10] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[10] ),
    .cfg_out__val( PE_rc__cfg_out__val[10] ),
    .in___msg( PE_rc__in___msg[10] ),
    .in___rdy( PE_rc__in___rdy[10] ),
    .in___val( PE_rc__in___val[10] ),
    .out__msg( PE_rc__out__msg[10] ),
    .out__rdy( PE_rc__out__rdy[10] ),
    .out__val( PE_rc__out__val[10] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__11
  (
    .clk( PE_rc__clk[11] ),
    .is_calc( PE_rc__is_calc[11] ),
    .is_occupied( PE_rc__is_occupied[11] ),
    .reset( PE_rc__reset[11] ),
    .x_cord( PE_rc__x_cord[11] ),
    .y_cord( PE_rc__y_cord[11] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[11] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[11] ),
    .cfg_in__val( PE_rc__cfg_in__val[11] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[11] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[11] ),
    .cfg_out__val( PE_rc__cfg_out__val[11] ),
    .in___msg( PE_rc__in___msg[11] ),
    .in___rdy( PE_rc__in___rdy[11] ),
    .in___val( PE_rc__in___val[11] ),
    .out__msg( PE_rc__out__msg[11] ),
    .out__rdy( PE_rc__out__rdy[11] ),
    .out__val( PE_rc__out__val[11] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__12
  (
    .clk( PE_rc__clk[12] ),
    .is_calc( PE_rc__is_calc[12] ),
    .is_occupied( PE_rc__is_occupied[12] ),
    .reset( PE_rc__reset[12] ),
    .x_cord( PE_rc__x_cord[12] ),
    .y_cord( PE_rc__y_cord[12] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[12] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[12] ),
    .cfg_in__val( PE_rc__cfg_in__val[12] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[12] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[12] ),
    .cfg_out__val( PE_rc__cfg_out__val[12] ),
    .in___msg( PE_rc__in___msg[12] ),
    .in___rdy( PE_rc__in___rdy[12] ),
    .in___val( PE_rc__in___val[12] ),
    .out__msg( PE_rc__out__msg[12] ),
    .out__rdy( PE_rc__out__rdy[12] ),
    .out__val( PE_rc__out__val[12] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__13
  (
    .clk( PE_rc__clk[13] ),
    .is_calc( PE_rc__is_calc[13] ),
    .is_occupied( PE_rc__is_occupied[13] ),
    .reset( PE_rc__reset[13] ),
    .x_cord( PE_rc__x_cord[13] ),
    .y_cord( PE_rc__y_cord[13] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[13] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[13] ),
    .cfg_in__val( PE_rc__cfg_in__val[13] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[13] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[13] ),
    .cfg_out__val( PE_rc__cfg_out__val[13] ),
    .in___msg( PE_rc__in___msg[13] ),
    .in___rdy( PE_rc__in___rdy[13] ),
    .in___val( PE_rc__in___val[13] ),
    .out__msg( PE_rc__out__msg[13] ),
    .out__rdy( PE_rc__out__rdy[13] ),
    .out__val( PE_rc__out__val[13] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__14
  (
    .clk( PE_rc__clk[14] ),
    .is_calc( PE_rc__is_calc[14] ),
    .is_occupied( PE_rc__is_occupied[14] ),
    .reset( PE_rc__reset[14] ),
    .x_cord( PE_rc__x_cord[14] ),
    .y_cord( PE_rc__y_cord[14] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[14] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[14] ),
    .cfg_in__val( PE_rc__cfg_in__val[14] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[14] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[14] ),
    .cfg_out__val( PE_rc__cfg_out__val[14] ),
    .in___msg( PE_rc__in___msg[14] ),
    .in___rdy( PE_rc__in___rdy[14] ),
    .in___val( PE_rc__in___val[14] ),
    .out__msg( PE_rc__out__msg[14] ),
    .out__rdy( PE_rc__out__rdy[14] ),
    .out__val( PE_rc__out__val[14] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__15
  (
    .clk( PE_rc__clk[15] ),
    .is_calc( PE_rc__is_calc[15] ),
    .is_occupied( PE_rc__is_occupied[15] ),
    .reset( PE_rc__reset[15] ),
    .x_cord( PE_rc__x_cord[15] ),
    .y_cord( PE_rc__y_cord[15] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[15] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[15] ),
    .cfg_in__val( PE_rc__cfg_in__val[15] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[15] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[15] ),
    .cfg_out__val( PE_rc__cfg_out__val[15] ),
    .in___msg( PE_rc__in___msg[15] ),
    .in___rdy( PE_rc__in___rdy[15] ),
    .in___val( PE_rc__in___val[15] ),
    .out__msg( PE_rc__out__msg[15] ),
    .out__rdy( PE_rc__out__rdy[15] ),
    .out__val( PE_rc__out__val[15] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__16
  (
    .clk( PE_rc__clk[16] ),
    .is_calc( PE_rc__is_calc[16] ),
    .is_occupied( PE_rc__is_occupied[16] ),
    .reset( PE_rc__reset[16] ),
    .x_cord( PE_rc__x_cord[16] ),
    .y_cord( PE_rc__y_cord[16] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[16] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[16] ),
    .cfg_in__val( PE_rc__cfg_in__val[16] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[16] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[16] ),
    .cfg_out__val( PE_rc__cfg_out__val[16] ),
    .in___msg( PE_rc__in___msg[16] ),
    .in___rdy( PE_rc__in___rdy[16] ),
    .in___val( PE_rc__in___val[16] ),
    .out__msg( PE_rc__out__msg[16] ),
    .out__rdy( PE_rc__out__rdy[16] ),
    .out__val( PE_rc__out__val[16] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__17
  (
    .clk( PE_rc__clk[17] ),
    .is_calc( PE_rc__is_calc[17] ),
    .is_occupied( PE_rc__is_occupied[17] ),
    .reset( PE_rc__reset[17] ),
    .x_cord( PE_rc__x_cord[17] ),
    .y_cord( PE_rc__y_cord[17] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[17] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[17] ),
    .cfg_in__val( PE_rc__cfg_in__val[17] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[17] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[17] ),
    .cfg_out__val( PE_rc__cfg_out__val[17] ),
    .in___msg( PE_rc__in___msg[17] ),
    .in___rdy( PE_rc__in___rdy[17] ),
    .in___val( PE_rc__in___val[17] ),
    .out__msg( PE_rc__out__msg[17] ),
    .out__rdy( PE_rc__out__rdy[17] ),
    .out__val( PE_rc__out__val[17] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__18
  (
    .clk( PE_rc__clk[18] ),
    .is_calc( PE_rc__is_calc[18] ),
    .is_occupied( PE_rc__is_occupied[18] ),
    .reset( PE_rc__reset[18] ),
    .x_cord( PE_rc__x_cord[18] ),
    .y_cord( PE_rc__y_cord[18] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[18] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[18] ),
    .cfg_in__val( PE_rc__cfg_in__val[18] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[18] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[18] ),
    .cfg_out__val( PE_rc__cfg_out__val[18] ),
    .in___msg( PE_rc__in___msg[18] ),
    .in___rdy( PE_rc__in___rdy[18] ),
    .in___val( PE_rc__in___val[18] ),
    .out__msg( PE_rc__out__msg[18] ),
    .out__rdy( PE_rc__out__rdy[18] ),
    .out__val( PE_rc__out__val[18] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__19
  (
    .clk( PE_rc__clk[19] ),
    .is_calc( PE_rc__is_calc[19] ),
    .is_occupied( PE_rc__is_occupied[19] ),
    .reset( PE_rc__reset[19] ),
    .x_cord( PE_rc__x_cord[19] ),
    .y_cord( PE_rc__y_cord[19] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[19] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[19] ),
    .cfg_in__val( PE_rc__cfg_in__val[19] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[19] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[19] ),
    .cfg_out__val( PE_rc__cfg_out__val[19] ),
    .in___msg( PE_rc__in___msg[19] ),
    .in___rdy( PE_rc__in___rdy[19] ),
    .in___val( PE_rc__in___val[19] ),
    .out__msg( PE_rc__out__msg[19] ),
    .out__rdy( PE_rc__out__rdy[19] ),
    .out__val( PE_rc__out__val[19] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__20
  (
    .clk( PE_rc__clk[20] ),
    .is_calc( PE_rc__is_calc[20] ),
    .is_occupied( PE_rc__is_occupied[20] ),
    .reset( PE_rc__reset[20] ),
    .x_cord( PE_rc__x_cord[20] ),
    .y_cord( PE_rc__y_cord[20] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[20] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[20] ),
    .cfg_in__val( PE_rc__cfg_in__val[20] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[20] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[20] ),
    .cfg_out__val( PE_rc__cfg_out__val[20] ),
    .in___msg( PE_rc__in___msg[20] ),
    .in___rdy( PE_rc__in___rdy[20] ),
    .in___val( PE_rc__in___val[20] ),
    .out__msg( PE_rc__out__msg[20] ),
    .out__rdy( PE_rc__out__rdy[20] ),
    .out__val( PE_rc__out__val[20] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__21
  (
    .clk( PE_rc__clk[21] ),
    .is_calc( PE_rc__is_calc[21] ),
    .is_occupied( PE_rc__is_occupied[21] ),
    .reset( PE_rc__reset[21] ),
    .x_cord( PE_rc__x_cord[21] ),
    .y_cord( PE_rc__y_cord[21] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[21] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[21] ),
    .cfg_in__val( PE_rc__cfg_in__val[21] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[21] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[21] ),
    .cfg_out__val( PE_rc__cfg_out__val[21] ),
    .in___msg( PE_rc__in___msg[21] ),
    .in___rdy( PE_rc__in___rdy[21] ),
    .in___val( PE_rc__in___val[21] ),
    .out__msg( PE_rc__out__msg[21] ),
    .out__rdy( PE_rc__out__rdy[21] ),
    .out__val( PE_rc__out__val[21] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__22
  (
    .clk( PE_rc__clk[22] ),
    .is_calc( PE_rc__is_calc[22] ),
    .is_occupied( PE_rc__is_occupied[22] ),
    .reset( PE_rc__reset[22] ),
    .x_cord( PE_rc__x_cord[22] ),
    .y_cord( PE_rc__y_cord[22] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[22] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[22] ),
    .cfg_in__val( PE_rc__cfg_in__val[22] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[22] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[22] ),
    .cfg_out__val( PE_rc__cfg_out__val[22] ),
    .in___msg( PE_rc__in___msg[22] ),
    .in___rdy( PE_rc__in___rdy[22] ),
    .in___val( PE_rc__in___val[22] ),
    .out__msg( PE_rc__out__msg[22] ),
    .out__rdy( PE_rc__out__rdy[22] ),
    .out__val( PE_rc__out__val[22] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__23
  (
    .clk( PE_rc__clk[23] ),
    .is_calc( PE_rc__is_calc[23] ),
    .is_occupied( PE_rc__is_occupied[23] ),
    .reset( PE_rc__reset[23] ),
    .x_cord( PE_rc__x_cord[23] ),
    .y_cord( PE_rc__y_cord[23] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[23] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[23] ),
    .cfg_in__val( PE_rc__cfg_in__val[23] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[23] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[23] ),
    .cfg_out__val( PE_rc__cfg_out__val[23] ),
    .in___msg( PE_rc__in___msg[23] ),
    .in___rdy( PE_rc__in___rdy[23] ),
    .in___val( PE_rc__in___val[23] ),
    .out__msg( PE_rc__out__msg[23] ),
    .out__rdy( PE_rc__out__rdy[23] ),
    .out__val( PE_rc__out__val[23] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__24
  (
    .clk( PE_rc__clk[24] ),
    .is_calc( PE_rc__is_calc[24] ),
    .is_occupied( PE_rc__is_occupied[24] ),
    .reset( PE_rc__reset[24] ),
    .x_cord( PE_rc__x_cord[24] ),
    .y_cord( PE_rc__y_cord[24] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[24] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[24] ),
    .cfg_in__val( PE_rc__cfg_in__val[24] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[24] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[24] ),
    .cfg_out__val( PE_rc__cfg_out__val[24] ),
    .in___msg( PE_rc__in___msg[24] ),
    .in___rdy( PE_rc__in___rdy[24] ),
    .in___val( PE_rc__in___val[24] ),
    .out__msg( PE_rc__out__msg[24] ),
    .out__rdy( PE_rc__out__rdy[24] ),
    .out__val( PE_rc__out__val[24] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__25
  (
    .clk( PE_rc__clk[25] ),
    .is_calc( PE_rc__is_calc[25] ),
    .is_occupied( PE_rc__is_occupied[25] ),
    .reset( PE_rc__reset[25] ),
    .x_cord( PE_rc__x_cord[25] ),
    .y_cord( PE_rc__y_cord[25] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[25] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[25] ),
    .cfg_in__val( PE_rc__cfg_in__val[25] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[25] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[25] ),
    .cfg_out__val( PE_rc__cfg_out__val[25] ),
    .in___msg( PE_rc__in___msg[25] ),
    .in___rdy( PE_rc__in___rdy[25] ),
    .in___val( PE_rc__in___val[25] ),
    .out__msg( PE_rc__out__msg[25] ),
    .out__rdy( PE_rc__out__rdy[25] ),
    .out__val( PE_rc__out__val[25] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__26
  (
    .clk( PE_rc__clk[26] ),
    .is_calc( PE_rc__is_calc[26] ),
    .is_occupied( PE_rc__is_occupied[26] ),
    .reset( PE_rc__reset[26] ),
    .x_cord( PE_rc__x_cord[26] ),
    .y_cord( PE_rc__y_cord[26] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[26] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[26] ),
    .cfg_in__val( PE_rc__cfg_in__val[26] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[26] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[26] ),
    .cfg_out__val( PE_rc__cfg_out__val[26] ),
    .in___msg( PE_rc__in___msg[26] ),
    .in___rdy( PE_rc__in___rdy[26] ),
    .in___val( PE_rc__in___val[26] ),
    .out__msg( PE_rc__out__msg[26] ),
    .out__rdy( PE_rc__out__rdy[26] ),
    .out__val( PE_rc__out__val[26] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__27
  (
    .clk( PE_rc__clk[27] ),
    .is_calc( PE_rc__is_calc[27] ),
    .is_occupied( PE_rc__is_occupied[27] ),
    .reset( PE_rc__reset[27] ),
    .x_cord( PE_rc__x_cord[27] ),
    .y_cord( PE_rc__y_cord[27] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[27] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[27] ),
    .cfg_in__val( PE_rc__cfg_in__val[27] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[27] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[27] ),
    .cfg_out__val( PE_rc__cfg_out__val[27] ),
    .in___msg( PE_rc__in___msg[27] ),
    .in___rdy( PE_rc__in___rdy[27] ),
    .in___val( PE_rc__in___val[27] ),
    .out__msg( PE_rc__out__msg[27] ),
    .out__rdy( PE_rc__out__rdy[27] ),
    .out__val( PE_rc__out__val[27] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__28
  (
    .clk( PE_rc__clk[28] ),
    .is_calc( PE_rc__is_calc[28] ),
    .is_occupied( PE_rc__is_occupied[28] ),
    .reset( PE_rc__reset[28] ),
    .x_cord( PE_rc__x_cord[28] ),
    .y_cord( PE_rc__y_cord[28] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[28] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[28] ),
    .cfg_in__val( PE_rc__cfg_in__val[28] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[28] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[28] ),
    .cfg_out__val( PE_rc__cfg_out__val[28] ),
    .in___msg( PE_rc__in___msg[28] ),
    .in___rdy( PE_rc__in___rdy[28] ),
    .in___val( PE_rc__in___val[28] ),
    .out__msg( PE_rc__out__msg[28] ),
    .out__rdy( PE_rc__out__rdy[28] ),
    .out__val( PE_rc__out__val[28] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__29
  (
    .clk( PE_rc__clk[29] ),
    .is_calc( PE_rc__is_calc[29] ),
    .is_occupied( PE_rc__is_occupied[29] ),
    .reset( PE_rc__reset[29] ),
    .x_cord( PE_rc__x_cord[29] ),
    .y_cord( PE_rc__y_cord[29] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[29] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[29] ),
    .cfg_in__val( PE_rc__cfg_in__val[29] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[29] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[29] ),
    .cfg_out__val( PE_rc__cfg_out__val[29] ),
    .in___msg( PE_rc__in___msg[29] ),
    .in___rdy( PE_rc__in___rdy[29] ),
    .in___val( PE_rc__in___val[29] ),
    .out__msg( PE_rc__out__msg[29] ),
    .out__rdy( PE_rc__out__rdy[29] ),
    .out__val( PE_rc__out__val[29] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__30
  (
    .clk( PE_rc__clk[30] ),
    .is_calc( PE_rc__is_calc[30] ),
    .is_occupied( PE_rc__is_occupied[30] ),
    .reset( PE_rc__reset[30] ),
    .x_cord( PE_rc__x_cord[30] ),
    .y_cord( PE_rc__y_cord[30] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[30] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[30] ),
    .cfg_in__val( PE_rc__cfg_in__val[30] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[30] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[30] ),
    .cfg_out__val( PE_rc__cfg_out__val[30] ),
    .in___msg( PE_rc__in___msg[30] ),
    .in___rdy( PE_rc__in___rdy[30] ),
    .in___val( PE_rc__in___val[30] ),
    .out__msg( PE_rc__out__msg[30] ),
    .out__rdy( PE_rc__out__rdy[30] ),
    .out__val( PE_rc__out__val[30] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__31
  (
    .clk( PE_rc__clk[31] ),
    .is_calc( PE_rc__is_calc[31] ),
    .is_occupied( PE_rc__is_occupied[31] ),
    .reset( PE_rc__reset[31] ),
    .x_cord( PE_rc__x_cord[31] ),
    .y_cord( PE_rc__y_cord[31] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[31] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[31] ),
    .cfg_in__val( PE_rc__cfg_in__val[31] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[31] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[31] ),
    .cfg_out__val( PE_rc__cfg_out__val[31] ),
    .in___msg( PE_rc__in___msg[31] ),
    .in___rdy( PE_rc__in___rdy[31] ),
    .in___val( PE_rc__in___val[31] ),
    .out__msg( PE_rc__out__msg[31] ),
    .out__rdy( PE_rc__out__rdy[31] ),
    .out__val( PE_rc__out__val[31] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__32
  (
    .clk( PE_rc__clk[32] ),
    .is_calc( PE_rc__is_calc[32] ),
    .is_occupied( PE_rc__is_occupied[32] ),
    .reset( PE_rc__reset[32] ),
    .x_cord( PE_rc__x_cord[32] ),
    .y_cord( PE_rc__y_cord[32] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[32] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[32] ),
    .cfg_in__val( PE_rc__cfg_in__val[32] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[32] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[32] ),
    .cfg_out__val( PE_rc__cfg_out__val[32] ),
    .in___msg( PE_rc__in___msg[32] ),
    .in___rdy( PE_rc__in___rdy[32] ),
    .in___val( PE_rc__in___val[32] ),
    .out__msg( PE_rc__out__msg[32] ),
    .out__rdy( PE_rc__out__rdy[32] ),
    .out__val( PE_rc__out__val[32] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__33
  (
    .clk( PE_rc__clk[33] ),
    .is_calc( PE_rc__is_calc[33] ),
    .is_occupied( PE_rc__is_occupied[33] ),
    .reset( PE_rc__reset[33] ),
    .x_cord( PE_rc__x_cord[33] ),
    .y_cord( PE_rc__y_cord[33] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[33] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[33] ),
    .cfg_in__val( PE_rc__cfg_in__val[33] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[33] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[33] ),
    .cfg_out__val( PE_rc__cfg_out__val[33] ),
    .in___msg( PE_rc__in___msg[33] ),
    .in___rdy( PE_rc__in___rdy[33] ),
    .in___val( PE_rc__in___val[33] ),
    .out__msg( PE_rc__out__msg[33] ),
    .out__rdy( PE_rc__out__rdy[33] ),
    .out__val( PE_rc__out__val[33] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__34
  (
    .clk( PE_rc__clk[34] ),
    .is_calc( PE_rc__is_calc[34] ),
    .is_occupied( PE_rc__is_occupied[34] ),
    .reset( PE_rc__reset[34] ),
    .x_cord( PE_rc__x_cord[34] ),
    .y_cord( PE_rc__y_cord[34] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[34] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[34] ),
    .cfg_in__val( PE_rc__cfg_in__val[34] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[34] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[34] ),
    .cfg_out__val( PE_rc__cfg_out__val[34] ),
    .in___msg( PE_rc__in___msg[34] ),
    .in___rdy( PE_rc__in___rdy[34] ),
    .in___val( PE_rc__in___val[34] ),
    .out__msg( PE_rc__out__msg[34] ),
    .out__rdy( PE_rc__out__rdy[34] ),
    .out__val( PE_rc__out__val[34] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__35
  (
    .clk( PE_rc__clk[35] ),
    .is_calc( PE_rc__is_calc[35] ),
    .is_occupied( PE_rc__is_occupied[35] ),
    .reset( PE_rc__reset[35] ),
    .x_cord( PE_rc__x_cord[35] ),
    .y_cord( PE_rc__y_cord[35] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[35] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[35] ),
    .cfg_in__val( PE_rc__cfg_in__val[35] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[35] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[35] ),
    .cfg_out__val( PE_rc__cfg_out__val[35] ),
    .in___msg( PE_rc__in___msg[35] ),
    .in___rdy( PE_rc__in___rdy[35] ),
    .in___val( PE_rc__in___val[35] ),
    .out__msg( PE_rc__out__msg[35] ),
    .out__rdy( PE_rc__out__rdy[35] ),
    .out__val( PE_rc__out__val[35] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__36
  (
    .clk( PE_rc__clk[36] ),
    .is_calc( PE_rc__is_calc[36] ),
    .is_occupied( PE_rc__is_occupied[36] ),
    .reset( PE_rc__reset[36] ),
    .x_cord( PE_rc__x_cord[36] ),
    .y_cord( PE_rc__y_cord[36] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[36] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[36] ),
    .cfg_in__val( PE_rc__cfg_in__val[36] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[36] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[36] ),
    .cfg_out__val( PE_rc__cfg_out__val[36] ),
    .in___msg( PE_rc__in___msg[36] ),
    .in___rdy( PE_rc__in___rdy[36] ),
    .in___val( PE_rc__in___val[36] ),
    .out__msg( PE_rc__out__msg[36] ),
    .out__rdy( PE_rc__out__rdy[36] ),
    .out__val( PE_rc__out__val[36] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__37
  (
    .clk( PE_rc__clk[37] ),
    .is_calc( PE_rc__is_calc[37] ),
    .is_occupied( PE_rc__is_occupied[37] ),
    .reset( PE_rc__reset[37] ),
    .x_cord( PE_rc__x_cord[37] ),
    .y_cord( PE_rc__y_cord[37] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[37] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[37] ),
    .cfg_in__val( PE_rc__cfg_in__val[37] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[37] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[37] ),
    .cfg_out__val( PE_rc__cfg_out__val[37] ),
    .in___msg( PE_rc__in___msg[37] ),
    .in___rdy( PE_rc__in___rdy[37] ),
    .in___val( PE_rc__in___val[37] ),
    .out__msg( PE_rc__out__msg[37] ),
    .out__rdy( PE_rc__out__rdy[37] ),
    .out__val( PE_rc__out__val[37] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__38
  (
    .clk( PE_rc__clk[38] ),
    .is_calc( PE_rc__is_calc[38] ),
    .is_occupied( PE_rc__is_occupied[38] ),
    .reset( PE_rc__reset[38] ),
    .x_cord( PE_rc__x_cord[38] ),
    .y_cord( PE_rc__y_cord[38] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[38] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[38] ),
    .cfg_in__val( PE_rc__cfg_in__val[38] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[38] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[38] ),
    .cfg_out__val( PE_rc__cfg_out__val[38] ),
    .in___msg( PE_rc__in___msg[38] ),
    .in___rdy( PE_rc__in___rdy[38] ),
    .in___val( PE_rc__in___val[38] ),
    .out__msg( PE_rc__out__msg[38] ),
    .out__rdy( PE_rc__out__rdy[38] ),
    .out__val( PE_rc__out__val[38] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__39
  (
    .clk( PE_rc__clk[39] ),
    .is_calc( PE_rc__is_calc[39] ),
    .is_occupied( PE_rc__is_occupied[39] ),
    .reset( PE_rc__reset[39] ),
    .x_cord( PE_rc__x_cord[39] ),
    .y_cord( PE_rc__y_cord[39] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[39] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[39] ),
    .cfg_in__val( PE_rc__cfg_in__val[39] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[39] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[39] ),
    .cfg_out__val( PE_rc__cfg_out__val[39] ),
    .in___msg( PE_rc__in___msg[39] ),
    .in___rdy( PE_rc__in___rdy[39] ),
    .in___val( PE_rc__in___val[39] ),
    .out__msg( PE_rc__out__msg[39] ),
    .out__rdy( PE_rc__out__rdy[39] ),
    .out__val( PE_rc__out__val[39] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__40
  (
    .clk( PE_rc__clk[40] ),
    .is_calc( PE_rc__is_calc[40] ),
    .is_occupied( PE_rc__is_occupied[40] ),
    .reset( PE_rc__reset[40] ),
    .x_cord( PE_rc__x_cord[40] ),
    .y_cord( PE_rc__y_cord[40] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[40] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[40] ),
    .cfg_in__val( PE_rc__cfg_in__val[40] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[40] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[40] ),
    .cfg_out__val( PE_rc__cfg_out__val[40] ),
    .in___msg( PE_rc__in___msg[40] ),
    .in___rdy( PE_rc__in___rdy[40] ),
    .in___val( PE_rc__in___val[40] ),
    .out__msg( PE_rc__out__msg[40] ),
    .out__rdy( PE_rc__out__rdy[40] ),
    .out__val( PE_rc__out__val[40] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__41
  (
    .clk( PE_rc__clk[41] ),
    .is_calc( PE_rc__is_calc[41] ),
    .is_occupied( PE_rc__is_occupied[41] ),
    .reset( PE_rc__reset[41] ),
    .x_cord( PE_rc__x_cord[41] ),
    .y_cord( PE_rc__y_cord[41] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[41] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[41] ),
    .cfg_in__val( PE_rc__cfg_in__val[41] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[41] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[41] ),
    .cfg_out__val( PE_rc__cfg_out__val[41] ),
    .in___msg( PE_rc__in___msg[41] ),
    .in___rdy( PE_rc__in___rdy[41] ),
    .in___val( PE_rc__in___val[41] ),
    .out__msg( PE_rc__out__msg[41] ),
    .out__rdy( PE_rc__out__rdy[41] ),
    .out__val( PE_rc__out__val[41] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__42
  (
    .clk( PE_rc__clk[42] ),
    .is_calc( PE_rc__is_calc[42] ),
    .is_occupied( PE_rc__is_occupied[42] ),
    .reset( PE_rc__reset[42] ),
    .x_cord( PE_rc__x_cord[42] ),
    .y_cord( PE_rc__y_cord[42] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[42] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[42] ),
    .cfg_in__val( PE_rc__cfg_in__val[42] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[42] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[42] ),
    .cfg_out__val( PE_rc__cfg_out__val[42] ),
    .in___msg( PE_rc__in___msg[42] ),
    .in___rdy( PE_rc__in___rdy[42] ),
    .in___val( PE_rc__in___val[42] ),
    .out__msg( PE_rc__out__msg[42] ),
    .out__rdy( PE_rc__out__rdy[42] ),
    .out__val( PE_rc__out__val[42] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__43
  (
    .clk( PE_rc__clk[43] ),
    .is_calc( PE_rc__is_calc[43] ),
    .is_occupied( PE_rc__is_occupied[43] ),
    .reset( PE_rc__reset[43] ),
    .x_cord( PE_rc__x_cord[43] ),
    .y_cord( PE_rc__y_cord[43] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[43] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[43] ),
    .cfg_in__val( PE_rc__cfg_in__val[43] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[43] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[43] ),
    .cfg_out__val( PE_rc__cfg_out__val[43] ),
    .in___msg( PE_rc__in___msg[43] ),
    .in___rdy( PE_rc__in___rdy[43] ),
    .in___val( PE_rc__in___val[43] ),
    .out__msg( PE_rc__out__msg[43] ),
    .out__rdy( PE_rc__out__rdy[43] ),
    .out__val( PE_rc__out__val[43] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__44
  (
    .clk( PE_rc__clk[44] ),
    .is_calc( PE_rc__is_calc[44] ),
    .is_occupied( PE_rc__is_occupied[44] ),
    .reset( PE_rc__reset[44] ),
    .x_cord( PE_rc__x_cord[44] ),
    .y_cord( PE_rc__y_cord[44] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[44] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[44] ),
    .cfg_in__val( PE_rc__cfg_in__val[44] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[44] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[44] ),
    .cfg_out__val( PE_rc__cfg_out__val[44] ),
    .in___msg( PE_rc__in___msg[44] ),
    .in___rdy( PE_rc__in___rdy[44] ),
    .in___val( PE_rc__in___val[44] ),
    .out__msg( PE_rc__out__msg[44] ),
    .out__rdy( PE_rc__out__rdy[44] ),
    .out__val( PE_rc__out__val[44] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__45
  (
    .clk( PE_rc__clk[45] ),
    .is_calc( PE_rc__is_calc[45] ),
    .is_occupied( PE_rc__is_occupied[45] ),
    .reset( PE_rc__reset[45] ),
    .x_cord( PE_rc__x_cord[45] ),
    .y_cord( PE_rc__y_cord[45] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[45] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[45] ),
    .cfg_in__val( PE_rc__cfg_in__val[45] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[45] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[45] ),
    .cfg_out__val( PE_rc__cfg_out__val[45] ),
    .in___msg( PE_rc__in___msg[45] ),
    .in___rdy( PE_rc__in___rdy[45] ),
    .in___val( PE_rc__in___val[45] ),
    .out__msg( PE_rc__out__msg[45] ),
    .out__rdy( PE_rc__out__rdy[45] ),
    .out__val( PE_rc__out__val[45] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__46
  (
    .clk( PE_rc__clk[46] ),
    .is_calc( PE_rc__is_calc[46] ),
    .is_occupied( PE_rc__is_occupied[46] ),
    .reset( PE_rc__reset[46] ),
    .x_cord( PE_rc__x_cord[46] ),
    .y_cord( PE_rc__y_cord[46] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[46] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[46] ),
    .cfg_in__val( PE_rc__cfg_in__val[46] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[46] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[46] ),
    .cfg_out__val( PE_rc__cfg_out__val[46] ),
    .in___msg( PE_rc__in___msg[46] ),
    .in___rdy( PE_rc__in___rdy[46] ),
    .in___val( PE_rc__in___val[46] ),
    .out__msg( PE_rc__out__msg[46] ),
    .out__rdy( PE_rc__out__rdy[46] ),
    .out__val( PE_rc__out__val[46] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__47
  (
    .clk( PE_rc__clk[47] ),
    .is_calc( PE_rc__is_calc[47] ),
    .is_occupied( PE_rc__is_occupied[47] ),
    .reset( PE_rc__reset[47] ),
    .x_cord( PE_rc__x_cord[47] ),
    .y_cord( PE_rc__y_cord[47] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[47] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[47] ),
    .cfg_in__val( PE_rc__cfg_in__val[47] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[47] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[47] ),
    .cfg_out__val( PE_rc__cfg_out__val[47] ),
    .in___msg( PE_rc__in___msg[47] ),
    .in___rdy( PE_rc__in___rdy[47] ),
    .in___val( PE_rc__in___val[47] ),
    .out__msg( PE_rc__out__msg[47] ),
    .out__rdy( PE_rc__out__rdy[47] ),
    .out__val( PE_rc__out__val[47] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__48
  (
    .clk( PE_rc__clk[48] ),
    .is_calc( PE_rc__is_calc[48] ),
    .is_occupied( PE_rc__is_occupied[48] ),
    .reset( PE_rc__reset[48] ),
    .x_cord( PE_rc__x_cord[48] ),
    .y_cord( PE_rc__y_cord[48] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[48] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[48] ),
    .cfg_in__val( PE_rc__cfg_in__val[48] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[48] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[48] ),
    .cfg_out__val( PE_rc__cfg_out__val[48] ),
    .in___msg( PE_rc__in___msg[48] ),
    .in___rdy( PE_rc__in___rdy[48] ),
    .in___val( PE_rc__in___val[48] ),
    .out__msg( PE_rc__out__msg[48] ),
    .out__rdy( PE_rc__out__rdy[48] ),
    .out__val( PE_rc__out__val[48] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__49
  (
    .clk( PE_rc__clk[49] ),
    .is_calc( PE_rc__is_calc[49] ),
    .is_occupied( PE_rc__is_occupied[49] ),
    .reset( PE_rc__reset[49] ),
    .x_cord( PE_rc__x_cord[49] ),
    .y_cord( PE_rc__y_cord[49] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[49] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[49] ),
    .cfg_in__val( PE_rc__cfg_in__val[49] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[49] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[49] ),
    .cfg_out__val( PE_rc__cfg_out__val[49] ),
    .in___msg( PE_rc__in___msg[49] ),
    .in___rdy( PE_rc__in___rdy[49] ),
    .in___val( PE_rc__in___val[49] ),
    .out__msg( PE_rc__out__msg[49] ),
    .out__rdy( PE_rc__out__rdy[49] ),
    .out__val( PE_rc__out__val[49] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__50
  (
    .clk( PE_rc__clk[50] ),
    .is_calc( PE_rc__is_calc[50] ),
    .is_occupied( PE_rc__is_occupied[50] ),
    .reset( PE_rc__reset[50] ),
    .x_cord( PE_rc__x_cord[50] ),
    .y_cord( PE_rc__y_cord[50] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[50] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[50] ),
    .cfg_in__val( PE_rc__cfg_in__val[50] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[50] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[50] ),
    .cfg_out__val( PE_rc__cfg_out__val[50] ),
    .in___msg( PE_rc__in___msg[50] ),
    .in___rdy( PE_rc__in___rdy[50] ),
    .in___val( PE_rc__in___val[50] ),
    .out__msg( PE_rc__out__msg[50] ),
    .out__rdy( PE_rc__out__rdy[50] ),
    .out__val( PE_rc__out__val[50] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__51
  (
    .clk( PE_rc__clk[51] ),
    .is_calc( PE_rc__is_calc[51] ),
    .is_occupied( PE_rc__is_occupied[51] ),
    .reset( PE_rc__reset[51] ),
    .x_cord( PE_rc__x_cord[51] ),
    .y_cord( PE_rc__y_cord[51] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[51] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[51] ),
    .cfg_in__val( PE_rc__cfg_in__val[51] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[51] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[51] ),
    .cfg_out__val( PE_rc__cfg_out__val[51] ),
    .in___msg( PE_rc__in___msg[51] ),
    .in___rdy( PE_rc__in___rdy[51] ),
    .in___val( PE_rc__in___val[51] ),
    .out__msg( PE_rc__out__msg[51] ),
    .out__rdy( PE_rc__out__rdy[51] ),
    .out__val( PE_rc__out__val[51] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__52
  (
    .clk( PE_rc__clk[52] ),
    .is_calc( PE_rc__is_calc[52] ),
    .is_occupied( PE_rc__is_occupied[52] ),
    .reset( PE_rc__reset[52] ),
    .x_cord( PE_rc__x_cord[52] ),
    .y_cord( PE_rc__y_cord[52] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[52] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[52] ),
    .cfg_in__val( PE_rc__cfg_in__val[52] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[52] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[52] ),
    .cfg_out__val( PE_rc__cfg_out__val[52] ),
    .in___msg( PE_rc__in___msg[52] ),
    .in___rdy( PE_rc__in___rdy[52] ),
    .in___val( PE_rc__in___val[52] ),
    .out__msg( PE_rc__out__msg[52] ),
    .out__rdy( PE_rc__out__rdy[52] ),
    .out__val( PE_rc__out__val[52] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__53
  (
    .clk( PE_rc__clk[53] ),
    .is_calc( PE_rc__is_calc[53] ),
    .is_occupied( PE_rc__is_occupied[53] ),
    .reset( PE_rc__reset[53] ),
    .x_cord( PE_rc__x_cord[53] ),
    .y_cord( PE_rc__y_cord[53] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[53] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[53] ),
    .cfg_in__val( PE_rc__cfg_in__val[53] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[53] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[53] ),
    .cfg_out__val( PE_rc__cfg_out__val[53] ),
    .in___msg( PE_rc__in___msg[53] ),
    .in___rdy( PE_rc__in___rdy[53] ),
    .in___val( PE_rc__in___val[53] ),
    .out__msg( PE_rc__out__msg[53] ),
    .out__rdy( PE_rc__out__rdy[53] ),
    .out__val( PE_rc__out__val[53] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__54
  (
    .clk( PE_rc__clk[54] ),
    .is_calc( PE_rc__is_calc[54] ),
    .is_occupied( PE_rc__is_occupied[54] ),
    .reset( PE_rc__reset[54] ),
    .x_cord( PE_rc__x_cord[54] ),
    .y_cord( PE_rc__y_cord[54] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[54] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[54] ),
    .cfg_in__val( PE_rc__cfg_in__val[54] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[54] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[54] ),
    .cfg_out__val( PE_rc__cfg_out__val[54] ),
    .in___msg( PE_rc__in___msg[54] ),
    .in___rdy( PE_rc__in___rdy[54] ),
    .in___val( PE_rc__in___val[54] ),
    .out__msg( PE_rc__out__msg[54] ),
    .out__rdy( PE_rc__out__rdy[54] ),
    .out__val( PE_rc__out__val[54] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__55
  (
    .clk( PE_rc__clk[55] ),
    .is_calc( PE_rc__is_calc[55] ),
    .is_occupied( PE_rc__is_occupied[55] ),
    .reset( PE_rc__reset[55] ),
    .x_cord( PE_rc__x_cord[55] ),
    .y_cord( PE_rc__y_cord[55] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[55] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[55] ),
    .cfg_in__val( PE_rc__cfg_in__val[55] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[55] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[55] ),
    .cfg_out__val( PE_rc__cfg_out__val[55] ),
    .in___msg( PE_rc__in___msg[55] ),
    .in___rdy( PE_rc__in___rdy[55] ),
    .in___val( PE_rc__in___val[55] ),
    .out__msg( PE_rc__out__msg[55] ),
    .out__rdy( PE_rc__out__rdy[55] ),
    .out__val( PE_rc__out__val[55] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__56
  (
    .clk( PE_rc__clk[56] ),
    .is_calc( PE_rc__is_calc[56] ),
    .is_occupied( PE_rc__is_occupied[56] ),
    .reset( PE_rc__reset[56] ),
    .x_cord( PE_rc__x_cord[56] ),
    .y_cord( PE_rc__y_cord[56] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[56] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[56] ),
    .cfg_in__val( PE_rc__cfg_in__val[56] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[56] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[56] ),
    .cfg_out__val( PE_rc__cfg_out__val[56] ),
    .in___msg( PE_rc__in___msg[56] ),
    .in___rdy( PE_rc__in___rdy[56] ),
    .in___val( PE_rc__in___val[56] ),
    .out__msg( PE_rc__out__msg[56] ),
    .out__rdy( PE_rc__out__rdy[56] ),
    .out__val( PE_rc__out__val[56] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__57
  (
    .clk( PE_rc__clk[57] ),
    .is_calc( PE_rc__is_calc[57] ),
    .is_occupied( PE_rc__is_occupied[57] ),
    .reset( PE_rc__reset[57] ),
    .x_cord( PE_rc__x_cord[57] ),
    .y_cord( PE_rc__y_cord[57] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[57] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[57] ),
    .cfg_in__val( PE_rc__cfg_in__val[57] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[57] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[57] ),
    .cfg_out__val( PE_rc__cfg_out__val[57] ),
    .in___msg( PE_rc__in___msg[57] ),
    .in___rdy( PE_rc__in___rdy[57] ),
    .in___val( PE_rc__in___val[57] ),
    .out__msg( PE_rc__out__msg[57] ),
    .out__rdy( PE_rc__out__rdy[57] ),
    .out__val( PE_rc__out__val[57] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__58
  (
    .clk( PE_rc__clk[58] ),
    .is_calc( PE_rc__is_calc[58] ),
    .is_occupied( PE_rc__is_occupied[58] ),
    .reset( PE_rc__reset[58] ),
    .x_cord( PE_rc__x_cord[58] ),
    .y_cord( PE_rc__y_cord[58] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[58] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[58] ),
    .cfg_in__val( PE_rc__cfg_in__val[58] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[58] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[58] ),
    .cfg_out__val( PE_rc__cfg_out__val[58] ),
    .in___msg( PE_rc__in___msg[58] ),
    .in___rdy( PE_rc__in___rdy[58] ),
    .in___val( PE_rc__in___val[58] ),
    .out__msg( PE_rc__out__msg[58] ),
    .out__rdy( PE_rc__out__rdy[58] ),
    .out__val( PE_rc__out__val[58] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__59
  (
    .clk( PE_rc__clk[59] ),
    .is_calc( PE_rc__is_calc[59] ),
    .is_occupied( PE_rc__is_occupied[59] ),
    .reset( PE_rc__reset[59] ),
    .x_cord( PE_rc__x_cord[59] ),
    .y_cord( PE_rc__y_cord[59] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[59] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[59] ),
    .cfg_in__val( PE_rc__cfg_in__val[59] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[59] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[59] ),
    .cfg_out__val( PE_rc__cfg_out__val[59] ),
    .in___msg( PE_rc__in___msg[59] ),
    .in___rdy( PE_rc__in___rdy[59] ),
    .in___val( PE_rc__in___val[59] ),
    .out__msg( PE_rc__out__msg[59] ),
    .out__rdy( PE_rc__out__rdy[59] ),
    .out__val( PE_rc__out__val[59] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__60
  (
    .clk( PE_rc__clk[60] ),
    .is_calc( PE_rc__is_calc[60] ),
    .is_occupied( PE_rc__is_occupied[60] ),
    .reset( PE_rc__reset[60] ),
    .x_cord( PE_rc__x_cord[60] ),
    .y_cord( PE_rc__y_cord[60] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[60] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[60] ),
    .cfg_in__val( PE_rc__cfg_in__val[60] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[60] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[60] ),
    .cfg_out__val( PE_rc__cfg_out__val[60] ),
    .in___msg( PE_rc__in___msg[60] ),
    .in___rdy( PE_rc__in___rdy[60] ),
    .in___val( PE_rc__in___val[60] ),
    .out__msg( PE_rc__out__msg[60] ),
    .out__rdy( PE_rc__out__rdy[60] ),
    .out__val( PE_rc__out__val[60] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__61
  (
    .clk( PE_rc__clk[61] ),
    .is_calc( PE_rc__is_calc[61] ),
    .is_occupied( PE_rc__is_occupied[61] ),
    .reset( PE_rc__reset[61] ),
    .x_cord( PE_rc__x_cord[61] ),
    .y_cord( PE_rc__y_cord[61] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[61] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[61] ),
    .cfg_in__val( PE_rc__cfg_in__val[61] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[61] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[61] ),
    .cfg_out__val( PE_rc__cfg_out__val[61] ),
    .in___msg( PE_rc__in___msg[61] ),
    .in___rdy( PE_rc__in___rdy[61] ),
    .in___val( PE_rc__in___val[61] ),
    .out__msg( PE_rc__out__msg[61] ),
    .out__rdy( PE_rc__out__rdy[61] ),
    .out__val( PE_rc__out__val[61] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__62
  (
    .clk( PE_rc__clk[62] ),
    .is_calc( PE_rc__is_calc[62] ),
    .is_occupied( PE_rc__is_occupied[62] ),
    .reset( PE_rc__reset[62] ),
    .x_cord( PE_rc__x_cord[62] ),
    .y_cord( PE_rc__y_cord[62] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[62] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[62] ),
    .cfg_in__val( PE_rc__cfg_in__val[62] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[62] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[62] ),
    .cfg_out__val( PE_rc__cfg_out__val[62] ),
    .in___msg( PE_rc__in___msg[62] ),
    .in___rdy( PE_rc__in___rdy[62] ),
    .in___val( PE_rc__in___val[62] ),
    .out__msg( PE_rc__out__msg[62] ),
    .out__rdy( PE_rc__out__rdy[62] ),
    .out__val( PE_rc__out__val[62] )
  );

  ProcElement__e7b85fc84228c577 PE_rc__63
  (
    .clk( PE_rc__clk[63] ),
    .is_calc( PE_rc__is_calc[63] ),
    .is_occupied( PE_rc__is_occupied[63] ),
    .reset( PE_rc__reset[63] ),
    .x_cord( PE_rc__x_cord[63] ),
    .y_cord( PE_rc__y_cord[63] ),
    .cfg_in__msg( PE_rc__cfg_in__msg[63] ),
    .cfg_in__rdy( PE_rc__cfg_in__rdy[63] ),
    .cfg_in__val( PE_rc__cfg_in__val[63] ),
    .cfg_out__msg( PE_rc__cfg_out__msg[63] ),
    .cfg_out__rdy( PE_rc__cfg_out__rdy[63] ),
    .cfg_out__val( PE_rc__cfg_out__val[63] ),
    .in___msg( PE_rc__in___msg[63] ),
    .in___rdy( PE_rc__in___rdy[63] ),
    .in___val( PE_rc__in___val[63] ),
    .out__msg( PE_rc__out__msg[63] ),
    .out__rdy( PE_rc__out__rdy[63] ),
    .out__val( PE_rc__out__val[63] )
  );

  //-------------------------------------------------------------
  // End of component PE_rc[0:63]
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component delayed_all_CE_done
  //-------------------------------------------------------------

  logic [0:0] delayed_all_CE_done__cfg_reset;
  logic [0:0] delayed_all_CE_done__clk;
  logic [0:0] delayed_all_CE_done__in_;
  logic [0:0] delayed_all_CE_done__out;
  logic [0:0] delayed_all_CE_done__reset;

  ShiftRegister__Type_Bits1__ncycles_1 delayed_all_CE_done
  (
    .cfg_reset( delayed_all_CE_done__cfg_reset ),
    .clk( delayed_all_CE_done__clk ),
    .in_( delayed_all_CE_done__in_ ),
    .out( delayed_all_CE_done__out ),
    .reset( delayed_all_CE_done__reset )
  );

  //-------------------------------------------------------------
  // End of component delayed_all_CE_done
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component mem_muxes[0:8]
  //-------------------------------------------------------------

  logic [0:0] mem_muxes__clk [0:8];
  logic [0:0] mem_muxes__reset [0:8];
  logic [0:0] mem_muxes__sel [0:8];
  logic [0:0] mem_muxes__in___req__en [0:8][0:1];
  CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 mem_muxes__in___req__msg [0:8][0:1];
  logic [0:0] mem_muxes__in___req__rdy [0:8][0:1];
  logic [0:0] mem_muxes__in___resp__en [0:8][0:1];
  CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 mem_muxes__in___resp__msg [0:8][0:1];
  logic [0:0] mem_muxes__in___resp__rdy [0:8][0:1];
  logic [0:0] mem_muxes__out__req__en [0:8];
  CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 mem_muxes__out__req__msg [0:8];
  logic [0:0] mem_muxes__out__req__rdy [0:8];
  logic [0:0] mem_muxes__out__resp__en [0:8];
  CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 mem_muxes__out__resp__msg [0:8];
  logic [0:0] mem_muxes__out__resp__rdy [0:8];

  MemMasterIfcMux__a729082d09b6eb01 mem_muxes__0
  (
    .clk( mem_muxes__clk[0] ),
    .reset( mem_muxes__reset[0] ),
    .sel( mem_muxes__sel[0] ),
    .in___req__en( mem_muxes__in___req__en[0] ),
    .in___req__msg( mem_muxes__in___req__msg[0] ),
    .in___req__rdy( mem_muxes__in___req__rdy[0] ),
    .in___resp__en( mem_muxes__in___resp__en[0] ),
    .in___resp__msg( mem_muxes__in___resp__msg[0] ),
    .in___resp__rdy( mem_muxes__in___resp__rdy[0] ),
    .out__req__en( mem_muxes__out__req__en[0] ),
    .out__req__msg( mem_muxes__out__req__msg[0] ),
    .out__req__rdy( mem_muxes__out__req__rdy[0] ),
    .out__resp__en( mem_muxes__out__resp__en[0] ),
    .out__resp__msg( mem_muxes__out__resp__msg[0] ),
    .out__resp__rdy( mem_muxes__out__resp__rdy[0] )
  );

  MemMasterIfcMux__a729082d09b6eb01 mem_muxes__1
  (
    .clk( mem_muxes__clk[1] ),
    .reset( mem_muxes__reset[1] ),
    .sel( mem_muxes__sel[1] ),
    .in___req__en( mem_muxes__in___req__en[1] ),
    .in___req__msg( mem_muxes__in___req__msg[1] ),
    .in___req__rdy( mem_muxes__in___req__rdy[1] ),
    .in___resp__en( mem_muxes__in___resp__en[1] ),
    .in___resp__msg( mem_muxes__in___resp__msg[1] ),
    .in___resp__rdy( mem_muxes__in___resp__rdy[1] ),
    .out__req__en( mem_muxes__out__req__en[1] ),
    .out__req__msg( mem_muxes__out__req__msg[1] ),
    .out__req__rdy( mem_muxes__out__req__rdy[1] ),
    .out__resp__en( mem_muxes__out__resp__en[1] ),
    .out__resp__msg( mem_muxes__out__resp__msg[1] ),
    .out__resp__rdy( mem_muxes__out__resp__rdy[1] )
  );

  MemMasterIfcMux__a729082d09b6eb01 mem_muxes__2
  (
    .clk( mem_muxes__clk[2] ),
    .reset( mem_muxes__reset[2] ),
    .sel( mem_muxes__sel[2] ),
    .in___req__en( mem_muxes__in___req__en[2] ),
    .in___req__msg( mem_muxes__in___req__msg[2] ),
    .in___req__rdy( mem_muxes__in___req__rdy[2] ),
    .in___resp__en( mem_muxes__in___resp__en[2] ),
    .in___resp__msg( mem_muxes__in___resp__msg[2] ),
    .in___resp__rdy( mem_muxes__in___resp__rdy[2] ),
    .out__req__en( mem_muxes__out__req__en[2] ),
    .out__req__msg( mem_muxes__out__req__msg[2] ),
    .out__req__rdy( mem_muxes__out__req__rdy[2] ),
    .out__resp__en( mem_muxes__out__resp__en[2] ),
    .out__resp__msg( mem_muxes__out__resp__msg[2] ),
    .out__resp__rdy( mem_muxes__out__resp__rdy[2] )
  );

  MemMasterIfcMux__a729082d09b6eb01 mem_muxes__3
  (
    .clk( mem_muxes__clk[3] ),
    .reset( mem_muxes__reset[3] ),
    .sel( mem_muxes__sel[3] ),
    .in___req__en( mem_muxes__in___req__en[3] ),
    .in___req__msg( mem_muxes__in___req__msg[3] ),
    .in___req__rdy( mem_muxes__in___req__rdy[3] ),
    .in___resp__en( mem_muxes__in___resp__en[3] ),
    .in___resp__msg( mem_muxes__in___resp__msg[3] ),
    .in___resp__rdy( mem_muxes__in___resp__rdy[3] ),
    .out__req__en( mem_muxes__out__req__en[3] ),
    .out__req__msg( mem_muxes__out__req__msg[3] ),
    .out__req__rdy( mem_muxes__out__req__rdy[3] ),
    .out__resp__en( mem_muxes__out__resp__en[3] ),
    .out__resp__msg( mem_muxes__out__resp__msg[3] ),
    .out__resp__rdy( mem_muxes__out__resp__rdy[3] )
  );

  MemMasterIfcMux__a729082d09b6eb01 mem_muxes__4
  (
    .clk( mem_muxes__clk[4] ),
    .reset( mem_muxes__reset[4] ),
    .sel( mem_muxes__sel[4] ),
    .in___req__en( mem_muxes__in___req__en[4] ),
    .in___req__msg( mem_muxes__in___req__msg[4] ),
    .in___req__rdy( mem_muxes__in___req__rdy[4] ),
    .in___resp__en( mem_muxes__in___resp__en[4] ),
    .in___resp__msg( mem_muxes__in___resp__msg[4] ),
    .in___resp__rdy( mem_muxes__in___resp__rdy[4] ),
    .out__req__en( mem_muxes__out__req__en[4] ),
    .out__req__msg( mem_muxes__out__req__msg[4] ),
    .out__req__rdy( mem_muxes__out__req__rdy[4] ),
    .out__resp__en( mem_muxes__out__resp__en[4] ),
    .out__resp__msg( mem_muxes__out__resp__msg[4] ),
    .out__resp__rdy( mem_muxes__out__resp__rdy[4] )
  );

  MemMasterIfcMux__a729082d09b6eb01 mem_muxes__5
  (
    .clk( mem_muxes__clk[5] ),
    .reset( mem_muxes__reset[5] ),
    .sel( mem_muxes__sel[5] ),
    .in___req__en( mem_muxes__in___req__en[5] ),
    .in___req__msg( mem_muxes__in___req__msg[5] ),
    .in___req__rdy( mem_muxes__in___req__rdy[5] ),
    .in___resp__en( mem_muxes__in___resp__en[5] ),
    .in___resp__msg( mem_muxes__in___resp__msg[5] ),
    .in___resp__rdy( mem_muxes__in___resp__rdy[5] ),
    .out__req__en( mem_muxes__out__req__en[5] ),
    .out__req__msg( mem_muxes__out__req__msg[5] ),
    .out__req__rdy( mem_muxes__out__req__rdy[5] ),
    .out__resp__en( mem_muxes__out__resp__en[5] ),
    .out__resp__msg( mem_muxes__out__resp__msg[5] ),
    .out__resp__rdy( mem_muxes__out__resp__rdy[5] )
  );

  MemMasterIfcMux__a729082d09b6eb01 mem_muxes__6
  (
    .clk( mem_muxes__clk[6] ),
    .reset( mem_muxes__reset[6] ),
    .sel( mem_muxes__sel[6] ),
    .in___req__en( mem_muxes__in___req__en[6] ),
    .in___req__msg( mem_muxes__in___req__msg[6] ),
    .in___req__rdy( mem_muxes__in___req__rdy[6] ),
    .in___resp__en( mem_muxes__in___resp__en[6] ),
    .in___resp__msg( mem_muxes__in___resp__msg[6] ),
    .in___resp__rdy( mem_muxes__in___resp__rdy[6] ),
    .out__req__en( mem_muxes__out__req__en[6] ),
    .out__req__msg( mem_muxes__out__req__msg[6] ),
    .out__req__rdy( mem_muxes__out__req__rdy[6] ),
    .out__resp__en( mem_muxes__out__resp__en[6] ),
    .out__resp__msg( mem_muxes__out__resp__msg[6] ),
    .out__resp__rdy( mem_muxes__out__resp__rdy[6] )
  );

  MemMasterIfcMux__a729082d09b6eb01 mem_muxes__7
  (
    .clk( mem_muxes__clk[7] ),
    .reset( mem_muxes__reset[7] ),
    .sel( mem_muxes__sel[7] ),
    .in___req__en( mem_muxes__in___req__en[7] ),
    .in___req__msg( mem_muxes__in___req__msg[7] ),
    .in___req__rdy( mem_muxes__in___req__rdy[7] ),
    .in___resp__en( mem_muxes__in___resp__en[7] ),
    .in___resp__msg( mem_muxes__in___resp__msg[7] ),
    .in___resp__rdy( mem_muxes__in___resp__rdy[7] ),
    .out__req__en( mem_muxes__out__req__en[7] ),
    .out__req__msg( mem_muxes__out__req__msg[7] ),
    .out__req__rdy( mem_muxes__out__req__rdy[7] ),
    .out__resp__en( mem_muxes__out__resp__en[7] ),
    .out__resp__msg( mem_muxes__out__resp__msg[7] ),
    .out__resp__rdy( mem_muxes__out__resp__rdy[7] )
  );

  MemMasterIfcMux__a729082d09b6eb01 mem_muxes__8
  (
    .clk( mem_muxes__clk[8] ),
    .reset( mem_muxes__reset[8] ),
    .sel( mem_muxes__sel[8] ),
    .in___req__en( mem_muxes__in___req__en[8] ),
    .in___req__msg( mem_muxes__in___req__msg[8] ),
    .in___req__rdy( mem_muxes__in___req__rdy[8] ),
    .in___resp__en( mem_muxes__in___resp__en[8] ),
    .in___resp__msg( mem_muxes__in___resp__msg[8] ),
    .in___resp__rdy( mem_muxes__in___resp__rdy[8] ),
    .out__req__en( mem_muxes__out__req__en[8] ),
    .out__req__msg( mem_muxes__out__req__msg[8] ),
    .out__req__rdy( mem_muxes__out__req__rdy[8] ),
    .out__resp__en( mem_muxes__out__resp__en[8] ),
    .out__resp__msg( mem_muxes__out__resp__msg[8] ),
    .out__resp__rdy( mem_muxes__out__resp__rdy[8] )
  );

  //-------------------------------------------------------------
  // End of component mem_muxes[0:8]
  //-------------------------------------------------------------

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/CGRACoreDpath.py:124
  // s.CSRs_en[i] //= lambda: s.is_cfg_done | s.is_cfg_go | s.is_calc_go
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_CSRs_en_6_7_
    CSRs_en[6'd6:6'd6] = ( is_cfg_done | is_cfg_go ) | is_calc_go;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/CGRACoreDpath.py:126
  // s.CSRs_en[i] //= lambda: s.is_calc_done | s.is_cfg_go | s.is_calc_go
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_CSRs_en_7_8_
    CSRs_en[6'd7:6'd7] = ( is_calc_done | is_cfg_go ) | is_calc_go;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/CGRACoreDpath.py:132
  // s.CSRs_in[i] //= lambda: 1 if s.is_cfg_done else \
  //                          0 if (s.is_cfg_go | s.is_calc_go) else \
  //                          s.CSRs[i].out
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_CSRs_in_6_
    CSRs_in[6'd6] = is_cfg_done ? 32'd1 : ( is_cfg_go | is_calc_go ) ? 32'd0 : CSRs__out[6'( __const__i_at__lambda__s_dut_cgra_xcel_dpath_cgra_dpath_CSRs_in_6_ )];
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/CGRACoreDpath.py:136
  // s.CSRs_in[i] //= lambda: 1 if s.is_calc_done else \
  //                          0 if (s.is_cfg_go | s.is_calc_go) else \
  //                          s.CSRs[i].out
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_CSRs_in_7_
    CSRs_in[6'd7] = is_calc_done ? 32'd1 : ( is_cfg_go | is_calc_go ) ? 32'd0 : CSRs__out[6'( __const__i_at__lambda__s_dut_cgra_xcel_dpath_cgra_dpath_CSRs_in_7_ )];
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/CGRACoreDpath.py:315
  // s.delayed_all_CE_done.in_ //= lambda: reduce_and( s.all_CE_done )
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_delayed_all_CE_done_in_
    delayed_all_CE_done__in_ = ( & all_CE_done );
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/CGRACoreDpath.py:334
  // s.is_calc_done //= lambda: reduce_and( s.all_ME_done ) & reduce_and( s.all_PE_occupancy )
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_is_calc_done
    is_calc_done = ( & all_ME_done ) & ( & all_PE_occupancy );
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/CGRACoreDpath.py:341
  // s.is_calc_go_transaction //= lambda: s.xminion_req_word_addr == GO_CALC
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_is_calc_go_transaction
    is_calc_go_transaction = xminion_req_word_addr == 12'( __const__GO_CALC );
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/CGRACoreDpath.py:340
  // s.is_cfg_go_transaction  //= lambda: s.xminion_req_word_addr == GO_CFG
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_is_cfg_go_transaction
    is_cfg_go_transaction = xminion_req_word_addr == 12'( __const__GO_CFG );
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/cgra/CGRACoreDpath.py:297
  // s.xminion_resp_msg.data //= lambda: s.CSRs[ s.reg_CSR_raddr[bytes_offset:bytes_offset+num_registers_width] ].out
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_cgra_dpath_xminion_resp_msg_data
    xminion_resp_msg.data = CSRs__out[reg_CSR_raddr[4'd7:4'( __const__bytes_offset_at__lambda__s_dut_cgra_xcel_dpath_cgra_dpath_xminion_resp_msg_data )]];
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/CGRACoreDpath.py:142
  // @update
  // def req_bits():
  //   for i in range( p.num_registers ):
  //     if s.xminion_req_word_addr == i:
  //       s.CSR_wen_bits[i] @= s.CSR_wen
  //     else:
  //       s.CSR_wen_bits[i] @= 0
  
  always_comb begin : req_bits
    for ( int unsigned i = 1'd0; i < 7'd64; i += 1'd1 )
      if ( xminion_req_word_addr == 12'(i) ) begin
        CSR_wen_bits[6'(i)] = CSR_wen;
      end
      else
        CSR_wen_bits[6'(i)] = 1'd0;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/CGRACoreDpath.py:153
  // @update_ff
  // def register_CSR_raddr():
  //   s.reg_CSR_raddr <<= s.xminion_req_msg.addr
  
  always_ff @(posedge clk) begin : register_CSR_raddr
    reg_CSR_raddr <= xminion_req_msg.addr;
  end

  assign ME__clk[0] = clk;
  assign ME__reset[0] = reset;
  assign ME__clk[1] = clk;
  assign ME__reset[1] = reset;
  assign ME__clk[2] = clk;
  assign ME__reset[2] = reset;
  assign ME__clk[3] = clk;
  assign ME__reset[3] = reset;
  assign ME__clk[4] = clk;
  assign ME__reset[4] = reset;
  assign ME__clk[5] = clk;
  assign ME__reset[5] = reset;
  assign ME__clk[6] = clk;
  assign ME__reset[6] = reset;
  assign ME__clk[7] = clk;
  assign ME__reset[7] = reset;
  assign ME__clk[8] = clk;
  assign ME__reset[8] = reset;
  assign ME__clk[9] = clk;
  assign ME__reset[9] = reset;
  assign ME__clk[10] = clk;
  assign ME__reset[10] = reset;
  assign ME__clk[11] = clk;
  assign ME__reset[11] = reset;
  assign ME__clk[12] = clk;
  assign ME__reset[12] = reset;
  assign ME__clk[13] = clk;
  assign ME__reset[13] = reset;
  assign ME__clk[14] = clk;
  assign ME__reset[14] = reset;
  assign ME__clk[15] = clk;
  assign ME__reset[15] = reset;
  assign CE_e__clk[0] = clk;
  assign CE_e__reset[0] = reset;
  assign CE_e__clk[1] = clk;
  assign CE_e__reset[1] = reset;
  assign CE_e__clk[2] = clk;
  assign CE_e__reset[2] = reset;
  assign CE_e__clk[3] = clk;
  assign CE_e__reset[3] = reset;
  assign CE_e__clk[4] = clk;
  assign CE_e__reset[4] = reset;
  assign CE_e__clk[5] = clk;
  assign CE_e__reset[5] = reset;
  assign CE_e__clk[6] = clk;
  assign CE_e__reset[6] = reset;
  assign CE_e__clk[7] = clk;
  assign CE_e__reset[7] = reset;
  assign CE_s__clk = clk;
  assign CE_s__reset = reset;
  assign PE_rc__clk[0] = clk;
  assign PE_rc__reset[0] = reset;
  assign PE_rc__clk[1] = clk;
  assign PE_rc__reset[1] = reset;
  assign PE_rc__clk[2] = clk;
  assign PE_rc__reset[2] = reset;
  assign PE_rc__clk[3] = clk;
  assign PE_rc__reset[3] = reset;
  assign PE_rc__clk[4] = clk;
  assign PE_rc__reset[4] = reset;
  assign PE_rc__clk[5] = clk;
  assign PE_rc__reset[5] = reset;
  assign PE_rc__clk[6] = clk;
  assign PE_rc__reset[6] = reset;
  assign PE_rc__clk[7] = clk;
  assign PE_rc__reset[7] = reset;
  assign PE_rc__clk[8] = clk;
  assign PE_rc__reset[8] = reset;
  assign PE_rc__clk[9] = clk;
  assign PE_rc__reset[9] = reset;
  assign PE_rc__clk[10] = clk;
  assign PE_rc__reset[10] = reset;
  assign PE_rc__clk[11] = clk;
  assign PE_rc__reset[11] = reset;
  assign PE_rc__clk[12] = clk;
  assign PE_rc__reset[12] = reset;
  assign PE_rc__clk[13] = clk;
  assign PE_rc__reset[13] = reset;
  assign PE_rc__clk[14] = clk;
  assign PE_rc__reset[14] = reset;
  assign PE_rc__clk[15] = clk;
  assign PE_rc__reset[15] = reset;
  assign PE_rc__clk[16] = clk;
  assign PE_rc__reset[16] = reset;
  assign PE_rc__clk[17] = clk;
  assign PE_rc__reset[17] = reset;
  assign PE_rc__clk[18] = clk;
  assign PE_rc__reset[18] = reset;
  assign PE_rc__clk[19] = clk;
  assign PE_rc__reset[19] = reset;
  assign PE_rc__clk[20] = clk;
  assign PE_rc__reset[20] = reset;
  assign PE_rc__clk[21] = clk;
  assign PE_rc__reset[21] = reset;
  assign PE_rc__clk[22] = clk;
  assign PE_rc__reset[22] = reset;
  assign PE_rc__clk[23] = clk;
  assign PE_rc__reset[23] = reset;
  assign PE_rc__clk[24] = clk;
  assign PE_rc__reset[24] = reset;
  assign PE_rc__clk[25] = clk;
  assign PE_rc__reset[25] = reset;
  assign PE_rc__clk[26] = clk;
  assign PE_rc__reset[26] = reset;
  assign PE_rc__clk[27] = clk;
  assign PE_rc__reset[27] = reset;
  assign PE_rc__clk[28] = clk;
  assign PE_rc__reset[28] = reset;
  assign PE_rc__clk[29] = clk;
  assign PE_rc__reset[29] = reset;
  assign PE_rc__clk[30] = clk;
  assign PE_rc__reset[30] = reset;
  assign PE_rc__clk[31] = clk;
  assign PE_rc__reset[31] = reset;
  assign PE_rc__clk[32] = clk;
  assign PE_rc__reset[32] = reset;
  assign PE_rc__clk[33] = clk;
  assign PE_rc__reset[33] = reset;
  assign PE_rc__clk[34] = clk;
  assign PE_rc__reset[34] = reset;
  assign PE_rc__clk[35] = clk;
  assign PE_rc__reset[35] = reset;
  assign PE_rc__clk[36] = clk;
  assign PE_rc__reset[36] = reset;
  assign PE_rc__clk[37] = clk;
  assign PE_rc__reset[37] = reset;
  assign PE_rc__clk[38] = clk;
  assign PE_rc__reset[38] = reset;
  assign PE_rc__clk[39] = clk;
  assign PE_rc__reset[39] = reset;
  assign PE_rc__clk[40] = clk;
  assign PE_rc__reset[40] = reset;
  assign PE_rc__clk[41] = clk;
  assign PE_rc__reset[41] = reset;
  assign PE_rc__clk[42] = clk;
  assign PE_rc__reset[42] = reset;
  assign PE_rc__clk[43] = clk;
  assign PE_rc__reset[43] = reset;
  assign PE_rc__clk[44] = clk;
  assign PE_rc__reset[44] = reset;
  assign PE_rc__clk[45] = clk;
  assign PE_rc__reset[45] = reset;
  assign PE_rc__clk[46] = clk;
  assign PE_rc__reset[46] = reset;
  assign PE_rc__clk[47] = clk;
  assign PE_rc__reset[47] = reset;
  assign PE_rc__clk[48] = clk;
  assign PE_rc__reset[48] = reset;
  assign PE_rc__clk[49] = clk;
  assign PE_rc__reset[49] = reset;
  assign PE_rc__clk[50] = clk;
  assign PE_rc__reset[50] = reset;
  assign PE_rc__clk[51] = clk;
  assign PE_rc__reset[51] = reset;
  assign PE_rc__clk[52] = clk;
  assign PE_rc__reset[52] = reset;
  assign PE_rc__clk[53] = clk;
  assign PE_rc__reset[53] = reset;
  assign PE_rc__clk[54] = clk;
  assign PE_rc__reset[54] = reset;
  assign PE_rc__clk[55] = clk;
  assign PE_rc__reset[55] = reset;
  assign PE_rc__clk[56] = clk;
  assign PE_rc__reset[56] = reset;
  assign PE_rc__clk[57] = clk;
  assign PE_rc__reset[57] = reset;
  assign PE_rc__clk[58] = clk;
  assign PE_rc__reset[58] = reset;
  assign PE_rc__clk[59] = clk;
  assign PE_rc__reset[59] = reset;
  assign PE_rc__clk[60] = clk;
  assign PE_rc__reset[60] = reset;
  assign PE_rc__clk[61] = clk;
  assign PE_rc__reset[61] = reset;
  assign PE_rc__clk[62] = clk;
  assign PE_rc__reset[62] = reset;
  assign PE_rc__clk[63] = clk;
  assign PE_rc__reset[63] = reset;
  assign mem_muxes__clk[0] = clk;
  assign mem_muxes__reset[0] = reset;
  assign mem_muxes__clk[1] = clk;
  assign mem_muxes__reset[1] = reset;
  assign mem_muxes__clk[2] = clk;
  assign mem_muxes__reset[2] = reset;
  assign mem_muxes__clk[3] = clk;
  assign mem_muxes__reset[3] = reset;
  assign mem_muxes__clk[4] = clk;
  assign mem_muxes__reset[4] = reset;
  assign mem_muxes__clk[5] = clk;
  assign mem_muxes__reset[5] = reset;
  assign mem_muxes__clk[6] = clk;
  assign mem_muxes__reset[6] = reset;
  assign mem_muxes__clk[7] = clk;
  assign mem_muxes__reset[7] = reset;
  assign mem_muxes__clk[8] = clk;
  assign mem_muxes__reset[8] = reset;
  assign xminion_req_word_addr = xminion_req_msg.addr[13:2];
  assign CSRs__clk[0] = clk;
  assign CSRs__reset[0] = reset;
  assign CSRs__clk[1] = clk;
  assign CSRs__reset[1] = reset;
  assign CSRs__clk[2] = clk;
  assign CSRs__reset[2] = reset;
  assign CSRs__clk[3] = clk;
  assign CSRs__reset[3] = reset;
  assign CSRs__clk[4] = clk;
  assign CSRs__reset[4] = reset;
  assign CSRs__clk[5] = clk;
  assign CSRs__reset[5] = reset;
  assign CSRs__clk[6] = clk;
  assign CSRs__reset[6] = reset;
  assign CSRs__clk[7] = clk;
  assign CSRs__reset[7] = reset;
  assign CSRs__clk[8] = clk;
  assign CSRs__reset[8] = reset;
  assign CSRs__clk[9] = clk;
  assign CSRs__reset[9] = reset;
  assign CSRs__clk[10] = clk;
  assign CSRs__reset[10] = reset;
  assign CSRs__clk[11] = clk;
  assign CSRs__reset[11] = reset;
  assign CSRs__clk[12] = clk;
  assign CSRs__reset[12] = reset;
  assign CSRs__clk[13] = clk;
  assign CSRs__reset[13] = reset;
  assign CSRs__clk[14] = clk;
  assign CSRs__reset[14] = reset;
  assign CSRs__clk[15] = clk;
  assign CSRs__reset[15] = reset;
  assign CSRs__clk[16] = clk;
  assign CSRs__reset[16] = reset;
  assign CSRs__clk[17] = clk;
  assign CSRs__reset[17] = reset;
  assign CSRs__clk[18] = clk;
  assign CSRs__reset[18] = reset;
  assign CSRs__clk[19] = clk;
  assign CSRs__reset[19] = reset;
  assign CSRs__clk[20] = clk;
  assign CSRs__reset[20] = reset;
  assign CSRs__clk[21] = clk;
  assign CSRs__reset[21] = reset;
  assign CSRs__clk[22] = clk;
  assign CSRs__reset[22] = reset;
  assign CSRs__clk[23] = clk;
  assign CSRs__reset[23] = reset;
  assign CSRs__clk[24] = clk;
  assign CSRs__reset[24] = reset;
  assign CSRs__clk[25] = clk;
  assign CSRs__reset[25] = reset;
  assign CSRs__clk[26] = clk;
  assign CSRs__reset[26] = reset;
  assign CSRs__clk[27] = clk;
  assign CSRs__reset[27] = reset;
  assign CSRs__clk[28] = clk;
  assign CSRs__reset[28] = reset;
  assign CSRs__clk[29] = clk;
  assign CSRs__reset[29] = reset;
  assign CSRs__clk[30] = clk;
  assign CSRs__reset[30] = reset;
  assign CSRs__clk[31] = clk;
  assign CSRs__reset[31] = reset;
  assign CSRs__clk[32] = clk;
  assign CSRs__reset[32] = reset;
  assign CSRs__clk[33] = clk;
  assign CSRs__reset[33] = reset;
  assign CSRs__clk[34] = clk;
  assign CSRs__reset[34] = reset;
  assign CSRs__clk[35] = clk;
  assign CSRs__reset[35] = reset;
  assign CSRs__clk[36] = clk;
  assign CSRs__reset[36] = reset;
  assign CSRs__clk[37] = clk;
  assign CSRs__reset[37] = reset;
  assign CSRs__clk[38] = clk;
  assign CSRs__reset[38] = reset;
  assign CSRs__clk[39] = clk;
  assign CSRs__reset[39] = reset;
  assign CSRs__clk[40] = clk;
  assign CSRs__reset[40] = reset;
  assign CSRs__clk[41] = clk;
  assign CSRs__reset[41] = reset;
  assign CSRs__clk[42] = clk;
  assign CSRs__reset[42] = reset;
  assign CSRs__clk[43] = clk;
  assign CSRs__reset[43] = reset;
  assign CSRs__clk[44] = clk;
  assign CSRs__reset[44] = reset;
  assign CSRs__clk[45] = clk;
  assign CSRs__reset[45] = reset;
  assign CSRs__clk[46] = clk;
  assign CSRs__reset[46] = reset;
  assign CSRs__clk[47] = clk;
  assign CSRs__reset[47] = reset;
  assign CSRs__clk[48] = clk;
  assign CSRs__reset[48] = reset;
  assign CSRs__clk[49] = clk;
  assign CSRs__reset[49] = reset;
  assign CSRs__clk[50] = clk;
  assign CSRs__reset[50] = reset;
  assign CSRs__clk[51] = clk;
  assign CSRs__reset[51] = reset;
  assign CSRs__clk[52] = clk;
  assign CSRs__reset[52] = reset;
  assign CSRs__clk[53] = clk;
  assign CSRs__reset[53] = reset;
  assign CSRs__clk[54] = clk;
  assign CSRs__reset[54] = reset;
  assign CSRs__clk[55] = clk;
  assign CSRs__reset[55] = reset;
  assign CSRs__clk[56] = clk;
  assign CSRs__reset[56] = reset;
  assign CSRs__clk[57] = clk;
  assign CSRs__reset[57] = reset;
  assign CSRs__clk[58] = clk;
  assign CSRs__reset[58] = reset;
  assign CSRs__clk[59] = clk;
  assign CSRs__reset[59] = reset;
  assign CSRs__clk[60] = clk;
  assign CSRs__reset[60] = reset;
  assign CSRs__clk[61] = clk;
  assign CSRs__reset[61] = reset;
  assign CSRs__clk[62] = clk;
  assign CSRs__reset[62] = reset;
  assign CSRs__clk[63] = clk;
  assign CSRs__reset[63] = reset;
  assign CSRs__en[0] = CSRs_en[0:0];
  assign CSRs__in_[0] = CSRs_in[0];
  assign CSRs__en[1] = CSRs_en[1:1];
  assign CSRs__in_[1] = CSRs_in[1];
  assign CSRs__en[2] = CSRs_en[2:2];
  assign CSRs__in_[2] = CSRs_in[2];
  assign CSRs__en[3] = CSRs_en[3:3];
  assign CSRs__in_[3] = CSRs_in[3];
  assign CSRs__en[4] = CSRs_en[4:4];
  assign CSRs__in_[4] = CSRs_in[4];
  assign CSRs__en[5] = CSRs_en[5:5];
  assign CSRs__in_[5] = CSRs_in[5];
  assign CSRs__en[6] = CSRs_en[6:6];
  assign CSRs__in_[6] = CSRs_in[6];
  assign CSRs__en[7] = CSRs_en[7:7];
  assign CSRs__in_[7] = CSRs_in[7];
  assign CSRs__en[8] = CSRs_en[8:8];
  assign CSRs__in_[8] = CSRs_in[8];
  assign CSRs__en[9] = CSRs_en[9:9];
  assign CSRs__in_[9] = CSRs_in[9];
  assign CSRs__en[10] = CSRs_en[10:10];
  assign CSRs__in_[10] = CSRs_in[10];
  assign CSRs__en[11] = CSRs_en[11:11];
  assign CSRs__in_[11] = CSRs_in[11];
  assign CSRs__en[12] = CSRs_en[12:12];
  assign CSRs__in_[12] = CSRs_in[12];
  assign CSRs__en[13] = CSRs_en[13:13];
  assign CSRs__in_[13] = CSRs_in[13];
  assign CSRs__en[14] = CSRs_en[14:14];
  assign CSRs__in_[14] = CSRs_in[14];
  assign CSRs__en[15] = CSRs_en[15:15];
  assign CSRs__in_[15] = CSRs_in[15];
  assign CSRs__en[16] = CSRs_en[16:16];
  assign CSRs__in_[16] = CSRs_in[16];
  assign CSRs__en[17] = CSRs_en[17:17];
  assign CSRs__in_[17] = CSRs_in[17];
  assign CSRs__en[18] = CSRs_en[18:18];
  assign CSRs__in_[18] = CSRs_in[18];
  assign CSRs__en[19] = CSRs_en[19:19];
  assign CSRs__in_[19] = CSRs_in[19];
  assign CSRs__en[20] = CSRs_en[20:20];
  assign CSRs__in_[20] = CSRs_in[20];
  assign CSRs__en[21] = CSRs_en[21:21];
  assign CSRs__in_[21] = CSRs_in[21];
  assign CSRs__en[22] = CSRs_en[22:22];
  assign CSRs__in_[22] = CSRs_in[22];
  assign CSRs__en[23] = CSRs_en[23:23];
  assign CSRs__in_[23] = CSRs_in[23];
  assign CSRs__en[24] = CSRs_en[24:24];
  assign CSRs__in_[24] = CSRs_in[24];
  assign CSRs__en[25] = CSRs_en[25:25];
  assign CSRs__in_[25] = CSRs_in[25];
  assign CSRs__en[26] = CSRs_en[26:26];
  assign CSRs__in_[26] = CSRs_in[26];
  assign CSRs__en[27] = CSRs_en[27:27];
  assign CSRs__in_[27] = CSRs_in[27];
  assign CSRs__en[28] = CSRs_en[28:28];
  assign CSRs__in_[28] = CSRs_in[28];
  assign CSRs__en[29] = CSRs_en[29:29];
  assign CSRs__in_[29] = CSRs_in[29];
  assign CSRs__en[30] = CSRs_en[30:30];
  assign CSRs__in_[30] = CSRs_in[30];
  assign CSRs__en[31] = CSRs_en[31:31];
  assign CSRs__in_[31] = CSRs_in[31];
  assign CSRs__en[32] = CSRs_en[32:32];
  assign CSRs__in_[32] = CSRs_in[32];
  assign CSRs__en[33] = CSRs_en[33:33];
  assign CSRs__in_[33] = CSRs_in[33];
  assign CSRs__en[34] = CSRs_en[34:34];
  assign CSRs__in_[34] = CSRs_in[34];
  assign CSRs__en[35] = CSRs_en[35:35];
  assign CSRs__in_[35] = CSRs_in[35];
  assign CSRs__en[36] = CSRs_en[36:36];
  assign CSRs__in_[36] = CSRs_in[36];
  assign CSRs__en[37] = CSRs_en[37:37];
  assign CSRs__in_[37] = CSRs_in[37];
  assign CSRs__en[38] = CSRs_en[38:38];
  assign CSRs__in_[38] = CSRs_in[38];
  assign CSRs__en[39] = CSRs_en[39:39];
  assign CSRs__in_[39] = CSRs_in[39];
  assign CSRs__en[40] = CSRs_en[40:40];
  assign CSRs__in_[40] = CSRs_in[40];
  assign CSRs__en[41] = CSRs_en[41:41];
  assign CSRs__in_[41] = CSRs_in[41];
  assign CSRs__en[42] = CSRs_en[42:42];
  assign CSRs__in_[42] = CSRs_in[42];
  assign CSRs__en[43] = CSRs_en[43:43];
  assign CSRs__in_[43] = CSRs_in[43];
  assign CSRs__en[44] = CSRs_en[44:44];
  assign CSRs__in_[44] = CSRs_in[44];
  assign CSRs__en[45] = CSRs_en[45:45];
  assign CSRs__in_[45] = CSRs_in[45];
  assign CSRs__en[46] = CSRs_en[46:46];
  assign CSRs__in_[46] = CSRs_in[46];
  assign CSRs__en[47] = CSRs_en[47:47];
  assign CSRs__in_[47] = CSRs_in[47];
  assign CSRs__en[48] = CSRs_en[48:48];
  assign CSRs__in_[48] = CSRs_in[48];
  assign CSRs__en[49] = CSRs_en[49:49];
  assign CSRs__in_[49] = CSRs_in[49];
  assign CSRs__en[50] = CSRs_en[50:50];
  assign CSRs__in_[50] = CSRs_in[50];
  assign CSRs__en[51] = CSRs_en[51:51];
  assign CSRs__in_[51] = CSRs_in[51];
  assign CSRs__en[52] = CSRs_en[52:52];
  assign CSRs__in_[52] = CSRs_in[52];
  assign CSRs__en[53] = CSRs_en[53:53];
  assign CSRs__in_[53] = CSRs_in[53];
  assign CSRs__en[54] = CSRs_en[54:54];
  assign CSRs__in_[54] = CSRs_in[54];
  assign CSRs__en[55] = CSRs_en[55:55];
  assign CSRs__in_[55] = CSRs_in[55];
  assign CSRs__en[56] = CSRs_en[56:56];
  assign CSRs__in_[56] = CSRs_in[56];
  assign CSRs__en[57] = CSRs_en[57:57];
  assign CSRs__in_[57] = CSRs_in[57];
  assign CSRs__en[58] = CSRs_en[58:58];
  assign CSRs__in_[58] = CSRs_in[58];
  assign CSRs__en[59] = CSRs_en[59:59];
  assign CSRs__in_[59] = CSRs_in[59];
  assign CSRs__en[60] = CSRs_en[60:60];
  assign CSRs__in_[60] = CSRs_in[60];
  assign CSRs__en[61] = CSRs_en[61:61];
  assign CSRs__in_[61] = CSRs_in[61];
  assign CSRs__en[62] = CSRs_en[62:62];
  assign CSRs__in_[62] = CSRs_in[62];
  assign CSRs__en[63] = CSRs_en[63:63];
  assign CSRs__in_[63] = CSRs_in[63];
  assign CSRs_en[0:0] = CSR_wen_bits[0:0];
  assign CSRs_en[1:1] = CSR_wen_bits[1:1];
  assign CSRs_en[2:2] = CSR_wen_bits[2:2];
  assign CSRs_en[3:3] = CSR_wen_bits[3:3];
  assign CSRs_en[4:4] = CSR_wen_bits[4:4];
  assign CSRs_en[5:5] = CSR_wen_bits[5:5];
  assign CSRs_en[8:8] = CSR_wen_bits[8:8];
  assign CSRs_en[9:9] = CSR_wen_bits[9:9];
  assign CSRs_en[10:10] = CSR_wen_bits[10:10];
  assign CSRs_en[11:11] = CSR_wen_bits[11:11];
  assign CSRs_en[12:12] = CSR_wen_bits[12:12];
  assign CSRs_en[13:13] = CSR_wen_bits[13:13];
  assign CSRs_en[14:14] = CSR_wen_bits[14:14];
  assign CSRs_en[15:15] = CSR_wen_bits[15:15];
  assign CSRs_en[16:16] = CSR_wen_bits[16:16];
  assign CSRs_en[17:17] = CSR_wen_bits[17:17];
  assign CSRs_en[18:18] = CSR_wen_bits[18:18];
  assign CSRs_en[19:19] = CSR_wen_bits[19:19];
  assign CSRs_en[20:20] = CSR_wen_bits[20:20];
  assign CSRs_en[21:21] = CSR_wen_bits[21:21];
  assign CSRs_en[22:22] = CSR_wen_bits[22:22];
  assign CSRs_en[23:23] = CSR_wen_bits[23:23];
  assign CSRs_en[24:24] = CSR_wen_bits[24:24];
  assign CSRs_en[25:25] = CSR_wen_bits[25:25];
  assign CSRs_en[26:26] = CSR_wen_bits[26:26];
  assign CSRs_en[27:27] = CSR_wen_bits[27:27];
  assign CSRs_en[28:28] = CSR_wen_bits[28:28];
  assign CSRs_en[29:29] = CSR_wen_bits[29:29];
  assign CSRs_en[30:30] = CSR_wen_bits[30:30];
  assign CSRs_en[31:31] = CSR_wen_bits[31:31];
  assign CSRs_en[32:32] = CSR_wen_bits[32:32];
  assign CSRs_en[33:33] = CSR_wen_bits[33:33];
  assign CSRs_en[34:34] = CSR_wen_bits[34:34];
  assign CSRs_en[35:35] = CSR_wen_bits[35:35];
  assign CSRs_en[36:36] = CSR_wen_bits[36:36];
  assign CSRs_en[37:37] = CSR_wen_bits[37:37];
  assign CSRs_en[38:38] = CSR_wen_bits[38:38];
  assign CSRs_en[39:39] = CSR_wen_bits[39:39];
  assign CSRs_en[40:40] = CSR_wen_bits[40:40];
  assign CSRs_en[41:41] = CSR_wen_bits[41:41];
  assign CSRs_en[42:42] = CSR_wen_bits[42:42];
  assign CSRs_en[43:43] = CSR_wen_bits[43:43];
  assign CSRs_en[44:44] = CSR_wen_bits[44:44];
  assign CSRs_en[45:45] = CSR_wen_bits[45:45];
  assign CSRs_en[46:46] = CSR_wen_bits[46:46];
  assign CSRs_en[47:47] = CSR_wen_bits[47:47];
  assign CSRs_en[48:48] = CSR_wen_bits[48:48];
  assign CSRs_en[49:49] = CSR_wen_bits[49:49];
  assign CSRs_en[50:50] = CSR_wen_bits[50:50];
  assign CSRs_en[51:51] = CSR_wen_bits[51:51];
  assign CSRs_en[52:52] = CSR_wen_bits[52:52];
  assign CSRs_en[53:53] = CSR_wen_bits[53:53];
  assign CSRs_en[54:54] = CSR_wen_bits[54:54];
  assign CSRs_en[55:55] = CSR_wen_bits[55:55];
  assign CSRs_en[56:56] = CSR_wen_bits[56:56];
  assign CSRs_en[57:57] = CSR_wen_bits[57:57];
  assign CSRs_en[58:58] = CSR_wen_bits[58:58];
  assign CSRs_en[59:59] = CSR_wen_bits[59:59];
  assign CSRs_en[60:60] = CSR_wen_bits[60:60];
  assign CSRs_en[61:61] = CSR_wen_bits[61:61];
  assign CSRs_en[62:62] = CSR_wen_bits[62:62];
  assign CSRs_en[63:63] = CSR_wen_bits[63:63];
  assign CSRs_in[0] = xminion_req_msg.data;
  assign CSRs_in[1] = xminion_req_msg.data;
  assign CSRs_in[2] = xminion_req_msg.data;
  assign CSRs_in[3] = xminion_req_msg.data;
  assign CSRs_in[4] = xminion_req_msg.data;
  assign CSRs_in[5] = xminion_req_msg.data;
  assign CSRs_in[8] = xminion_req_msg.data;
  assign CSRs_in[9] = xminion_req_msg.data;
  assign CSRs_in[10] = xminion_req_msg.data;
  assign CSRs_in[11] = xminion_req_msg.data;
  assign CSRs_in[12] = xminion_req_msg.data;
  assign CSRs_in[13] = xminion_req_msg.data;
  assign CSRs_in[14] = xminion_req_msg.data;
  assign CSRs_in[15] = xminion_req_msg.data;
  assign CSRs_in[16] = xminion_req_msg.data;
  assign CSRs_in[17] = xminion_req_msg.data;
  assign CSRs_in[18] = xminion_req_msg.data;
  assign CSRs_in[19] = xminion_req_msg.data;
  assign CSRs_in[20] = xminion_req_msg.data;
  assign CSRs_in[21] = xminion_req_msg.data;
  assign CSRs_in[22] = xminion_req_msg.data;
  assign CSRs_in[23] = xminion_req_msg.data;
  assign CSRs_in[24] = xminion_req_msg.data;
  assign CSRs_in[25] = xminion_req_msg.data;
  assign CSRs_in[26] = xminion_req_msg.data;
  assign CSRs_in[27] = xminion_req_msg.data;
  assign CSRs_in[28] = xminion_req_msg.data;
  assign CSRs_in[29] = xminion_req_msg.data;
  assign CSRs_in[30] = xminion_req_msg.data;
  assign CSRs_in[31] = xminion_req_msg.data;
  assign CSRs_in[32] = xminion_req_msg.data;
  assign CSRs_in[33] = xminion_req_msg.data;
  assign CSRs_in[34] = xminion_req_msg.data;
  assign CSRs_in[35] = xminion_req_msg.data;
  assign CSRs_in[36] = xminion_req_msg.data;
  assign CSRs_in[37] = xminion_req_msg.data;
  assign CSRs_in[38] = xminion_req_msg.data;
  assign CSRs_in[39] = xminion_req_msg.data;
  assign CSRs_in[40] = xminion_req_msg.data;
  assign CSRs_in[41] = xminion_req_msg.data;
  assign CSRs_in[42] = xminion_req_msg.data;
  assign CSRs_in[43] = xminion_req_msg.data;
  assign CSRs_in[44] = xminion_req_msg.data;
  assign CSRs_in[45] = xminion_req_msg.data;
  assign CSRs_in[46] = xminion_req_msg.data;
  assign CSRs_in[47] = xminion_req_msg.data;
  assign CSRs_in[48] = xminion_req_msg.data;
  assign CSRs_in[49] = xminion_req_msg.data;
  assign CSRs_in[50] = xminion_req_msg.data;
  assign CSRs_in[51] = xminion_req_msg.data;
  assign CSRs_in[52] = xminion_req_msg.data;
  assign CSRs_in[53] = xminion_req_msg.data;
  assign CSRs_in[54] = xminion_req_msg.data;
  assign CSRs_in[55] = xminion_req_msg.data;
  assign CSRs_in[56] = xminion_req_msg.data;
  assign CSRs_in[57] = xminion_req_msg.data;
  assign CSRs_in[58] = xminion_req_msg.data;
  assign CSRs_in[59] = xminion_req_msg.data;
  assign CSRs_in[60] = xminion_req_msg.data;
  assign CSRs_in[61] = xminion_req_msg.data;
  assign CSRs_in[62] = xminion_req_msg.data;
  assign CSRs_in[63] = xminion_req_msg.data;
  assign CE_s__cfg_init = cfg_init;
  assign CE_s__cfg_me_base_addr = CSRs__out[2][13:0];
  assign CE_s__cfg_pe_base_addr = CSRs__out[3][13:0];
  assign CE_s__cfg_pe_line_stride = CSRs__out[4][13:0];
  assign CE_s__cfg_cmd = CSRs__out[5][0:0];
  assign CE_e__cfg_init[0] = cfg_init;
  assign CE_e__cfg_me_base_addr[0] = CSRs__out[2][13:0];
  assign CE_e__cfg_pe_base_addr[0] = CSRs__out[3][13:0];
  assign CE_e__cfg_pe_line_stride[0] = CSRs__out[4][13:0];
  assign CE_e__cfg_cmd[0] = CSRs__out[5][0:0];
  assign CE_e__cfg_init[1] = cfg_init;
  assign CE_e__cfg_me_base_addr[1] = CSRs__out[2][13:0];
  assign CE_e__cfg_pe_base_addr[1] = CSRs__out[3][13:0];
  assign CE_e__cfg_pe_line_stride[1] = CSRs__out[4][13:0];
  assign CE_e__cfg_cmd[1] = CSRs__out[5][0:0];
  assign CE_e__cfg_init[2] = cfg_init;
  assign CE_e__cfg_me_base_addr[2] = CSRs__out[2][13:0];
  assign CE_e__cfg_pe_base_addr[2] = CSRs__out[3][13:0];
  assign CE_e__cfg_pe_line_stride[2] = CSRs__out[4][13:0];
  assign CE_e__cfg_cmd[2] = CSRs__out[5][0:0];
  assign CE_e__cfg_init[3] = cfg_init;
  assign CE_e__cfg_me_base_addr[3] = CSRs__out[2][13:0];
  assign CE_e__cfg_pe_base_addr[3] = CSRs__out[3][13:0];
  assign CE_e__cfg_pe_line_stride[3] = CSRs__out[4][13:0];
  assign CE_e__cfg_cmd[3] = CSRs__out[5][0:0];
  assign CE_e__cfg_init[4] = cfg_init;
  assign CE_e__cfg_me_base_addr[4] = CSRs__out[2][13:0];
  assign CE_e__cfg_pe_base_addr[4] = CSRs__out[3][13:0];
  assign CE_e__cfg_pe_line_stride[4] = CSRs__out[4][13:0];
  assign CE_e__cfg_cmd[4] = CSRs__out[5][0:0];
  assign CE_e__cfg_init[5] = cfg_init;
  assign CE_e__cfg_me_base_addr[5] = CSRs__out[2][13:0];
  assign CE_e__cfg_pe_base_addr[5] = CSRs__out[3][13:0];
  assign CE_e__cfg_pe_line_stride[5] = CSRs__out[4][13:0];
  assign CE_e__cfg_cmd[5] = CSRs__out[5][0:0];
  assign CE_e__cfg_init[6] = cfg_init;
  assign CE_e__cfg_me_base_addr[6] = CSRs__out[2][13:0];
  assign CE_e__cfg_pe_base_addr[6] = CSRs__out[3][13:0];
  assign CE_e__cfg_pe_line_stride[6] = CSRs__out[4][13:0];
  assign CE_e__cfg_cmd[6] = CSRs__out[5][0:0];
  assign CE_e__cfg_init[7] = cfg_init;
  assign CE_e__cfg_me_base_addr[7] = CSRs__out[2][13:0];
  assign CE_e__cfg_pe_base_addr[7] = CSRs__out[3][13:0];
  assign CE_e__cfg_pe_line_stride[7] = CSRs__out[4][13:0];
  assign CE_e__cfg_cmd[7] = CSRs__out[5][0:0];
  assign CE_s__y_cord = 4'd0;
  assign CE_e__y_cord[0] = 4'd1;
  assign CE_e__y_cord[1] = 4'd2;
  assign CE_e__y_cord[2] = 4'd3;
  assign CE_e__y_cord[3] = 4'd4;
  assign CE_e__y_cord[4] = 4'd5;
  assign CE_e__y_cord[5] = 4'd6;
  assign CE_e__y_cord[6] = 4'd7;
  assign CE_e__y_cord[7] = 4'd8;
  assign ME__is_calc[0] = is_calc;
  assign ME__cfg_in__msg[0] = ME__cfg_out__msg[1];
  assign ME__cfg_out__rdy[1] = ME__cfg_in__rdy[0];
  assign ME__cfg_in__val[0] = ME__cfg_out__val[1];
  assign ME__cfg_out__rdy[0] = 1'd1;
  assign ME__is_calc[1] = is_calc;
  assign ME__cfg_in__msg[1] = ME__cfg_out__msg[2];
  assign ME__cfg_out__rdy[2] = ME__cfg_in__rdy[1];
  assign ME__cfg_in__val[1] = ME__cfg_out__val[2];
  assign ME__is_calc[2] = is_calc;
  assign ME__cfg_in__msg[2] = ME__cfg_out__msg[3];
  assign ME__cfg_out__rdy[3] = ME__cfg_in__rdy[2];
  assign ME__cfg_in__val[2] = ME__cfg_out__val[3];
  assign ME__is_calc[3] = is_calc;
  assign ME__cfg_in__msg[3] = ME__cfg_out__msg[4];
  assign ME__cfg_out__rdy[4] = ME__cfg_in__rdy[3];
  assign ME__cfg_in__val[3] = ME__cfg_out__val[4];
  assign ME__is_calc[4] = is_calc;
  assign ME__cfg_in__msg[4] = ME__cfg_out__msg[5];
  assign ME__cfg_out__rdy[5] = ME__cfg_in__rdy[4];
  assign ME__cfg_in__val[4] = ME__cfg_out__val[5];
  assign ME__is_calc[5] = is_calc;
  assign ME__cfg_in__msg[5] = ME__cfg_out__msg[6];
  assign ME__cfg_out__rdy[6] = ME__cfg_in__rdy[5];
  assign ME__cfg_in__val[5] = ME__cfg_out__val[6];
  assign ME__is_calc[6] = is_calc;
  assign ME__cfg_in__msg[6] = ME__cfg_out__msg[7];
  assign ME__cfg_out__rdy[7] = ME__cfg_in__rdy[6];
  assign ME__cfg_in__val[6] = ME__cfg_out__val[7];
  assign ME__is_calc[7] = is_calc;
  assign ME__cfg_in__msg[7] = CE_s__cfg_out__msg;
  assign CE_s__cfg_out__rdy = ME__cfg_in__rdy[7];
  assign ME__cfg_in__val[7] = CE_s__cfg_out__val;
  assign ME__is_calc[8] = is_calc;
  assign ME__cfg_in__msg[8] = PE_rc__cfg_out__msg[0];
  assign PE_rc__cfg_out__rdy[0] = ME__cfg_in__rdy[8];
  assign ME__cfg_in__val[8] = PE_rc__cfg_out__val[0];
  assign ME__cfg_out__rdy[8] = 1'd1;
  assign ME__is_calc[9] = is_calc;
  assign ME__cfg_in__msg[9] = PE_rc__cfg_out__msg[8];
  assign PE_rc__cfg_out__rdy[8] = ME__cfg_in__rdy[9];
  assign ME__cfg_in__val[9] = PE_rc__cfg_out__val[8];
  assign ME__cfg_out__rdy[9] = 1'd1;
  assign ME__is_calc[10] = is_calc;
  assign ME__cfg_in__msg[10] = PE_rc__cfg_out__msg[16];
  assign PE_rc__cfg_out__rdy[16] = ME__cfg_in__rdy[10];
  assign ME__cfg_in__val[10] = PE_rc__cfg_out__val[16];
  assign ME__cfg_out__rdy[10] = 1'd1;
  assign ME__is_calc[11] = is_calc;
  assign ME__cfg_in__msg[11] = PE_rc__cfg_out__msg[24];
  assign PE_rc__cfg_out__rdy[24] = ME__cfg_in__rdy[11];
  assign ME__cfg_in__val[11] = PE_rc__cfg_out__val[24];
  assign ME__cfg_out__rdy[11] = 1'd1;
  assign ME__is_calc[12] = is_calc;
  assign ME__cfg_in__msg[12] = PE_rc__cfg_out__msg[32];
  assign PE_rc__cfg_out__rdy[32] = ME__cfg_in__rdy[12];
  assign ME__cfg_in__val[12] = PE_rc__cfg_out__val[32];
  assign ME__cfg_out__rdy[12] = 1'd1;
  assign ME__is_calc[13] = is_calc;
  assign ME__cfg_in__msg[13] = PE_rc__cfg_out__msg[40];
  assign PE_rc__cfg_out__rdy[40] = ME__cfg_in__rdy[13];
  assign ME__cfg_in__val[13] = PE_rc__cfg_out__val[40];
  assign ME__cfg_out__rdy[13] = 1'd1;
  assign ME__is_calc[14] = is_calc;
  assign ME__cfg_in__msg[14] = PE_rc__cfg_out__msg[48];
  assign PE_rc__cfg_out__rdy[48] = ME__cfg_in__rdy[14];
  assign ME__cfg_in__val[14] = PE_rc__cfg_out__val[48];
  assign ME__cfg_out__rdy[14] = 1'd1;
  assign ME__is_calc[15] = is_calc;
  assign ME__cfg_in__msg[15] = PE_rc__cfg_out__msg[56];
  assign PE_rc__cfg_out__rdy[56] = ME__cfg_in__rdy[15];
  assign ME__cfg_in__val[15] = PE_rc__cfg_out__val[56];
  assign ME__cfg_out__rdy[15] = 1'd1;
  assign ME__id_cord[0] = 4'd0;
  assign ME__x_cord[0] = 4'd1;
  assign ME__id_cord[1] = 4'd1;
  assign ME__x_cord[1] = 4'd2;
  assign ME__id_cord[2] = 4'd2;
  assign ME__x_cord[2] = 4'd3;
  assign ME__id_cord[3] = 4'd3;
  assign ME__x_cord[3] = 4'd4;
  assign ME__id_cord[4] = 4'd4;
  assign ME__x_cord[4] = 4'd5;
  assign ME__id_cord[5] = 4'd5;
  assign ME__x_cord[5] = 4'd6;
  assign ME__id_cord[6] = 4'd6;
  assign ME__x_cord[6] = 4'd7;
  assign ME__id_cord[7] = 4'd7;
  assign ME__x_cord[7] = 4'd8;
  assign ME__id_cord[8] = 4'd8;
  assign ME__x_cord[8] = 4'd0;
  assign ME__id_cord[9] = 4'd9;
  assign ME__x_cord[9] = 4'd0;
  assign ME__id_cord[10] = 4'd10;
  assign ME__x_cord[10] = 4'd0;
  assign ME__id_cord[11] = 4'd11;
  assign ME__x_cord[11] = 4'd0;
  assign ME__id_cord[12] = 4'd12;
  assign ME__x_cord[12] = 4'd0;
  assign ME__id_cord[13] = 4'd13;
  assign ME__x_cord[13] = 4'd0;
  assign ME__id_cord[14] = 4'd14;
  assign ME__x_cord[14] = 4'd0;
  assign ME__id_cord[15] = 4'd15;
  assign ME__x_cord[15] = 4'd0;
  assign PE_rc__cfg_in__msg[0] = PE_rc__cfg_out__msg[1];
  assign PE_rc__cfg_out__rdy[1] = PE_rc__cfg_in__rdy[0];
  assign PE_rc__cfg_in__val[0] = PE_rc__cfg_out__val[1];
  assign PE_rc__cfg_in__msg[1] = PE_rc__cfg_out__msg[2];
  assign PE_rc__cfg_out__rdy[2] = PE_rc__cfg_in__rdy[1];
  assign PE_rc__cfg_in__val[1] = PE_rc__cfg_out__val[2];
  assign PE_rc__cfg_in__msg[2] = PE_rc__cfg_out__msg[3];
  assign PE_rc__cfg_out__rdy[3] = PE_rc__cfg_in__rdy[2];
  assign PE_rc__cfg_in__val[2] = PE_rc__cfg_out__val[3];
  assign PE_rc__cfg_in__msg[3] = PE_rc__cfg_out__msg[4];
  assign PE_rc__cfg_out__rdy[4] = PE_rc__cfg_in__rdy[3];
  assign PE_rc__cfg_in__val[3] = PE_rc__cfg_out__val[4];
  assign PE_rc__cfg_in__msg[4] = PE_rc__cfg_out__msg[5];
  assign PE_rc__cfg_out__rdy[5] = PE_rc__cfg_in__rdy[4];
  assign PE_rc__cfg_in__val[4] = PE_rc__cfg_out__val[5];
  assign PE_rc__cfg_in__msg[5] = PE_rc__cfg_out__msg[6];
  assign PE_rc__cfg_out__rdy[6] = PE_rc__cfg_in__rdy[5];
  assign PE_rc__cfg_in__val[5] = PE_rc__cfg_out__val[6];
  assign PE_rc__cfg_in__msg[6] = PE_rc__cfg_out__msg[7];
  assign PE_rc__cfg_out__rdy[7] = PE_rc__cfg_in__rdy[6];
  assign PE_rc__cfg_in__val[6] = PE_rc__cfg_out__val[7];
  assign PE_rc__cfg_in__msg[7] = CE_e__cfg_out__msg[0];
  assign CE_e__cfg_out__rdy[0] = PE_rc__cfg_in__rdy[7];
  assign PE_rc__cfg_in__val[7] = CE_e__cfg_out__val[0];
  assign PE_rc__cfg_in__msg[8] = PE_rc__cfg_out__msg[9];
  assign PE_rc__cfg_out__rdy[9] = PE_rc__cfg_in__rdy[8];
  assign PE_rc__cfg_in__val[8] = PE_rc__cfg_out__val[9];
  assign PE_rc__cfg_in__msg[9] = PE_rc__cfg_out__msg[10];
  assign PE_rc__cfg_out__rdy[10] = PE_rc__cfg_in__rdy[9];
  assign PE_rc__cfg_in__val[9] = PE_rc__cfg_out__val[10];
  assign PE_rc__cfg_in__msg[10] = PE_rc__cfg_out__msg[11];
  assign PE_rc__cfg_out__rdy[11] = PE_rc__cfg_in__rdy[10];
  assign PE_rc__cfg_in__val[10] = PE_rc__cfg_out__val[11];
  assign PE_rc__cfg_in__msg[11] = PE_rc__cfg_out__msg[12];
  assign PE_rc__cfg_out__rdy[12] = PE_rc__cfg_in__rdy[11];
  assign PE_rc__cfg_in__val[11] = PE_rc__cfg_out__val[12];
  assign PE_rc__cfg_in__msg[12] = PE_rc__cfg_out__msg[13];
  assign PE_rc__cfg_out__rdy[13] = PE_rc__cfg_in__rdy[12];
  assign PE_rc__cfg_in__val[12] = PE_rc__cfg_out__val[13];
  assign PE_rc__cfg_in__msg[13] = PE_rc__cfg_out__msg[14];
  assign PE_rc__cfg_out__rdy[14] = PE_rc__cfg_in__rdy[13];
  assign PE_rc__cfg_in__val[13] = PE_rc__cfg_out__val[14];
  assign PE_rc__cfg_in__msg[14] = PE_rc__cfg_out__msg[15];
  assign PE_rc__cfg_out__rdy[15] = PE_rc__cfg_in__rdy[14];
  assign PE_rc__cfg_in__val[14] = PE_rc__cfg_out__val[15];
  assign PE_rc__cfg_in__msg[15] = CE_e__cfg_out__msg[1];
  assign CE_e__cfg_out__rdy[1] = PE_rc__cfg_in__rdy[15];
  assign PE_rc__cfg_in__val[15] = CE_e__cfg_out__val[1];
  assign PE_rc__cfg_in__msg[16] = PE_rc__cfg_out__msg[17];
  assign PE_rc__cfg_out__rdy[17] = PE_rc__cfg_in__rdy[16];
  assign PE_rc__cfg_in__val[16] = PE_rc__cfg_out__val[17];
  assign PE_rc__cfg_in__msg[17] = PE_rc__cfg_out__msg[18];
  assign PE_rc__cfg_out__rdy[18] = PE_rc__cfg_in__rdy[17];
  assign PE_rc__cfg_in__val[17] = PE_rc__cfg_out__val[18];
  assign PE_rc__cfg_in__msg[18] = PE_rc__cfg_out__msg[19];
  assign PE_rc__cfg_out__rdy[19] = PE_rc__cfg_in__rdy[18];
  assign PE_rc__cfg_in__val[18] = PE_rc__cfg_out__val[19];
  assign PE_rc__cfg_in__msg[19] = PE_rc__cfg_out__msg[20];
  assign PE_rc__cfg_out__rdy[20] = PE_rc__cfg_in__rdy[19];
  assign PE_rc__cfg_in__val[19] = PE_rc__cfg_out__val[20];
  assign PE_rc__cfg_in__msg[20] = PE_rc__cfg_out__msg[21];
  assign PE_rc__cfg_out__rdy[21] = PE_rc__cfg_in__rdy[20];
  assign PE_rc__cfg_in__val[20] = PE_rc__cfg_out__val[21];
  assign PE_rc__cfg_in__msg[21] = PE_rc__cfg_out__msg[22];
  assign PE_rc__cfg_out__rdy[22] = PE_rc__cfg_in__rdy[21];
  assign PE_rc__cfg_in__val[21] = PE_rc__cfg_out__val[22];
  assign PE_rc__cfg_in__msg[22] = PE_rc__cfg_out__msg[23];
  assign PE_rc__cfg_out__rdy[23] = PE_rc__cfg_in__rdy[22];
  assign PE_rc__cfg_in__val[22] = PE_rc__cfg_out__val[23];
  assign PE_rc__cfg_in__msg[23] = CE_e__cfg_out__msg[2];
  assign CE_e__cfg_out__rdy[2] = PE_rc__cfg_in__rdy[23];
  assign PE_rc__cfg_in__val[23] = CE_e__cfg_out__val[2];
  assign PE_rc__cfg_in__msg[24] = PE_rc__cfg_out__msg[25];
  assign PE_rc__cfg_out__rdy[25] = PE_rc__cfg_in__rdy[24];
  assign PE_rc__cfg_in__val[24] = PE_rc__cfg_out__val[25];
  assign PE_rc__cfg_in__msg[25] = PE_rc__cfg_out__msg[26];
  assign PE_rc__cfg_out__rdy[26] = PE_rc__cfg_in__rdy[25];
  assign PE_rc__cfg_in__val[25] = PE_rc__cfg_out__val[26];
  assign PE_rc__cfg_in__msg[26] = PE_rc__cfg_out__msg[27];
  assign PE_rc__cfg_out__rdy[27] = PE_rc__cfg_in__rdy[26];
  assign PE_rc__cfg_in__val[26] = PE_rc__cfg_out__val[27];
  assign PE_rc__cfg_in__msg[27] = PE_rc__cfg_out__msg[28];
  assign PE_rc__cfg_out__rdy[28] = PE_rc__cfg_in__rdy[27];
  assign PE_rc__cfg_in__val[27] = PE_rc__cfg_out__val[28];
  assign PE_rc__cfg_in__msg[28] = PE_rc__cfg_out__msg[29];
  assign PE_rc__cfg_out__rdy[29] = PE_rc__cfg_in__rdy[28];
  assign PE_rc__cfg_in__val[28] = PE_rc__cfg_out__val[29];
  assign PE_rc__cfg_in__msg[29] = PE_rc__cfg_out__msg[30];
  assign PE_rc__cfg_out__rdy[30] = PE_rc__cfg_in__rdy[29];
  assign PE_rc__cfg_in__val[29] = PE_rc__cfg_out__val[30];
  assign PE_rc__cfg_in__msg[30] = PE_rc__cfg_out__msg[31];
  assign PE_rc__cfg_out__rdy[31] = PE_rc__cfg_in__rdy[30];
  assign PE_rc__cfg_in__val[30] = PE_rc__cfg_out__val[31];
  assign PE_rc__cfg_in__msg[31] = CE_e__cfg_out__msg[3];
  assign CE_e__cfg_out__rdy[3] = PE_rc__cfg_in__rdy[31];
  assign PE_rc__cfg_in__val[31] = CE_e__cfg_out__val[3];
  assign PE_rc__cfg_in__msg[32] = PE_rc__cfg_out__msg[33];
  assign PE_rc__cfg_out__rdy[33] = PE_rc__cfg_in__rdy[32];
  assign PE_rc__cfg_in__val[32] = PE_rc__cfg_out__val[33];
  assign PE_rc__cfg_in__msg[33] = PE_rc__cfg_out__msg[34];
  assign PE_rc__cfg_out__rdy[34] = PE_rc__cfg_in__rdy[33];
  assign PE_rc__cfg_in__val[33] = PE_rc__cfg_out__val[34];
  assign PE_rc__cfg_in__msg[34] = PE_rc__cfg_out__msg[35];
  assign PE_rc__cfg_out__rdy[35] = PE_rc__cfg_in__rdy[34];
  assign PE_rc__cfg_in__val[34] = PE_rc__cfg_out__val[35];
  assign PE_rc__cfg_in__msg[35] = PE_rc__cfg_out__msg[36];
  assign PE_rc__cfg_out__rdy[36] = PE_rc__cfg_in__rdy[35];
  assign PE_rc__cfg_in__val[35] = PE_rc__cfg_out__val[36];
  assign PE_rc__cfg_in__msg[36] = PE_rc__cfg_out__msg[37];
  assign PE_rc__cfg_out__rdy[37] = PE_rc__cfg_in__rdy[36];
  assign PE_rc__cfg_in__val[36] = PE_rc__cfg_out__val[37];
  assign PE_rc__cfg_in__msg[37] = PE_rc__cfg_out__msg[38];
  assign PE_rc__cfg_out__rdy[38] = PE_rc__cfg_in__rdy[37];
  assign PE_rc__cfg_in__val[37] = PE_rc__cfg_out__val[38];
  assign PE_rc__cfg_in__msg[38] = PE_rc__cfg_out__msg[39];
  assign PE_rc__cfg_out__rdy[39] = PE_rc__cfg_in__rdy[38];
  assign PE_rc__cfg_in__val[38] = PE_rc__cfg_out__val[39];
  assign PE_rc__cfg_in__msg[39] = CE_e__cfg_out__msg[4];
  assign CE_e__cfg_out__rdy[4] = PE_rc__cfg_in__rdy[39];
  assign PE_rc__cfg_in__val[39] = CE_e__cfg_out__val[4];
  assign PE_rc__cfg_in__msg[40] = PE_rc__cfg_out__msg[41];
  assign PE_rc__cfg_out__rdy[41] = PE_rc__cfg_in__rdy[40];
  assign PE_rc__cfg_in__val[40] = PE_rc__cfg_out__val[41];
  assign PE_rc__cfg_in__msg[41] = PE_rc__cfg_out__msg[42];
  assign PE_rc__cfg_out__rdy[42] = PE_rc__cfg_in__rdy[41];
  assign PE_rc__cfg_in__val[41] = PE_rc__cfg_out__val[42];
  assign PE_rc__cfg_in__msg[42] = PE_rc__cfg_out__msg[43];
  assign PE_rc__cfg_out__rdy[43] = PE_rc__cfg_in__rdy[42];
  assign PE_rc__cfg_in__val[42] = PE_rc__cfg_out__val[43];
  assign PE_rc__cfg_in__msg[43] = PE_rc__cfg_out__msg[44];
  assign PE_rc__cfg_out__rdy[44] = PE_rc__cfg_in__rdy[43];
  assign PE_rc__cfg_in__val[43] = PE_rc__cfg_out__val[44];
  assign PE_rc__cfg_in__msg[44] = PE_rc__cfg_out__msg[45];
  assign PE_rc__cfg_out__rdy[45] = PE_rc__cfg_in__rdy[44];
  assign PE_rc__cfg_in__val[44] = PE_rc__cfg_out__val[45];
  assign PE_rc__cfg_in__msg[45] = PE_rc__cfg_out__msg[46];
  assign PE_rc__cfg_out__rdy[46] = PE_rc__cfg_in__rdy[45];
  assign PE_rc__cfg_in__val[45] = PE_rc__cfg_out__val[46];
  assign PE_rc__cfg_in__msg[46] = PE_rc__cfg_out__msg[47];
  assign PE_rc__cfg_out__rdy[47] = PE_rc__cfg_in__rdy[46];
  assign PE_rc__cfg_in__val[46] = PE_rc__cfg_out__val[47];
  assign PE_rc__cfg_in__msg[47] = CE_e__cfg_out__msg[5];
  assign CE_e__cfg_out__rdy[5] = PE_rc__cfg_in__rdy[47];
  assign PE_rc__cfg_in__val[47] = CE_e__cfg_out__val[5];
  assign PE_rc__cfg_in__msg[48] = PE_rc__cfg_out__msg[49];
  assign PE_rc__cfg_out__rdy[49] = PE_rc__cfg_in__rdy[48];
  assign PE_rc__cfg_in__val[48] = PE_rc__cfg_out__val[49];
  assign PE_rc__cfg_in__msg[49] = PE_rc__cfg_out__msg[50];
  assign PE_rc__cfg_out__rdy[50] = PE_rc__cfg_in__rdy[49];
  assign PE_rc__cfg_in__val[49] = PE_rc__cfg_out__val[50];
  assign PE_rc__cfg_in__msg[50] = PE_rc__cfg_out__msg[51];
  assign PE_rc__cfg_out__rdy[51] = PE_rc__cfg_in__rdy[50];
  assign PE_rc__cfg_in__val[50] = PE_rc__cfg_out__val[51];
  assign PE_rc__cfg_in__msg[51] = PE_rc__cfg_out__msg[52];
  assign PE_rc__cfg_out__rdy[52] = PE_rc__cfg_in__rdy[51];
  assign PE_rc__cfg_in__val[51] = PE_rc__cfg_out__val[52];
  assign PE_rc__cfg_in__msg[52] = PE_rc__cfg_out__msg[53];
  assign PE_rc__cfg_out__rdy[53] = PE_rc__cfg_in__rdy[52];
  assign PE_rc__cfg_in__val[52] = PE_rc__cfg_out__val[53];
  assign PE_rc__cfg_in__msg[53] = PE_rc__cfg_out__msg[54];
  assign PE_rc__cfg_out__rdy[54] = PE_rc__cfg_in__rdy[53];
  assign PE_rc__cfg_in__val[53] = PE_rc__cfg_out__val[54];
  assign PE_rc__cfg_in__msg[54] = PE_rc__cfg_out__msg[55];
  assign PE_rc__cfg_out__rdy[55] = PE_rc__cfg_in__rdy[54];
  assign PE_rc__cfg_in__val[54] = PE_rc__cfg_out__val[55];
  assign PE_rc__cfg_in__msg[55] = CE_e__cfg_out__msg[6];
  assign CE_e__cfg_out__rdy[6] = PE_rc__cfg_in__rdy[55];
  assign PE_rc__cfg_in__val[55] = CE_e__cfg_out__val[6];
  assign PE_rc__cfg_in__msg[56] = PE_rc__cfg_out__msg[57];
  assign PE_rc__cfg_out__rdy[57] = PE_rc__cfg_in__rdy[56];
  assign PE_rc__cfg_in__val[56] = PE_rc__cfg_out__val[57];
  assign PE_rc__cfg_in__msg[57] = PE_rc__cfg_out__msg[58];
  assign PE_rc__cfg_out__rdy[58] = PE_rc__cfg_in__rdy[57];
  assign PE_rc__cfg_in__val[57] = PE_rc__cfg_out__val[58];
  assign PE_rc__cfg_in__msg[58] = PE_rc__cfg_out__msg[59];
  assign PE_rc__cfg_out__rdy[59] = PE_rc__cfg_in__rdy[58];
  assign PE_rc__cfg_in__val[58] = PE_rc__cfg_out__val[59];
  assign PE_rc__cfg_in__msg[59] = PE_rc__cfg_out__msg[60];
  assign PE_rc__cfg_out__rdy[60] = PE_rc__cfg_in__rdy[59];
  assign PE_rc__cfg_in__val[59] = PE_rc__cfg_out__val[60];
  assign PE_rc__cfg_in__msg[60] = PE_rc__cfg_out__msg[61];
  assign PE_rc__cfg_out__rdy[61] = PE_rc__cfg_in__rdy[60];
  assign PE_rc__cfg_in__val[60] = PE_rc__cfg_out__val[61];
  assign PE_rc__cfg_in__msg[61] = PE_rc__cfg_out__msg[62];
  assign PE_rc__cfg_out__rdy[62] = PE_rc__cfg_in__rdy[61];
  assign PE_rc__cfg_in__val[61] = PE_rc__cfg_out__val[62];
  assign PE_rc__cfg_in__msg[62] = PE_rc__cfg_out__msg[63];
  assign PE_rc__cfg_out__rdy[63] = PE_rc__cfg_in__rdy[62];
  assign PE_rc__cfg_in__val[62] = PE_rc__cfg_out__val[63];
  assign PE_rc__cfg_in__msg[63] = CE_e__cfg_out__msg[7];
  assign CE_e__cfg_out__rdy[7] = PE_rc__cfg_in__rdy[63];
  assign PE_rc__cfg_in__val[63] = CE_e__cfg_out__val[7];
  assign mem_muxes__in___req__en[0][0] = ME__mem_ifc__req__en[0];
  assign mem_muxes__in___req__msg[0][0] = ME__mem_ifc__req__msg[0];
  assign ME__mem_ifc__req__rdy[0] = mem_muxes__in___req__rdy[0][0];
  assign ME__mem_ifc__resp__en[0] = mem_muxes__in___resp__en[0][0];
  assign ME__mem_ifc__resp__msg[0] = mem_muxes__in___resp__msg[0][0];
  assign mem_muxes__in___resp__rdy[0][0] = ME__mem_ifc__resp__rdy[0];
  assign mem_muxes__in___req__en[0][1] = CE_s__mem_master__req__en;
  assign mem_muxes__in___req__msg[0][1] = CE_s__mem_master__req__msg;
  assign CE_s__mem_master__req__rdy = mem_muxes__in___req__rdy[0][1];
  assign CE_s__mem_master__resp__en = mem_muxes__in___resp__en[0][1];
  assign CE_s__mem_master__resp__msg = mem_muxes__in___resp__msg[0][1];
  assign mem_muxes__in___resp__rdy[0][1] = CE_s__mem_master__resp__rdy;
  assign mem_muxes__sel[0] = is_cfg;
  assign spad_masters__req__en[0] = mem_muxes__out__req__en[0];
  assign spad_masters__req__msg[0] = mem_muxes__out__req__msg[0];
  assign mem_muxes__out__req__rdy[0] = spad_masters__req__rdy[0];
  assign mem_muxes__out__resp__en[0] = spad_masters__resp__en[0];
  assign mem_muxes__out__resp__msg[0] = spad_masters__resp__msg[0];
  assign spad_masters__resp__rdy[0] = mem_muxes__out__resp__rdy[0];
  assign mem_muxes__in___req__en[1][0] = ME__mem_ifc__req__en[1];
  assign mem_muxes__in___req__msg[1][0] = ME__mem_ifc__req__msg[1];
  assign ME__mem_ifc__req__rdy[1] = mem_muxes__in___req__rdy[1][0];
  assign ME__mem_ifc__resp__en[1] = mem_muxes__in___resp__en[1][0];
  assign ME__mem_ifc__resp__msg[1] = mem_muxes__in___resp__msg[1][0];
  assign mem_muxes__in___resp__rdy[1][0] = ME__mem_ifc__resp__rdy[1];
  assign mem_muxes__in___req__en[1][1] = CE_e__mem_master__req__en[0];
  assign mem_muxes__in___req__msg[1][1] = CE_e__mem_master__req__msg[0];
  assign CE_e__mem_master__req__rdy[0] = mem_muxes__in___req__rdy[1][1];
  assign CE_e__mem_master__resp__en[0] = mem_muxes__in___resp__en[1][1];
  assign CE_e__mem_master__resp__msg[0] = mem_muxes__in___resp__msg[1][1];
  assign mem_muxes__in___resp__rdy[1][1] = CE_e__mem_master__resp__rdy[0];
  assign mem_muxes__sel[1] = is_cfg;
  assign spad_masters__req__en[1] = mem_muxes__out__req__en[1];
  assign spad_masters__req__msg[1] = mem_muxes__out__req__msg[1];
  assign mem_muxes__out__req__rdy[1] = spad_masters__req__rdy[1];
  assign mem_muxes__out__resp__en[1] = spad_masters__resp__en[1];
  assign mem_muxes__out__resp__msg[1] = spad_masters__resp__msg[1];
  assign spad_masters__resp__rdy[1] = mem_muxes__out__resp__rdy[1];
  assign mem_muxes__in___req__en[2][0] = ME__mem_ifc__req__en[2];
  assign mem_muxes__in___req__msg[2][0] = ME__mem_ifc__req__msg[2];
  assign ME__mem_ifc__req__rdy[2] = mem_muxes__in___req__rdy[2][0];
  assign ME__mem_ifc__resp__en[2] = mem_muxes__in___resp__en[2][0];
  assign ME__mem_ifc__resp__msg[2] = mem_muxes__in___resp__msg[2][0];
  assign mem_muxes__in___resp__rdy[2][0] = ME__mem_ifc__resp__rdy[2];
  assign mem_muxes__in___req__en[2][1] = CE_e__mem_master__req__en[1];
  assign mem_muxes__in___req__msg[2][1] = CE_e__mem_master__req__msg[1];
  assign CE_e__mem_master__req__rdy[1] = mem_muxes__in___req__rdy[2][1];
  assign CE_e__mem_master__resp__en[1] = mem_muxes__in___resp__en[2][1];
  assign CE_e__mem_master__resp__msg[1] = mem_muxes__in___resp__msg[2][1];
  assign mem_muxes__in___resp__rdy[2][1] = CE_e__mem_master__resp__rdy[1];
  assign mem_muxes__sel[2] = is_cfg;
  assign spad_masters__req__en[2] = mem_muxes__out__req__en[2];
  assign spad_masters__req__msg[2] = mem_muxes__out__req__msg[2];
  assign mem_muxes__out__req__rdy[2] = spad_masters__req__rdy[2];
  assign mem_muxes__out__resp__en[2] = spad_masters__resp__en[2];
  assign mem_muxes__out__resp__msg[2] = spad_masters__resp__msg[2];
  assign spad_masters__resp__rdy[2] = mem_muxes__out__resp__rdy[2];
  assign mem_muxes__in___req__en[3][0] = ME__mem_ifc__req__en[3];
  assign mem_muxes__in___req__msg[3][0] = ME__mem_ifc__req__msg[3];
  assign ME__mem_ifc__req__rdy[3] = mem_muxes__in___req__rdy[3][0];
  assign ME__mem_ifc__resp__en[3] = mem_muxes__in___resp__en[3][0];
  assign ME__mem_ifc__resp__msg[3] = mem_muxes__in___resp__msg[3][0];
  assign mem_muxes__in___resp__rdy[3][0] = ME__mem_ifc__resp__rdy[3];
  assign mem_muxes__in___req__en[3][1] = CE_e__mem_master__req__en[2];
  assign mem_muxes__in___req__msg[3][1] = CE_e__mem_master__req__msg[2];
  assign CE_e__mem_master__req__rdy[2] = mem_muxes__in___req__rdy[3][1];
  assign CE_e__mem_master__resp__en[2] = mem_muxes__in___resp__en[3][1];
  assign CE_e__mem_master__resp__msg[2] = mem_muxes__in___resp__msg[3][1];
  assign mem_muxes__in___resp__rdy[3][1] = CE_e__mem_master__resp__rdy[2];
  assign mem_muxes__sel[3] = is_cfg;
  assign spad_masters__req__en[3] = mem_muxes__out__req__en[3];
  assign spad_masters__req__msg[3] = mem_muxes__out__req__msg[3];
  assign mem_muxes__out__req__rdy[3] = spad_masters__req__rdy[3];
  assign mem_muxes__out__resp__en[3] = spad_masters__resp__en[3];
  assign mem_muxes__out__resp__msg[3] = spad_masters__resp__msg[3];
  assign spad_masters__resp__rdy[3] = mem_muxes__out__resp__rdy[3];
  assign mem_muxes__in___req__en[4][0] = ME__mem_ifc__req__en[4];
  assign mem_muxes__in___req__msg[4][0] = ME__mem_ifc__req__msg[4];
  assign ME__mem_ifc__req__rdy[4] = mem_muxes__in___req__rdy[4][0];
  assign ME__mem_ifc__resp__en[4] = mem_muxes__in___resp__en[4][0];
  assign ME__mem_ifc__resp__msg[4] = mem_muxes__in___resp__msg[4][0];
  assign mem_muxes__in___resp__rdy[4][0] = ME__mem_ifc__resp__rdy[4];
  assign mem_muxes__in___req__en[4][1] = CE_e__mem_master__req__en[3];
  assign mem_muxes__in___req__msg[4][1] = CE_e__mem_master__req__msg[3];
  assign CE_e__mem_master__req__rdy[3] = mem_muxes__in___req__rdy[4][1];
  assign CE_e__mem_master__resp__en[3] = mem_muxes__in___resp__en[4][1];
  assign CE_e__mem_master__resp__msg[3] = mem_muxes__in___resp__msg[4][1];
  assign mem_muxes__in___resp__rdy[4][1] = CE_e__mem_master__resp__rdy[3];
  assign mem_muxes__sel[4] = is_cfg;
  assign spad_masters__req__en[4] = mem_muxes__out__req__en[4];
  assign spad_masters__req__msg[4] = mem_muxes__out__req__msg[4];
  assign mem_muxes__out__req__rdy[4] = spad_masters__req__rdy[4];
  assign mem_muxes__out__resp__en[4] = spad_masters__resp__en[4];
  assign mem_muxes__out__resp__msg[4] = spad_masters__resp__msg[4];
  assign spad_masters__resp__rdy[4] = mem_muxes__out__resp__rdy[4];
  assign mem_muxes__in___req__en[5][0] = ME__mem_ifc__req__en[5];
  assign mem_muxes__in___req__msg[5][0] = ME__mem_ifc__req__msg[5];
  assign ME__mem_ifc__req__rdy[5] = mem_muxes__in___req__rdy[5][0];
  assign ME__mem_ifc__resp__en[5] = mem_muxes__in___resp__en[5][0];
  assign ME__mem_ifc__resp__msg[5] = mem_muxes__in___resp__msg[5][0];
  assign mem_muxes__in___resp__rdy[5][0] = ME__mem_ifc__resp__rdy[5];
  assign mem_muxes__in___req__en[5][1] = CE_e__mem_master__req__en[4];
  assign mem_muxes__in___req__msg[5][1] = CE_e__mem_master__req__msg[4];
  assign CE_e__mem_master__req__rdy[4] = mem_muxes__in___req__rdy[5][1];
  assign CE_e__mem_master__resp__en[4] = mem_muxes__in___resp__en[5][1];
  assign CE_e__mem_master__resp__msg[4] = mem_muxes__in___resp__msg[5][1];
  assign mem_muxes__in___resp__rdy[5][1] = CE_e__mem_master__resp__rdy[4];
  assign mem_muxes__sel[5] = is_cfg;
  assign spad_masters__req__en[5] = mem_muxes__out__req__en[5];
  assign spad_masters__req__msg[5] = mem_muxes__out__req__msg[5];
  assign mem_muxes__out__req__rdy[5] = spad_masters__req__rdy[5];
  assign mem_muxes__out__resp__en[5] = spad_masters__resp__en[5];
  assign mem_muxes__out__resp__msg[5] = spad_masters__resp__msg[5];
  assign spad_masters__resp__rdy[5] = mem_muxes__out__resp__rdy[5];
  assign mem_muxes__in___req__en[6][0] = ME__mem_ifc__req__en[6];
  assign mem_muxes__in___req__msg[6][0] = ME__mem_ifc__req__msg[6];
  assign ME__mem_ifc__req__rdy[6] = mem_muxes__in___req__rdy[6][0];
  assign ME__mem_ifc__resp__en[6] = mem_muxes__in___resp__en[6][0];
  assign ME__mem_ifc__resp__msg[6] = mem_muxes__in___resp__msg[6][0];
  assign mem_muxes__in___resp__rdy[6][0] = ME__mem_ifc__resp__rdy[6];
  assign mem_muxes__in___req__en[6][1] = CE_e__mem_master__req__en[5];
  assign mem_muxes__in___req__msg[6][1] = CE_e__mem_master__req__msg[5];
  assign CE_e__mem_master__req__rdy[5] = mem_muxes__in___req__rdy[6][1];
  assign CE_e__mem_master__resp__en[5] = mem_muxes__in___resp__en[6][1];
  assign CE_e__mem_master__resp__msg[5] = mem_muxes__in___resp__msg[6][1];
  assign mem_muxes__in___resp__rdy[6][1] = CE_e__mem_master__resp__rdy[5];
  assign mem_muxes__sel[6] = is_cfg;
  assign spad_masters__req__en[6] = mem_muxes__out__req__en[6];
  assign spad_masters__req__msg[6] = mem_muxes__out__req__msg[6];
  assign mem_muxes__out__req__rdy[6] = spad_masters__req__rdy[6];
  assign mem_muxes__out__resp__en[6] = spad_masters__resp__en[6];
  assign mem_muxes__out__resp__msg[6] = spad_masters__resp__msg[6];
  assign spad_masters__resp__rdy[6] = mem_muxes__out__resp__rdy[6];
  assign mem_muxes__in___req__en[7][0] = ME__mem_ifc__req__en[7];
  assign mem_muxes__in___req__msg[7][0] = ME__mem_ifc__req__msg[7];
  assign ME__mem_ifc__req__rdy[7] = mem_muxes__in___req__rdy[7][0];
  assign ME__mem_ifc__resp__en[7] = mem_muxes__in___resp__en[7][0];
  assign ME__mem_ifc__resp__msg[7] = mem_muxes__in___resp__msg[7][0];
  assign mem_muxes__in___resp__rdy[7][0] = ME__mem_ifc__resp__rdy[7];
  assign mem_muxes__in___req__en[7][1] = CE_e__mem_master__req__en[6];
  assign mem_muxes__in___req__msg[7][1] = CE_e__mem_master__req__msg[6];
  assign CE_e__mem_master__req__rdy[6] = mem_muxes__in___req__rdy[7][1];
  assign CE_e__mem_master__resp__en[6] = mem_muxes__in___resp__en[7][1];
  assign CE_e__mem_master__resp__msg[6] = mem_muxes__in___resp__msg[7][1];
  assign mem_muxes__in___resp__rdy[7][1] = CE_e__mem_master__resp__rdy[6];
  assign mem_muxes__sel[7] = is_cfg;
  assign spad_masters__req__en[7] = mem_muxes__out__req__en[7];
  assign spad_masters__req__msg[7] = mem_muxes__out__req__msg[7];
  assign mem_muxes__out__req__rdy[7] = spad_masters__req__rdy[7];
  assign mem_muxes__out__resp__en[7] = spad_masters__resp__en[7];
  assign mem_muxes__out__resp__msg[7] = spad_masters__resp__msg[7];
  assign spad_masters__resp__rdy[7] = mem_muxes__out__resp__rdy[7];
  assign mem_muxes__in___req__en[8][0] = ME__mem_ifc__req__en[8];
  assign mem_muxes__in___req__msg[8][0] = ME__mem_ifc__req__msg[8];
  assign ME__mem_ifc__req__rdy[8] = mem_muxes__in___req__rdy[8][0];
  assign ME__mem_ifc__resp__en[8] = mem_muxes__in___resp__en[8][0];
  assign ME__mem_ifc__resp__msg[8] = mem_muxes__in___resp__msg[8][0];
  assign mem_muxes__in___resp__rdy[8][0] = ME__mem_ifc__resp__rdy[8];
  assign mem_muxes__in___req__en[8][1] = CE_e__mem_master__req__en[7];
  assign mem_muxes__in___req__msg[8][1] = CE_e__mem_master__req__msg[7];
  assign CE_e__mem_master__req__rdy[7] = mem_muxes__in___req__rdy[8][1];
  assign CE_e__mem_master__resp__en[7] = mem_muxes__in___resp__en[8][1];
  assign CE_e__mem_master__resp__msg[7] = mem_muxes__in___resp__msg[8][1];
  assign mem_muxes__in___resp__rdy[8][1] = CE_e__mem_master__resp__rdy[7];
  assign mem_muxes__sel[8] = is_cfg;
  assign spad_masters__req__en[8] = mem_muxes__out__req__en[8];
  assign spad_masters__req__msg[8] = mem_muxes__out__req__msg[8];
  assign mem_muxes__out__req__rdy[8] = spad_masters__req__rdy[8];
  assign mem_muxes__out__resp__en[8] = spad_masters__resp__en[8];
  assign mem_muxes__out__resp__msg[8] = spad_masters__resp__msg[8];
  assign spad_masters__resp__rdy[8] = mem_muxes__out__resp__rdy[8];
  assign spad_masters__req__en[9] = ME__mem_ifc__req__en[9];
  assign spad_masters__req__msg[9] = ME__mem_ifc__req__msg[9];
  assign ME__mem_ifc__req__rdy[9] = spad_masters__req__rdy[9];
  assign ME__mem_ifc__resp__en[9] = spad_masters__resp__en[9];
  assign ME__mem_ifc__resp__msg[9] = spad_masters__resp__msg[9];
  assign spad_masters__resp__rdy[9] = ME__mem_ifc__resp__rdy[9];
  assign spad_masters__req__en[10] = ME__mem_ifc__req__en[10];
  assign spad_masters__req__msg[10] = ME__mem_ifc__req__msg[10];
  assign ME__mem_ifc__req__rdy[10] = spad_masters__req__rdy[10];
  assign ME__mem_ifc__resp__en[10] = spad_masters__resp__en[10];
  assign ME__mem_ifc__resp__msg[10] = spad_masters__resp__msg[10];
  assign spad_masters__resp__rdy[10] = ME__mem_ifc__resp__rdy[10];
  assign spad_masters__req__en[11] = ME__mem_ifc__req__en[11];
  assign spad_masters__req__msg[11] = ME__mem_ifc__req__msg[11];
  assign ME__mem_ifc__req__rdy[11] = spad_masters__req__rdy[11];
  assign ME__mem_ifc__resp__en[11] = spad_masters__resp__en[11];
  assign ME__mem_ifc__resp__msg[11] = spad_masters__resp__msg[11];
  assign spad_masters__resp__rdy[11] = ME__mem_ifc__resp__rdy[11];
  assign spad_masters__req__en[12] = ME__mem_ifc__req__en[12];
  assign spad_masters__req__msg[12] = ME__mem_ifc__req__msg[12];
  assign ME__mem_ifc__req__rdy[12] = spad_masters__req__rdy[12];
  assign ME__mem_ifc__resp__en[12] = spad_masters__resp__en[12];
  assign ME__mem_ifc__resp__msg[12] = spad_masters__resp__msg[12];
  assign spad_masters__resp__rdy[12] = ME__mem_ifc__resp__rdy[12];
  assign spad_masters__req__en[13] = ME__mem_ifc__req__en[13];
  assign spad_masters__req__msg[13] = ME__mem_ifc__req__msg[13];
  assign ME__mem_ifc__req__rdy[13] = spad_masters__req__rdy[13];
  assign ME__mem_ifc__resp__en[13] = spad_masters__resp__en[13];
  assign ME__mem_ifc__resp__msg[13] = spad_masters__resp__msg[13];
  assign spad_masters__resp__rdy[13] = ME__mem_ifc__resp__rdy[13];
  assign spad_masters__req__en[14] = ME__mem_ifc__req__en[14];
  assign spad_masters__req__msg[14] = ME__mem_ifc__req__msg[14];
  assign ME__mem_ifc__req__rdy[14] = spad_masters__req__rdy[14];
  assign ME__mem_ifc__resp__en[14] = spad_masters__resp__en[14];
  assign ME__mem_ifc__resp__msg[14] = spad_masters__resp__msg[14];
  assign spad_masters__resp__rdy[14] = ME__mem_ifc__resp__rdy[14];
  assign spad_masters__req__en[15] = ME__mem_ifc__req__en[15];
  assign spad_masters__req__msg[15] = ME__mem_ifc__req__msg[15];
  assign ME__mem_ifc__req__rdy[15] = spad_masters__req__rdy[15];
  assign ME__mem_ifc__resp__en[15] = spad_masters__resp__en[15];
  assign ME__mem_ifc__resp__msg[15] = spad_masters__resp__msg[15];
  assign spad_masters__resp__rdy[15] = ME__mem_ifc__resp__rdy[15];
  assign PE_rc__is_calc[0] = is_calc;
  assign PE_rc__y_cord[0] = 4'd1;
  assign PE_rc__x_cord[0] = 4'd1;
  assign PE_rc__in___msg[0][0] = PE_rc__out__msg[8][1];
  assign PE_rc__out__rdy[8][1] = PE_rc__in___rdy[0][0];
  assign PE_rc__in___val[0][0] = PE_rc__out__val[8][1];
  assign PE_rc__in___msg[8][1] = PE_rc__out__msg[0][0];
  assign PE_rc__out__rdy[0][0] = PE_rc__in___rdy[8][1];
  assign PE_rc__in___val[8][1] = PE_rc__out__val[0][0];
  assign PE_rc__in___msg[0][1] = ME__out__msg[0];
  assign ME__out__rdy[0] = PE_rc__in___rdy[0][1];
  assign PE_rc__in___val[0][1] = ME__out__val[0];
  assign ME__in___msg[0] = PE_rc__out__msg[0][1];
  assign PE_rc__out__rdy[0][1] = ME__in___rdy[0];
  assign ME__in___val[0] = PE_rc__out__val[0][1];
  assign PE_rc__in___msg[0][3] = PE_rc__out__msg[1][2];
  assign PE_rc__out__rdy[1][2] = PE_rc__in___rdy[0][3];
  assign PE_rc__in___val[0][3] = PE_rc__out__val[1][2];
  assign PE_rc__in___msg[1][2] = PE_rc__out__msg[0][3];
  assign PE_rc__out__rdy[0][3] = PE_rc__in___rdy[1][2];
  assign PE_rc__in___val[1][2] = PE_rc__out__val[0][3];
  assign PE_rc__in___msg[0][2] = ME__out__msg[8];
  assign ME__out__rdy[8] = PE_rc__in___rdy[0][2];
  assign PE_rc__in___val[0][2] = ME__out__val[8];
  assign ME__in___msg[8] = PE_rc__out__msg[0][2];
  assign PE_rc__out__rdy[0][2] = ME__in___rdy[8];
  assign ME__in___val[8] = PE_rc__out__val[0][2];
  assign PE_rc__is_calc[1] = is_calc;
  assign PE_rc__y_cord[1] = 4'd1;
  assign PE_rc__x_cord[1] = 4'd2;
  assign PE_rc__in___msg[1][0] = PE_rc__out__msg[9][1];
  assign PE_rc__out__rdy[9][1] = PE_rc__in___rdy[1][0];
  assign PE_rc__in___val[1][0] = PE_rc__out__val[9][1];
  assign PE_rc__in___msg[9][1] = PE_rc__out__msg[1][0];
  assign PE_rc__out__rdy[1][0] = PE_rc__in___rdy[9][1];
  assign PE_rc__in___val[9][1] = PE_rc__out__val[1][0];
  assign PE_rc__in___msg[1][1] = ME__out__msg[1];
  assign ME__out__rdy[1] = PE_rc__in___rdy[1][1];
  assign PE_rc__in___val[1][1] = ME__out__val[1];
  assign ME__in___msg[1] = PE_rc__out__msg[1][1];
  assign PE_rc__out__rdy[1][1] = ME__in___rdy[1];
  assign ME__in___val[1] = PE_rc__out__val[1][1];
  assign PE_rc__in___msg[1][3] = PE_rc__out__msg[2][2];
  assign PE_rc__out__rdy[2][2] = PE_rc__in___rdy[1][3];
  assign PE_rc__in___val[1][3] = PE_rc__out__val[2][2];
  assign PE_rc__in___msg[2][2] = PE_rc__out__msg[1][3];
  assign PE_rc__out__rdy[1][3] = PE_rc__in___rdy[2][2];
  assign PE_rc__in___val[2][2] = PE_rc__out__val[1][3];
  assign PE_rc__is_calc[2] = is_calc;
  assign PE_rc__y_cord[2] = 4'd1;
  assign PE_rc__x_cord[2] = 4'd3;
  assign PE_rc__in___msg[2][0] = PE_rc__out__msg[10][1];
  assign PE_rc__out__rdy[10][1] = PE_rc__in___rdy[2][0];
  assign PE_rc__in___val[2][0] = PE_rc__out__val[10][1];
  assign PE_rc__in___msg[10][1] = PE_rc__out__msg[2][0];
  assign PE_rc__out__rdy[2][0] = PE_rc__in___rdy[10][1];
  assign PE_rc__in___val[10][1] = PE_rc__out__val[2][0];
  assign PE_rc__in___msg[2][1] = ME__out__msg[2];
  assign ME__out__rdy[2] = PE_rc__in___rdy[2][1];
  assign PE_rc__in___val[2][1] = ME__out__val[2];
  assign ME__in___msg[2] = PE_rc__out__msg[2][1];
  assign PE_rc__out__rdy[2][1] = ME__in___rdy[2];
  assign ME__in___val[2] = PE_rc__out__val[2][1];
  assign PE_rc__in___msg[2][3] = PE_rc__out__msg[3][2];
  assign PE_rc__out__rdy[3][2] = PE_rc__in___rdy[2][3];
  assign PE_rc__in___val[2][3] = PE_rc__out__val[3][2];
  assign PE_rc__in___msg[3][2] = PE_rc__out__msg[2][3];
  assign PE_rc__out__rdy[2][3] = PE_rc__in___rdy[3][2];
  assign PE_rc__in___val[3][2] = PE_rc__out__val[2][3];
  assign PE_rc__is_calc[3] = is_calc;
  assign PE_rc__y_cord[3] = 4'd1;
  assign PE_rc__x_cord[3] = 4'd4;
  assign PE_rc__in___msg[3][0] = PE_rc__out__msg[11][1];
  assign PE_rc__out__rdy[11][1] = PE_rc__in___rdy[3][0];
  assign PE_rc__in___val[3][0] = PE_rc__out__val[11][1];
  assign PE_rc__in___msg[11][1] = PE_rc__out__msg[3][0];
  assign PE_rc__out__rdy[3][0] = PE_rc__in___rdy[11][1];
  assign PE_rc__in___val[11][1] = PE_rc__out__val[3][0];
  assign PE_rc__in___msg[3][1] = ME__out__msg[3];
  assign ME__out__rdy[3] = PE_rc__in___rdy[3][1];
  assign PE_rc__in___val[3][1] = ME__out__val[3];
  assign ME__in___msg[3] = PE_rc__out__msg[3][1];
  assign PE_rc__out__rdy[3][1] = ME__in___rdy[3];
  assign ME__in___val[3] = PE_rc__out__val[3][1];
  assign PE_rc__in___msg[3][3] = PE_rc__out__msg[4][2];
  assign PE_rc__out__rdy[4][2] = PE_rc__in___rdy[3][3];
  assign PE_rc__in___val[3][3] = PE_rc__out__val[4][2];
  assign PE_rc__in___msg[4][2] = PE_rc__out__msg[3][3];
  assign PE_rc__out__rdy[3][3] = PE_rc__in___rdy[4][2];
  assign PE_rc__in___val[4][2] = PE_rc__out__val[3][3];
  assign PE_rc__is_calc[4] = is_calc;
  assign PE_rc__y_cord[4] = 4'd1;
  assign PE_rc__x_cord[4] = 4'd5;
  assign PE_rc__in___msg[4][0] = PE_rc__out__msg[12][1];
  assign PE_rc__out__rdy[12][1] = PE_rc__in___rdy[4][0];
  assign PE_rc__in___val[4][0] = PE_rc__out__val[12][1];
  assign PE_rc__in___msg[12][1] = PE_rc__out__msg[4][0];
  assign PE_rc__out__rdy[4][0] = PE_rc__in___rdy[12][1];
  assign PE_rc__in___val[12][1] = PE_rc__out__val[4][0];
  assign PE_rc__in___msg[4][1] = ME__out__msg[4];
  assign ME__out__rdy[4] = PE_rc__in___rdy[4][1];
  assign PE_rc__in___val[4][1] = ME__out__val[4];
  assign ME__in___msg[4] = PE_rc__out__msg[4][1];
  assign PE_rc__out__rdy[4][1] = ME__in___rdy[4];
  assign ME__in___val[4] = PE_rc__out__val[4][1];
  assign PE_rc__in___msg[4][3] = PE_rc__out__msg[5][2];
  assign PE_rc__out__rdy[5][2] = PE_rc__in___rdy[4][3];
  assign PE_rc__in___val[4][3] = PE_rc__out__val[5][2];
  assign PE_rc__in___msg[5][2] = PE_rc__out__msg[4][3];
  assign PE_rc__out__rdy[4][3] = PE_rc__in___rdy[5][2];
  assign PE_rc__in___val[5][2] = PE_rc__out__val[4][3];
  assign PE_rc__is_calc[5] = is_calc;
  assign PE_rc__y_cord[5] = 4'd1;
  assign PE_rc__x_cord[5] = 4'd6;
  assign PE_rc__in___msg[5][0] = PE_rc__out__msg[13][1];
  assign PE_rc__out__rdy[13][1] = PE_rc__in___rdy[5][0];
  assign PE_rc__in___val[5][0] = PE_rc__out__val[13][1];
  assign PE_rc__in___msg[13][1] = PE_rc__out__msg[5][0];
  assign PE_rc__out__rdy[5][0] = PE_rc__in___rdy[13][1];
  assign PE_rc__in___val[13][1] = PE_rc__out__val[5][0];
  assign PE_rc__in___msg[5][1] = ME__out__msg[5];
  assign ME__out__rdy[5] = PE_rc__in___rdy[5][1];
  assign PE_rc__in___val[5][1] = ME__out__val[5];
  assign ME__in___msg[5] = PE_rc__out__msg[5][1];
  assign PE_rc__out__rdy[5][1] = ME__in___rdy[5];
  assign ME__in___val[5] = PE_rc__out__val[5][1];
  assign PE_rc__in___msg[5][3] = PE_rc__out__msg[6][2];
  assign PE_rc__out__rdy[6][2] = PE_rc__in___rdy[5][3];
  assign PE_rc__in___val[5][3] = PE_rc__out__val[6][2];
  assign PE_rc__in___msg[6][2] = PE_rc__out__msg[5][3];
  assign PE_rc__out__rdy[5][3] = PE_rc__in___rdy[6][2];
  assign PE_rc__in___val[6][2] = PE_rc__out__val[5][3];
  assign PE_rc__is_calc[6] = is_calc;
  assign PE_rc__y_cord[6] = 4'd1;
  assign PE_rc__x_cord[6] = 4'd7;
  assign PE_rc__in___msg[6][0] = PE_rc__out__msg[14][1];
  assign PE_rc__out__rdy[14][1] = PE_rc__in___rdy[6][0];
  assign PE_rc__in___val[6][0] = PE_rc__out__val[14][1];
  assign PE_rc__in___msg[14][1] = PE_rc__out__msg[6][0];
  assign PE_rc__out__rdy[6][0] = PE_rc__in___rdy[14][1];
  assign PE_rc__in___val[14][1] = PE_rc__out__val[6][0];
  assign PE_rc__in___msg[6][1] = ME__out__msg[6];
  assign ME__out__rdy[6] = PE_rc__in___rdy[6][1];
  assign PE_rc__in___val[6][1] = ME__out__val[6];
  assign ME__in___msg[6] = PE_rc__out__msg[6][1];
  assign PE_rc__out__rdy[6][1] = ME__in___rdy[6];
  assign ME__in___val[6] = PE_rc__out__val[6][1];
  assign PE_rc__in___msg[6][3] = PE_rc__out__msg[7][2];
  assign PE_rc__out__rdy[7][2] = PE_rc__in___rdy[6][3];
  assign PE_rc__in___val[6][3] = PE_rc__out__val[7][2];
  assign PE_rc__in___msg[7][2] = PE_rc__out__msg[6][3];
  assign PE_rc__out__rdy[6][3] = PE_rc__in___rdy[7][2];
  assign PE_rc__in___val[7][2] = PE_rc__out__val[6][3];
  assign PE_rc__is_calc[7] = is_calc;
  assign PE_rc__y_cord[7] = 4'd1;
  assign PE_rc__x_cord[7] = 4'd8;
  assign PE_rc__in___msg[7][0] = PE_rc__out__msg[15][1];
  assign PE_rc__out__rdy[15][1] = PE_rc__in___rdy[7][0];
  assign PE_rc__in___val[7][0] = PE_rc__out__val[15][1];
  assign PE_rc__in___msg[15][1] = PE_rc__out__msg[7][0];
  assign PE_rc__out__rdy[7][0] = PE_rc__in___rdy[15][1];
  assign PE_rc__in___val[15][1] = PE_rc__out__val[7][0];
  assign PE_rc__in___msg[7][1] = ME__out__msg[7];
  assign ME__out__rdy[7] = PE_rc__in___rdy[7][1];
  assign PE_rc__in___val[7][1] = ME__out__val[7];
  assign ME__in___msg[7] = PE_rc__out__msg[7][1];
  assign PE_rc__out__rdy[7][1] = ME__in___rdy[7];
  assign ME__in___val[7] = PE_rc__out__val[7][1];
  assign PE_rc__in___val[7][3] = 1'd0;
  assign PE_rc__in___msg[7][3] = 32'd0;
  assign PE_rc__out__rdy[7][3] = 1'd1;
  assign PE_rc__is_calc[8] = is_calc;
  assign PE_rc__y_cord[8] = 4'd2;
  assign PE_rc__x_cord[8] = 4'd1;
  assign PE_rc__in___msg[8][0] = PE_rc__out__msg[16][1];
  assign PE_rc__out__rdy[16][1] = PE_rc__in___rdy[8][0];
  assign PE_rc__in___val[8][0] = PE_rc__out__val[16][1];
  assign PE_rc__in___msg[16][1] = PE_rc__out__msg[8][0];
  assign PE_rc__out__rdy[8][0] = PE_rc__in___rdy[16][1];
  assign PE_rc__in___val[16][1] = PE_rc__out__val[8][0];
  assign PE_rc__in___msg[8][3] = PE_rc__out__msg[9][2];
  assign PE_rc__out__rdy[9][2] = PE_rc__in___rdy[8][3];
  assign PE_rc__in___val[8][3] = PE_rc__out__val[9][2];
  assign PE_rc__in___msg[9][2] = PE_rc__out__msg[8][3];
  assign PE_rc__out__rdy[8][3] = PE_rc__in___rdy[9][2];
  assign PE_rc__in___val[9][2] = PE_rc__out__val[8][3];
  assign PE_rc__in___msg[8][2] = ME__out__msg[9];
  assign ME__out__rdy[9] = PE_rc__in___rdy[8][2];
  assign PE_rc__in___val[8][2] = ME__out__val[9];
  assign ME__in___msg[9] = PE_rc__out__msg[8][2];
  assign PE_rc__out__rdy[8][2] = ME__in___rdy[9];
  assign ME__in___val[9] = PE_rc__out__val[8][2];
  assign PE_rc__is_calc[9] = is_calc;
  assign PE_rc__y_cord[9] = 4'd2;
  assign PE_rc__x_cord[9] = 4'd2;
  assign PE_rc__in___msg[9][0] = PE_rc__out__msg[17][1];
  assign PE_rc__out__rdy[17][1] = PE_rc__in___rdy[9][0];
  assign PE_rc__in___val[9][0] = PE_rc__out__val[17][1];
  assign PE_rc__in___msg[17][1] = PE_rc__out__msg[9][0];
  assign PE_rc__out__rdy[9][0] = PE_rc__in___rdy[17][1];
  assign PE_rc__in___val[17][1] = PE_rc__out__val[9][0];
  assign PE_rc__in___msg[9][3] = PE_rc__out__msg[10][2];
  assign PE_rc__out__rdy[10][2] = PE_rc__in___rdy[9][3];
  assign PE_rc__in___val[9][3] = PE_rc__out__val[10][2];
  assign PE_rc__in___msg[10][2] = PE_rc__out__msg[9][3];
  assign PE_rc__out__rdy[9][3] = PE_rc__in___rdy[10][2];
  assign PE_rc__in___val[10][2] = PE_rc__out__val[9][3];
  assign PE_rc__is_calc[10] = is_calc;
  assign PE_rc__y_cord[10] = 4'd2;
  assign PE_rc__x_cord[10] = 4'd3;
  assign PE_rc__in___msg[10][0] = PE_rc__out__msg[18][1];
  assign PE_rc__out__rdy[18][1] = PE_rc__in___rdy[10][0];
  assign PE_rc__in___val[10][0] = PE_rc__out__val[18][1];
  assign PE_rc__in___msg[18][1] = PE_rc__out__msg[10][0];
  assign PE_rc__out__rdy[10][0] = PE_rc__in___rdy[18][1];
  assign PE_rc__in___val[18][1] = PE_rc__out__val[10][0];
  assign PE_rc__in___msg[10][3] = PE_rc__out__msg[11][2];
  assign PE_rc__out__rdy[11][2] = PE_rc__in___rdy[10][3];
  assign PE_rc__in___val[10][3] = PE_rc__out__val[11][2];
  assign PE_rc__in___msg[11][2] = PE_rc__out__msg[10][3];
  assign PE_rc__out__rdy[10][3] = PE_rc__in___rdy[11][2];
  assign PE_rc__in___val[11][2] = PE_rc__out__val[10][3];
  assign PE_rc__is_calc[11] = is_calc;
  assign PE_rc__y_cord[11] = 4'd2;
  assign PE_rc__x_cord[11] = 4'd4;
  assign PE_rc__in___msg[11][0] = PE_rc__out__msg[19][1];
  assign PE_rc__out__rdy[19][1] = PE_rc__in___rdy[11][0];
  assign PE_rc__in___val[11][0] = PE_rc__out__val[19][1];
  assign PE_rc__in___msg[19][1] = PE_rc__out__msg[11][0];
  assign PE_rc__out__rdy[11][0] = PE_rc__in___rdy[19][1];
  assign PE_rc__in___val[19][1] = PE_rc__out__val[11][0];
  assign PE_rc__in___msg[11][3] = PE_rc__out__msg[12][2];
  assign PE_rc__out__rdy[12][2] = PE_rc__in___rdy[11][3];
  assign PE_rc__in___val[11][3] = PE_rc__out__val[12][2];
  assign PE_rc__in___msg[12][2] = PE_rc__out__msg[11][3];
  assign PE_rc__out__rdy[11][3] = PE_rc__in___rdy[12][2];
  assign PE_rc__in___val[12][2] = PE_rc__out__val[11][3];
  assign PE_rc__is_calc[12] = is_calc;
  assign PE_rc__y_cord[12] = 4'd2;
  assign PE_rc__x_cord[12] = 4'd5;
  assign PE_rc__in___msg[12][0] = PE_rc__out__msg[20][1];
  assign PE_rc__out__rdy[20][1] = PE_rc__in___rdy[12][0];
  assign PE_rc__in___val[12][0] = PE_rc__out__val[20][1];
  assign PE_rc__in___msg[20][1] = PE_rc__out__msg[12][0];
  assign PE_rc__out__rdy[12][0] = PE_rc__in___rdy[20][1];
  assign PE_rc__in___val[20][1] = PE_rc__out__val[12][0];
  assign PE_rc__in___msg[12][3] = PE_rc__out__msg[13][2];
  assign PE_rc__out__rdy[13][2] = PE_rc__in___rdy[12][3];
  assign PE_rc__in___val[12][3] = PE_rc__out__val[13][2];
  assign PE_rc__in___msg[13][2] = PE_rc__out__msg[12][3];
  assign PE_rc__out__rdy[12][3] = PE_rc__in___rdy[13][2];
  assign PE_rc__in___val[13][2] = PE_rc__out__val[12][3];
  assign PE_rc__is_calc[13] = is_calc;
  assign PE_rc__y_cord[13] = 4'd2;
  assign PE_rc__x_cord[13] = 4'd6;
  assign PE_rc__in___msg[13][0] = PE_rc__out__msg[21][1];
  assign PE_rc__out__rdy[21][1] = PE_rc__in___rdy[13][0];
  assign PE_rc__in___val[13][0] = PE_rc__out__val[21][1];
  assign PE_rc__in___msg[21][1] = PE_rc__out__msg[13][0];
  assign PE_rc__out__rdy[13][0] = PE_rc__in___rdy[21][1];
  assign PE_rc__in___val[21][1] = PE_rc__out__val[13][0];
  assign PE_rc__in___msg[13][3] = PE_rc__out__msg[14][2];
  assign PE_rc__out__rdy[14][2] = PE_rc__in___rdy[13][3];
  assign PE_rc__in___val[13][3] = PE_rc__out__val[14][2];
  assign PE_rc__in___msg[14][2] = PE_rc__out__msg[13][3];
  assign PE_rc__out__rdy[13][3] = PE_rc__in___rdy[14][2];
  assign PE_rc__in___val[14][2] = PE_rc__out__val[13][3];
  assign PE_rc__is_calc[14] = is_calc;
  assign PE_rc__y_cord[14] = 4'd2;
  assign PE_rc__x_cord[14] = 4'd7;
  assign PE_rc__in___msg[14][0] = PE_rc__out__msg[22][1];
  assign PE_rc__out__rdy[22][1] = PE_rc__in___rdy[14][0];
  assign PE_rc__in___val[14][0] = PE_rc__out__val[22][1];
  assign PE_rc__in___msg[22][1] = PE_rc__out__msg[14][0];
  assign PE_rc__out__rdy[14][0] = PE_rc__in___rdy[22][1];
  assign PE_rc__in___val[22][1] = PE_rc__out__val[14][0];
  assign PE_rc__in___msg[14][3] = PE_rc__out__msg[15][2];
  assign PE_rc__out__rdy[15][2] = PE_rc__in___rdy[14][3];
  assign PE_rc__in___val[14][3] = PE_rc__out__val[15][2];
  assign PE_rc__in___msg[15][2] = PE_rc__out__msg[14][3];
  assign PE_rc__out__rdy[14][3] = PE_rc__in___rdy[15][2];
  assign PE_rc__in___val[15][2] = PE_rc__out__val[14][3];
  assign PE_rc__is_calc[15] = is_calc;
  assign PE_rc__y_cord[15] = 4'd2;
  assign PE_rc__x_cord[15] = 4'd8;
  assign PE_rc__in___msg[15][0] = PE_rc__out__msg[23][1];
  assign PE_rc__out__rdy[23][1] = PE_rc__in___rdy[15][0];
  assign PE_rc__in___val[15][0] = PE_rc__out__val[23][1];
  assign PE_rc__in___msg[23][1] = PE_rc__out__msg[15][0];
  assign PE_rc__out__rdy[15][0] = PE_rc__in___rdy[23][1];
  assign PE_rc__in___val[23][1] = PE_rc__out__val[15][0];
  assign PE_rc__in___val[15][3] = 1'd0;
  assign PE_rc__in___msg[15][3] = 32'd0;
  assign PE_rc__out__rdy[15][3] = 1'd1;
  assign PE_rc__is_calc[16] = is_calc;
  assign PE_rc__y_cord[16] = 4'd3;
  assign PE_rc__x_cord[16] = 4'd1;
  assign PE_rc__in___msg[16][0] = PE_rc__out__msg[24][1];
  assign PE_rc__out__rdy[24][1] = PE_rc__in___rdy[16][0];
  assign PE_rc__in___val[16][0] = PE_rc__out__val[24][1];
  assign PE_rc__in___msg[24][1] = PE_rc__out__msg[16][0];
  assign PE_rc__out__rdy[16][0] = PE_rc__in___rdy[24][1];
  assign PE_rc__in___val[24][1] = PE_rc__out__val[16][0];
  assign PE_rc__in___msg[16][3] = PE_rc__out__msg[17][2];
  assign PE_rc__out__rdy[17][2] = PE_rc__in___rdy[16][3];
  assign PE_rc__in___val[16][3] = PE_rc__out__val[17][2];
  assign PE_rc__in___msg[17][2] = PE_rc__out__msg[16][3];
  assign PE_rc__out__rdy[16][3] = PE_rc__in___rdy[17][2];
  assign PE_rc__in___val[17][2] = PE_rc__out__val[16][3];
  assign PE_rc__in___msg[16][2] = ME__out__msg[10];
  assign ME__out__rdy[10] = PE_rc__in___rdy[16][2];
  assign PE_rc__in___val[16][2] = ME__out__val[10];
  assign ME__in___msg[10] = PE_rc__out__msg[16][2];
  assign PE_rc__out__rdy[16][2] = ME__in___rdy[10];
  assign ME__in___val[10] = PE_rc__out__val[16][2];
  assign PE_rc__is_calc[17] = is_calc;
  assign PE_rc__y_cord[17] = 4'd3;
  assign PE_rc__x_cord[17] = 4'd2;
  assign PE_rc__in___msg[17][0] = PE_rc__out__msg[25][1];
  assign PE_rc__out__rdy[25][1] = PE_rc__in___rdy[17][0];
  assign PE_rc__in___val[17][0] = PE_rc__out__val[25][1];
  assign PE_rc__in___msg[25][1] = PE_rc__out__msg[17][0];
  assign PE_rc__out__rdy[17][0] = PE_rc__in___rdy[25][1];
  assign PE_rc__in___val[25][1] = PE_rc__out__val[17][0];
  assign PE_rc__in___msg[17][3] = PE_rc__out__msg[18][2];
  assign PE_rc__out__rdy[18][2] = PE_rc__in___rdy[17][3];
  assign PE_rc__in___val[17][3] = PE_rc__out__val[18][2];
  assign PE_rc__in___msg[18][2] = PE_rc__out__msg[17][3];
  assign PE_rc__out__rdy[17][3] = PE_rc__in___rdy[18][2];
  assign PE_rc__in___val[18][2] = PE_rc__out__val[17][3];
  assign PE_rc__is_calc[18] = is_calc;
  assign PE_rc__y_cord[18] = 4'd3;
  assign PE_rc__x_cord[18] = 4'd3;
  assign PE_rc__in___msg[18][0] = PE_rc__out__msg[26][1];
  assign PE_rc__out__rdy[26][1] = PE_rc__in___rdy[18][0];
  assign PE_rc__in___val[18][0] = PE_rc__out__val[26][1];
  assign PE_rc__in___msg[26][1] = PE_rc__out__msg[18][0];
  assign PE_rc__out__rdy[18][0] = PE_rc__in___rdy[26][1];
  assign PE_rc__in___val[26][1] = PE_rc__out__val[18][0];
  assign PE_rc__in___msg[18][3] = PE_rc__out__msg[19][2];
  assign PE_rc__out__rdy[19][2] = PE_rc__in___rdy[18][3];
  assign PE_rc__in___val[18][3] = PE_rc__out__val[19][2];
  assign PE_rc__in___msg[19][2] = PE_rc__out__msg[18][3];
  assign PE_rc__out__rdy[18][3] = PE_rc__in___rdy[19][2];
  assign PE_rc__in___val[19][2] = PE_rc__out__val[18][3];
  assign PE_rc__is_calc[19] = is_calc;
  assign PE_rc__y_cord[19] = 4'd3;
  assign PE_rc__x_cord[19] = 4'd4;
  assign PE_rc__in___msg[19][0] = PE_rc__out__msg[27][1];
  assign PE_rc__out__rdy[27][1] = PE_rc__in___rdy[19][0];
  assign PE_rc__in___val[19][0] = PE_rc__out__val[27][1];
  assign PE_rc__in___msg[27][1] = PE_rc__out__msg[19][0];
  assign PE_rc__out__rdy[19][0] = PE_rc__in___rdy[27][1];
  assign PE_rc__in___val[27][1] = PE_rc__out__val[19][0];
  assign PE_rc__in___msg[19][3] = PE_rc__out__msg[20][2];
  assign PE_rc__out__rdy[20][2] = PE_rc__in___rdy[19][3];
  assign PE_rc__in___val[19][3] = PE_rc__out__val[20][2];
  assign PE_rc__in___msg[20][2] = PE_rc__out__msg[19][3];
  assign PE_rc__out__rdy[19][3] = PE_rc__in___rdy[20][2];
  assign PE_rc__in___val[20][2] = PE_rc__out__val[19][3];
  assign PE_rc__is_calc[20] = is_calc;
  assign PE_rc__y_cord[20] = 4'd3;
  assign PE_rc__x_cord[20] = 4'd5;
  assign PE_rc__in___msg[20][0] = PE_rc__out__msg[28][1];
  assign PE_rc__out__rdy[28][1] = PE_rc__in___rdy[20][0];
  assign PE_rc__in___val[20][0] = PE_rc__out__val[28][1];
  assign PE_rc__in___msg[28][1] = PE_rc__out__msg[20][0];
  assign PE_rc__out__rdy[20][0] = PE_rc__in___rdy[28][1];
  assign PE_rc__in___val[28][1] = PE_rc__out__val[20][0];
  assign PE_rc__in___msg[20][3] = PE_rc__out__msg[21][2];
  assign PE_rc__out__rdy[21][2] = PE_rc__in___rdy[20][3];
  assign PE_rc__in___val[20][3] = PE_rc__out__val[21][2];
  assign PE_rc__in___msg[21][2] = PE_rc__out__msg[20][3];
  assign PE_rc__out__rdy[20][3] = PE_rc__in___rdy[21][2];
  assign PE_rc__in___val[21][2] = PE_rc__out__val[20][3];
  assign PE_rc__is_calc[21] = is_calc;
  assign PE_rc__y_cord[21] = 4'd3;
  assign PE_rc__x_cord[21] = 4'd6;
  assign PE_rc__in___msg[21][0] = PE_rc__out__msg[29][1];
  assign PE_rc__out__rdy[29][1] = PE_rc__in___rdy[21][0];
  assign PE_rc__in___val[21][0] = PE_rc__out__val[29][1];
  assign PE_rc__in___msg[29][1] = PE_rc__out__msg[21][0];
  assign PE_rc__out__rdy[21][0] = PE_rc__in___rdy[29][1];
  assign PE_rc__in___val[29][1] = PE_rc__out__val[21][0];
  assign PE_rc__in___msg[21][3] = PE_rc__out__msg[22][2];
  assign PE_rc__out__rdy[22][2] = PE_rc__in___rdy[21][3];
  assign PE_rc__in___val[21][3] = PE_rc__out__val[22][2];
  assign PE_rc__in___msg[22][2] = PE_rc__out__msg[21][3];
  assign PE_rc__out__rdy[21][3] = PE_rc__in___rdy[22][2];
  assign PE_rc__in___val[22][2] = PE_rc__out__val[21][3];
  assign PE_rc__is_calc[22] = is_calc;
  assign PE_rc__y_cord[22] = 4'd3;
  assign PE_rc__x_cord[22] = 4'd7;
  assign PE_rc__in___msg[22][0] = PE_rc__out__msg[30][1];
  assign PE_rc__out__rdy[30][1] = PE_rc__in___rdy[22][0];
  assign PE_rc__in___val[22][0] = PE_rc__out__val[30][1];
  assign PE_rc__in___msg[30][1] = PE_rc__out__msg[22][0];
  assign PE_rc__out__rdy[22][0] = PE_rc__in___rdy[30][1];
  assign PE_rc__in___val[30][1] = PE_rc__out__val[22][0];
  assign PE_rc__in___msg[22][3] = PE_rc__out__msg[23][2];
  assign PE_rc__out__rdy[23][2] = PE_rc__in___rdy[22][3];
  assign PE_rc__in___val[22][3] = PE_rc__out__val[23][2];
  assign PE_rc__in___msg[23][2] = PE_rc__out__msg[22][3];
  assign PE_rc__out__rdy[22][3] = PE_rc__in___rdy[23][2];
  assign PE_rc__in___val[23][2] = PE_rc__out__val[22][3];
  assign PE_rc__is_calc[23] = is_calc;
  assign PE_rc__y_cord[23] = 4'd3;
  assign PE_rc__x_cord[23] = 4'd8;
  assign PE_rc__in___msg[23][0] = PE_rc__out__msg[31][1];
  assign PE_rc__out__rdy[31][1] = PE_rc__in___rdy[23][0];
  assign PE_rc__in___val[23][0] = PE_rc__out__val[31][1];
  assign PE_rc__in___msg[31][1] = PE_rc__out__msg[23][0];
  assign PE_rc__out__rdy[23][0] = PE_rc__in___rdy[31][1];
  assign PE_rc__in___val[31][1] = PE_rc__out__val[23][0];
  assign PE_rc__in___val[23][3] = 1'd0;
  assign PE_rc__in___msg[23][3] = 32'd0;
  assign PE_rc__out__rdy[23][3] = 1'd1;
  assign PE_rc__is_calc[24] = is_calc;
  assign PE_rc__y_cord[24] = 4'd4;
  assign PE_rc__x_cord[24] = 4'd1;
  assign PE_rc__in___msg[24][0] = PE_rc__out__msg[32][1];
  assign PE_rc__out__rdy[32][1] = PE_rc__in___rdy[24][0];
  assign PE_rc__in___val[24][0] = PE_rc__out__val[32][1];
  assign PE_rc__in___msg[32][1] = PE_rc__out__msg[24][0];
  assign PE_rc__out__rdy[24][0] = PE_rc__in___rdy[32][1];
  assign PE_rc__in___val[32][1] = PE_rc__out__val[24][0];
  assign PE_rc__in___msg[24][3] = PE_rc__out__msg[25][2];
  assign PE_rc__out__rdy[25][2] = PE_rc__in___rdy[24][3];
  assign PE_rc__in___val[24][3] = PE_rc__out__val[25][2];
  assign PE_rc__in___msg[25][2] = PE_rc__out__msg[24][3];
  assign PE_rc__out__rdy[24][3] = PE_rc__in___rdy[25][2];
  assign PE_rc__in___val[25][2] = PE_rc__out__val[24][3];
  assign PE_rc__in___msg[24][2] = ME__out__msg[11];
  assign ME__out__rdy[11] = PE_rc__in___rdy[24][2];
  assign PE_rc__in___val[24][2] = ME__out__val[11];
  assign ME__in___msg[11] = PE_rc__out__msg[24][2];
  assign PE_rc__out__rdy[24][2] = ME__in___rdy[11];
  assign ME__in___val[11] = PE_rc__out__val[24][2];
  assign PE_rc__is_calc[25] = is_calc;
  assign PE_rc__y_cord[25] = 4'd4;
  assign PE_rc__x_cord[25] = 4'd2;
  assign PE_rc__in___msg[25][0] = PE_rc__out__msg[33][1];
  assign PE_rc__out__rdy[33][1] = PE_rc__in___rdy[25][0];
  assign PE_rc__in___val[25][0] = PE_rc__out__val[33][1];
  assign PE_rc__in___msg[33][1] = PE_rc__out__msg[25][0];
  assign PE_rc__out__rdy[25][0] = PE_rc__in___rdy[33][1];
  assign PE_rc__in___val[33][1] = PE_rc__out__val[25][0];
  assign PE_rc__in___msg[25][3] = PE_rc__out__msg[26][2];
  assign PE_rc__out__rdy[26][2] = PE_rc__in___rdy[25][3];
  assign PE_rc__in___val[25][3] = PE_rc__out__val[26][2];
  assign PE_rc__in___msg[26][2] = PE_rc__out__msg[25][3];
  assign PE_rc__out__rdy[25][3] = PE_rc__in___rdy[26][2];
  assign PE_rc__in___val[26][2] = PE_rc__out__val[25][3];
  assign PE_rc__is_calc[26] = is_calc;
  assign PE_rc__y_cord[26] = 4'd4;
  assign PE_rc__x_cord[26] = 4'd3;
  assign PE_rc__in___msg[26][0] = PE_rc__out__msg[34][1];
  assign PE_rc__out__rdy[34][1] = PE_rc__in___rdy[26][0];
  assign PE_rc__in___val[26][0] = PE_rc__out__val[34][1];
  assign PE_rc__in___msg[34][1] = PE_rc__out__msg[26][0];
  assign PE_rc__out__rdy[26][0] = PE_rc__in___rdy[34][1];
  assign PE_rc__in___val[34][1] = PE_rc__out__val[26][0];
  assign PE_rc__in___msg[26][3] = PE_rc__out__msg[27][2];
  assign PE_rc__out__rdy[27][2] = PE_rc__in___rdy[26][3];
  assign PE_rc__in___val[26][3] = PE_rc__out__val[27][2];
  assign PE_rc__in___msg[27][2] = PE_rc__out__msg[26][3];
  assign PE_rc__out__rdy[26][3] = PE_rc__in___rdy[27][2];
  assign PE_rc__in___val[27][2] = PE_rc__out__val[26][3];
  assign PE_rc__is_calc[27] = is_calc;
  assign PE_rc__y_cord[27] = 4'd4;
  assign PE_rc__x_cord[27] = 4'd4;
  assign PE_rc__in___msg[27][0] = PE_rc__out__msg[35][1];
  assign PE_rc__out__rdy[35][1] = PE_rc__in___rdy[27][0];
  assign PE_rc__in___val[27][0] = PE_rc__out__val[35][1];
  assign PE_rc__in___msg[35][1] = PE_rc__out__msg[27][0];
  assign PE_rc__out__rdy[27][0] = PE_rc__in___rdy[35][1];
  assign PE_rc__in___val[35][1] = PE_rc__out__val[27][0];
  assign PE_rc__in___msg[27][3] = PE_rc__out__msg[28][2];
  assign PE_rc__out__rdy[28][2] = PE_rc__in___rdy[27][3];
  assign PE_rc__in___val[27][3] = PE_rc__out__val[28][2];
  assign PE_rc__in___msg[28][2] = PE_rc__out__msg[27][3];
  assign PE_rc__out__rdy[27][3] = PE_rc__in___rdy[28][2];
  assign PE_rc__in___val[28][2] = PE_rc__out__val[27][3];
  assign PE_rc__is_calc[28] = is_calc;
  assign PE_rc__y_cord[28] = 4'd4;
  assign PE_rc__x_cord[28] = 4'd5;
  assign PE_rc__in___msg[28][0] = PE_rc__out__msg[36][1];
  assign PE_rc__out__rdy[36][1] = PE_rc__in___rdy[28][0];
  assign PE_rc__in___val[28][0] = PE_rc__out__val[36][1];
  assign PE_rc__in___msg[36][1] = PE_rc__out__msg[28][0];
  assign PE_rc__out__rdy[28][0] = PE_rc__in___rdy[36][1];
  assign PE_rc__in___val[36][1] = PE_rc__out__val[28][0];
  assign PE_rc__in___msg[28][3] = PE_rc__out__msg[29][2];
  assign PE_rc__out__rdy[29][2] = PE_rc__in___rdy[28][3];
  assign PE_rc__in___val[28][3] = PE_rc__out__val[29][2];
  assign PE_rc__in___msg[29][2] = PE_rc__out__msg[28][3];
  assign PE_rc__out__rdy[28][3] = PE_rc__in___rdy[29][2];
  assign PE_rc__in___val[29][2] = PE_rc__out__val[28][3];
  assign PE_rc__is_calc[29] = is_calc;
  assign PE_rc__y_cord[29] = 4'd4;
  assign PE_rc__x_cord[29] = 4'd6;
  assign PE_rc__in___msg[29][0] = PE_rc__out__msg[37][1];
  assign PE_rc__out__rdy[37][1] = PE_rc__in___rdy[29][0];
  assign PE_rc__in___val[29][0] = PE_rc__out__val[37][1];
  assign PE_rc__in___msg[37][1] = PE_rc__out__msg[29][0];
  assign PE_rc__out__rdy[29][0] = PE_rc__in___rdy[37][1];
  assign PE_rc__in___val[37][1] = PE_rc__out__val[29][0];
  assign PE_rc__in___msg[29][3] = PE_rc__out__msg[30][2];
  assign PE_rc__out__rdy[30][2] = PE_rc__in___rdy[29][3];
  assign PE_rc__in___val[29][3] = PE_rc__out__val[30][2];
  assign PE_rc__in___msg[30][2] = PE_rc__out__msg[29][3];
  assign PE_rc__out__rdy[29][3] = PE_rc__in___rdy[30][2];
  assign PE_rc__in___val[30][2] = PE_rc__out__val[29][3];
  assign PE_rc__is_calc[30] = is_calc;
  assign PE_rc__y_cord[30] = 4'd4;
  assign PE_rc__x_cord[30] = 4'd7;
  assign PE_rc__in___msg[30][0] = PE_rc__out__msg[38][1];
  assign PE_rc__out__rdy[38][1] = PE_rc__in___rdy[30][0];
  assign PE_rc__in___val[30][0] = PE_rc__out__val[38][1];
  assign PE_rc__in___msg[38][1] = PE_rc__out__msg[30][0];
  assign PE_rc__out__rdy[30][0] = PE_rc__in___rdy[38][1];
  assign PE_rc__in___val[38][1] = PE_rc__out__val[30][0];
  assign PE_rc__in___msg[30][3] = PE_rc__out__msg[31][2];
  assign PE_rc__out__rdy[31][2] = PE_rc__in___rdy[30][3];
  assign PE_rc__in___val[30][3] = PE_rc__out__val[31][2];
  assign PE_rc__in___msg[31][2] = PE_rc__out__msg[30][3];
  assign PE_rc__out__rdy[30][3] = PE_rc__in___rdy[31][2];
  assign PE_rc__in___val[31][2] = PE_rc__out__val[30][3];
  assign PE_rc__is_calc[31] = is_calc;
  assign PE_rc__y_cord[31] = 4'd4;
  assign PE_rc__x_cord[31] = 4'd8;
  assign PE_rc__in___msg[31][0] = PE_rc__out__msg[39][1];
  assign PE_rc__out__rdy[39][1] = PE_rc__in___rdy[31][0];
  assign PE_rc__in___val[31][0] = PE_rc__out__val[39][1];
  assign PE_rc__in___msg[39][1] = PE_rc__out__msg[31][0];
  assign PE_rc__out__rdy[31][0] = PE_rc__in___rdy[39][1];
  assign PE_rc__in___val[39][1] = PE_rc__out__val[31][0];
  assign PE_rc__in___val[31][3] = 1'd0;
  assign PE_rc__in___msg[31][3] = 32'd0;
  assign PE_rc__out__rdy[31][3] = 1'd1;
  assign PE_rc__is_calc[32] = is_calc;
  assign PE_rc__y_cord[32] = 4'd5;
  assign PE_rc__x_cord[32] = 4'd1;
  assign PE_rc__in___msg[32][0] = PE_rc__out__msg[40][1];
  assign PE_rc__out__rdy[40][1] = PE_rc__in___rdy[32][0];
  assign PE_rc__in___val[32][0] = PE_rc__out__val[40][1];
  assign PE_rc__in___msg[40][1] = PE_rc__out__msg[32][0];
  assign PE_rc__out__rdy[32][0] = PE_rc__in___rdy[40][1];
  assign PE_rc__in___val[40][1] = PE_rc__out__val[32][0];
  assign PE_rc__in___msg[32][3] = PE_rc__out__msg[33][2];
  assign PE_rc__out__rdy[33][2] = PE_rc__in___rdy[32][3];
  assign PE_rc__in___val[32][3] = PE_rc__out__val[33][2];
  assign PE_rc__in___msg[33][2] = PE_rc__out__msg[32][3];
  assign PE_rc__out__rdy[32][3] = PE_rc__in___rdy[33][2];
  assign PE_rc__in___val[33][2] = PE_rc__out__val[32][3];
  assign PE_rc__in___msg[32][2] = ME__out__msg[12];
  assign ME__out__rdy[12] = PE_rc__in___rdy[32][2];
  assign PE_rc__in___val[32][2] = ME__out__val[12];
  assign ME__in___msg[12] = PE_rc__out__msg[32][2];
  assign PE_rc__out__rdy[32][2] = ME__in___rdy[12];
  assign ME__in___val[12] = PE_rc__out__val[32][2];
  assign PE_rc__is_calc[33] = is_calc;
  assign PE_rc__y_cord[33] = 4'd5;
  assign PE_rc__x_cord[33] = 4'd2;
  assign PE_rc__in___msg[33][0] = PE_rc__out__msg[41][1];
  assign PE_rc__out__rdy[41][1] = PE_rc__in___rdy[33][0];
  assign PE_rc__in___val[33][0] = PE_rc__out__val[41][1];
  assign PE_rc__in___msg[41][1] = PE_rc__out__msg[33][0];
  assign PE_rc__out__rdy[33][0] = PE_rc__in___rdy[41][1];
  assign PE_rc__in___val[41][1] = PE_rc__out__val[33][0];
  assign PE_rc__in___msg[33][3] = PE_rc__out__msg[34][2];
  assign PE_rc__out__rdy[34][2] = PE_rc__in___rdy[33][3];
  assign PE_rc__in___val[33][3] = PE_rc__out__val[34][2];
  assign PE_rc__in___msg[34][2] = PE_rc__out__msg[33][3];
  assign PE_rc__out__rdy[33][3] = PE_rc__in___rdy[34][2];
  assign PE_rc__in___val[34][2] = PE_rc__out__val[33][3];
  assign PE_rc__is_calc[34] = is_calc;
  assign PE_rc__y_cord[34] = 4'd5;
  assign PE_rc__x_cord[34] = 4'd3;
  assign PE_rc__in___msg[34][0] = PE_rc__out__msg[42][1];
  assign PE_rc__out__rdy[42][1] = PE_rc__in___rdy[34][0];
  assign PE_rc__in___val[34][0] = PE_rc__out__val[42][1];
  assign PE_rc__in___msg[42][1] = PE_rc__out__msg[34][0];
  assign PE_rc__out__rdy[34][0] = PE_rc__in___rdy[42][1];
  assign PE_rc__in___val[42][1] = PE_rc__out__val[34][0];
  assign PE_rc__in___msg[34][3] = PE_rc__out__msg[35][2];
  assign PE_rc__out__rdy[35][2] = PE_rc__in___rdy[34][3];
  assign PE_rc__in___val[34][3] = PE_rc__out__val[35][2];
  assign PE_rc__in___msg[35][2] = PE_rc__out__msg[34][3];
  assign PE_rc__out__rdy[34][3] = PE_rc__in___rdy[35][2];
  assign PE_rc__in___val[35][2] = PE_rc__out__val[34][3];
  assign PE_rc__is_calc[35] = is_calc;
  assign PE_rc__y_cord[35] = 4'd5;
  assign PE_rc__x_cord[35] = 4'd4;
  assign PE_rc__in___msg[35][0] = PE_rc__out__msg[43][1];
  assign PE_rc__out__rdy[43][1] = PE_rc__in___rdy[35][0];
  assign PE_rc__in___val[35][0] = PE_rc__out__val[43][1];
  assign PE_rc__in___msg[43][1] = PE_rc__out__msg[35][0];
  assign PE_rc__out__rdy[35][0] = PE_rc__in___rdy[43][1];
  assign PE_rc__in___val[43][1] = PE_rc__out__val[35][0];
  assign PE_rc__in___msg[35][3] = PE_rc__out__msg[36][2];
  assign PE_rc__out__rdy[36][2] = PE_rc__in___rdy[35][3];
  assign PE_rc__in___val[35][3] = PE_rc__out__val[36][2];
  assign PE_rc__in___msg[36][2] = PE_rc__out__msg[35][3];
  assign PE_rc__out__rdy[35][3] = PE_rc__in___rdy[36][2];
  assign PE_rc__in___val[36][2] = PE_rc__out__val[35][3];
  assign PE_rc__is_calc[36] = is_calc;
  assign PE_rc__y_cord[36] = 4'd5;
  assign PE_rc__x_cord[36] = 4'd5;
  assign PE_rc__in___msg[36][0] = PE_rc__out__msg[44][1];
  assign PE_rc__out__rdy[44][1] = PE_rc__in___rdy[36][0];
  assign PE_rc__in___val[36][0] = PE_rc__out__val[44][1];
  assign PE_rc__in___msg[44][1] = PE_rc__out__msg[36][0];
  assign PE_rc__out__rdy[36][0] = PE_rc__in___rdy[44][1];
  assign PE_rc__in___val[44][1] = PE_rc__out__val[36][0];
  assign PE_rc__in___msg[36][3] = PE_rc__out__msg[37][2];
  assign PE_rc__out__rdy[37][2] = PE_rc__in___rdy[36][3];
  assign PE_rc__in___val[36][3] = PE_rc__out__val[37][2];
  assign PE_rc__in___msg[37][2] = PE_rc__out__msg[36][3];
  assign PE_rc__out__rdy[36][3] = PE_rc__in___rdy[37][2];
  assign PE_rc__in___val[37][2] = PE_rc__out__val[36][3];
  assign PE_rc__is_calc[37] = is_calc;
  assign PE_rc__y_cord[37] = 4'd5;
  assign PE_rc__x_cord[37] = 4'd6;
  assign PE_rc__in___msg[37][0] = PE_rc__out__msg[45][1];
  assign PE_rc__out__rdy[45][1] = PE_rc__in___rdy[37][0];
  assign PE_rc__in___val[37][0] = PE_rc__out__val[45][1];
  assign PE_rc__in___msg[45][1] = PE_rc__out__msg[37][0];
  assign PE_rc__out__rdy[37][0] = PE_rc__in___rdy[45][1];
  assign PE_rc__in___val[45][1] = PE_rc__out__val[37][0];
  assign PE_rc__in___msg[37][3] = PE_rc__out__msg[38][2];
  assign PE_rc__out__rdy[38][2] = PE_rc__in___rdy[37][3];
  assign PE_rc__in___val[37][3] = PE_rc__out__val[38][2];
  assign PE_rc__in___msg[38][2] = PE_rc__out__msg[37][3];
  assign PE_rc__out__rdy[37][3] = PE_rc__in___rdy[38][2];
  assign PE_rc__in___val[38][2] = PE_rc__out__val[37][3];
  assign PE_rc__is_calc[38] = is_calc;
  assign PE_rc__y_cord[38] = 4'd5;
  assign PE_rc__x_cord[38] = 4'd7;
  assign PE_rc__in___msg[38][0] = PE_rc__out__msg[46][1];
  assign PE_rc__out__rdy[46][1] = PE_rc__in___rdy[38][0];
  assign PE_rc__in___val[38][0] = PE_rc__out__val[46][1];
  assign PE_rc__in___msg[46][1] = PE_rc__out__msg[38][0];
  assign PE_rc__out__rdy[38][0] = PE_rc__in___rdy[46][1];
  assign PE_rc__in___val[46][1] = PE_rc__out__val[38][0];
  assign PE_rc__in___msg[38][3] = PE_rc__out__msg[39][2];
  assign PE_rc__out__rdy[39][2] = PE_rc__in___rdy[38][3];
  assign PE_rc__in___val[38][3] = PE_rc__out__val[39][2];
  assign PE_rc__in___msg[39][2] = PE_rc__out__msg[38][3];
  assign PE_rc__out__rdy[38][3] = PE_rc__in___rdy[39][2];
  assign PE_rc__in___val[39][2] = PE_rc__out__val[38][3];
  assign PE_rc__is_calc[39] = is_calc;
  assign PE_rc__y_cord[39] = 4'd5;
  assign PE_rc__x_cord[39] = 4'd8;
  assign PE_rc__in___msg[39][0] = PE_rc__out__msg[47][1];
  assign PE_rc__out__rdy[47][1] = PE_rc__in___rdy[39][0];
  assign PE_rc__in___val[39][0] = PE_rc__out__val[47][1];
  assign PE_rc__in___msg[47][1] = PE_rc__out__msg[39][0];
  assign PE_rc__out__rdy[39][0] = PE_rc__in___rdy[47][1];
  assign PE_rc__in___val[47][1] = PE_rc__out__val[39][0];
  assign PE_rc__in___val[39][3] = 1'd0;
  assign PE_rc__in___msg[39][3] = 32'd0;
  assign PE_rc__out__rdy[39][3] = 1'd1;
  assign PE_rc__is_calc[40] = is_calc;
  assign PE_rc__y_cord[40] = 4'd6;
  assign PE_rc__x_cord[40] = 4'd1;
  assign PE_rc__in___msg[40][0] = PE_rc__out__msg[48][1];
  assign PE_rc__out__rdy[48][1] = PE_rc__in___rdy[40][0];
  assign PE_rc__in___val[40][0] = PE_rc__out__val[48][1];
  assign PE_rc__in___msg[48][1] = PE_rc__out__msg[40][0];
  assign PE_rc__out__rdy[40][0] = PE_rc__in___rdy[48][1];
  assign PE_rc__in___val[48][1] = PE_rc__out__val[40][0];
  assign PE_rc__in___msg[40][3] = PE_rc__out__msg[41][2];
  assign PE_rc__out__rdy[41][2] = PE_rc__in___rdy[40][3];
  assign PE_rc__in___val[40][3] = PE_rc__out__val[41][2];
  assign PE_rc__in___msg[41][2] = PE_rc__out__msg[40][3];
  assign PE_rc__out__rdy[40][3] = PE_rc__in___rdy[41][2];
  assign PE_rc__in___val[41][2] = PE_rc__out__val[40][3];
  assign PE_rc__in___msg[40][2] = ME__out__msg[13];
  assign ME__out__rdy[13] = PE_rc__in___rdy[40][2];
  assign PE_rc__in___val[40][2] = ME__out__val[13];
  assign ME__in___msg[13] = PE_rc__out__msg[40][2];
  assign PE_rc__out__rdy[40][2] = ME__in___rdy[13];
  assign ME__in___val[13] = PE_rc__out__val[40][2];
  assign PE_rc__is_calc[41] = is_calc;
  assign PE_rc__y_cord[41] = 4'd6;
  assign PE_rc__x_cord[41] = 4'd2;
  assign PE_rc__in___msg[41][0] = PE_rc__out__msg[49][1];
  assign PE_rc__out__rdy[49][1] = PE_rc__in___rdy[41][0];
  assign PE_rc__in___val[41][0] = PE_rc__out__val[49][1];
  assign PE_rc__in___msg[49][1] = PE_rc__out__msg[41][0];
  assign PE_rc__out__rdy[41][0] = PE_rc__in___rdy[49][1];
  assign PE_rc__in___val[49][1] = PE_rc__out__val[41][0];
  assign PE_rc__in___msg[41][3] = PE_rc__out__msg[42][2];
  assign PE_rc__out__rdy[42][2] = PE_rc__in___rdy[41][3];
  assign PE_rc__in___val[41][3] = PE_rc__out__val[42][2];
  assign PE_rc__in___msg[42][2] = PE_rc__out__msg[41][3];
  assign PE_rc__out__rdy[41][3] = PE_rc__in___rdy[42][2];
  assign PE_rc__in___val[42][2] = PE_rc__out__val[41][3];
  assign PE_rc__is_calc[42] = is_calc;
  assign PE_rc__y_cord[42] = 4'd6;
  assign PE_rc__x_cord[42] = 4'd3;
  assign PE_rc__in___msg[42][0] = PE_rc__out__msg[50][1];
  assign PE_rc__out__rdy[50][1] = PE_rc__in___rdy[42][0];
  assign PE_rc__in___val[42][0] = PE_rc__out__val[50][1];
  assign PE_rc__in___msg[50][1] = PE_rc__out__msg[42][0];
  assign PE_rc__out__rdy[42][0] = PE_rc__in___rdy[50][1];
  assign PE_rc__in___val[50][1] = PE_rc__out__val[42][0];
  assign PE_rc__in___msg[42][3] = PE_rc__out__msg[43][2];
  assign PE_rc__out__rdy[43][2] = PE_rc__in___rdy[42][3];
  assign PE_rc__in___val[42][3] = PE_rc__out__val[43][2];
  assign PE_rc__in___msg[43][2] = PE_rc__out__msg[42][3];
  assign PE_rc__out__rdy[42][3] = PE_rc__in___rdy[43][2];
  assign PE_rc__in___val[43][2] = PE_rc__out__val[42][3];
  assign PE_rc__is_calc[43] = is_calc;
  assign PE_rc__y_cord[43] = 4'd6;
  assign PE_rc__x_cord[43] = 4'd4;
  assign PE_rc__in___msg[43][0] = PE_rc__out__msg[51][1];
  assign PE_rc__out__rdy[51][1] = PE_rc__in___rdy[43][0];
  assign PE_rc__in___val[43][0] = PE_rc__out__val[51][1];
  assign PE_rc__in___msg[51][1] = PE_rc__out__msg[43][0];
  assign PE_rc__out__rdy[43][0] = PE_rc__in___rdy[51][1];
  assign PE_rc__in___val[51][1] = PE_rc__out__val[43][0];
  assign PE_rc__in___msg[43][3] = PE_rc__out__msg[44][2];
  assign PE_rc__out__rdy[44][2] = PE_rc__in___rdy[43][3];
  assign PE_rc__in___val[43][3] = PE_rc__out__val[44][2];
  assign PE_rc__in___msg[44][2] = PE_rc__out__msg[43][3];
  assign PE_rc__out__rdy[43][3] = PE_rc__in___rdy[44][2];
  assign PE_rc__in___val[44][2] = PE_rc__out__val[43][3];
  assign PE_rc__is_calc[44] = is_calc;
  assign PE_rc__y_cord[44] = 4'd6;
  assign PE_rc__x_cord[44] = 4'd5;
  assign PE_rc__in___msg[44][0] = PE_rc__out__msg[52][1];
  assign PE_rc__out__rdy[52][1] = PE_rc__in___rdy[44][0];
  assign PE_rc__in___val[44][0] = PE_rc__out__val[52][1];
  assign PE_rc__in___msg[52][1] = PE_rc__out__msg[44][0];
  assign PE_rc__out__rdy[44][0] = PE_rc__in___rdy[52][1];
  assign PE_rc__in___val[52][1] = PE_rc__out__val[44][0];
  assign PE_rc__in___msg[44][3] = PE_rc__out__msg[45][2];
  assign PE_rc__out__rdy[45][2] = PE_rc__in___rdy[44][3];
  assign PE_rc__in___val[44][3] = PE_rc__out__val[45][2];
  assign PE_rc__in___msg[45][2] = PE_rc__out__msg[44][3];
  assign PE_rc__out__rdy[44][3] = PE_rc__in___rdy[45][2];
  assign PE_rc__in___val[45][2] = PE_rc__out__val[44][3];
  assign PE_rc__is_calc[45] = is_calc;
  assign PE_rc__y_cord[45] = 4'd6;
  assign PE_rc__x_cord[45] = 4'd6;
  assign PE_rc__in___msg[45][0] = PE_rc__out__msg[53][1];
  assign PE_rc__out__rdy[53][1] = PE_rc__in___rdy[45][0];
  assign PE_rc__in___val[45][0] = PE_rc__out__val[53][1];
  assign PE_rc__in___msg[53][1] = PE_rc__out__msg[45][0];
  assign PE_rc__out__rdy[45][0] = PE_rc__in___rdy[53][1];
  assign PE_rc__in___val[53][1] = PE_rc__out__val[45][0];
  assign PE_rc__in___msg[45][3] = PE_rc__out__msg[46][2];
  assign PE_rc__out__rdy[46][2] = PE_rc__in___rdy[45][3];
  assign PE_rc__in___val[45][3] = PE_rc__out__val[46][2];
  assign PE_rc__in___msg[46][2] = PE_rc__out__msg[45][3];
  assign PE_rc__out__rdy[45][3] = PE_rc__in___rdy[46][2];
  assign PE_rc__in___val[46][2] = PE_rc__out__val[45][3];
  assign PE_rc__is_calc[46] = is_calc;
  assign PE_rc__y_cord[46] = 4'd6;
  assign PE_rc__x_cord[46] = 4'd7;
  assign PE_rc__in___msg[46][0] = PE_rc__out__msg[54][1];
  assign PE_rc__out__rdy[54][1] = PE_rc__in___rdy[46][0];
  assign PE_rc__in___val[46][0] = PE_rc__out__val[54][1];
  assign PE_rc__in___msg[54][1] = PE_rc__out__msg[46][0];
  assign PE_rc__out__rdy[46][0] = PE_rc__in___rdy[54][1];
  assign PE_rc__in___val[54][1] = PE_rc__out__val[46][0];
  assign PE_rc__in___msg[46][3] = PE_rc__out__msg[47][2];
  assign PE_rc__out__rdy[47][2] = PE_rc__in___rdy[46][3];
  assign PE_rc__in___val[46][3] = PE_rc__out__val[47][2];
  assign PE_rc__in___msg[47][2] = PE_rc__out__msg[46][3];
  assign PE_rc__out__rdy[46][3] = PE_rc__in___rdy[47][2];
  assign PE_rc__in___val[47][2] = PE_rc__out__val[46][3];
  assign PE_rc__is_calc[47] = is_calc;
  assign PE_rc__y_cord[47] = 4'd6;
  assign PE_rc__x_cord[47] = 4'd8;
  assign PE_rc__in___msg[47][0] = PE_rc__out__msg[55][1];
  assign PE_rc__out__rdy[55][1] = PE_rc__in___rdy[47][0];
  assign PE_rc__in___val[47][0] = PE_rc__out__val[55][1];
  assign PE_rc__in___msg[55][1] = PE_rc__out__msg[47][0];
  assign PE_rc__out__rdy[47][0] = PE_rc__in___rdy[55][1];
  assign PE_rc__in___val[55][1] = PE_rc__out__val[47][0];
  assign PE_rc__in___val[47][3] = 1'd0;
  assign PE_rc__in___msg[47][3] = 32'd0;
  assign PE_rc__out__rdy[47][3] = 1'd1;
  assign PE_rc__is_calc[48] = is_calc;
  assign PE_rc__y_cord[48] = 4'd7;
  assign PE_rc__x_cord[48] = 4'd1;
  assign PE_rc__in___msg[48][0] = PE_rc__out__msg[56][1];
  assign PE_rc__out__rdy[56][1] = PE_rc__in___rdy[48][0];
  assign PE_rc__in___val[48][0] = PE_rc__out__val[56][1];
  assign PE_rc__in___msg[56][1] = PE_rc__out__msg[48][0];
  assign PE_rc__out__rdy[48][0] = PE_rc__in___rdy[56][1];
  assign PE_rc__in___val[56][1] = PE_rc__out__val[48][0];
  assign PE_rc__in___msg[48][3] = PE_rc__out__msg[49][2];
  assign PE_rc__out__rdy[49][2] = PE_rc__in___rdy[48][3];
  assign PE_rc__in___val[48][3] = PE_rc__out__val[49][2];
  assign PE_rc__in___msg[49][2] = PE_rc__out__msg[48][3];
  assign PE_rc__out__rdy[48][3] = PE_rc__in___rdy[49][2];
  assign PE_rc__in___val[49][2] = PE_rc__out__val[48][3];
  assign PE_rc__in___msg[48][2] = ME__out__msg[14];
  assign ME__out__rdy[14] = PE_rc__in___rdy[48][2];
  assign PE_rc__in___val[48][2] = ME__out__val[14];
  assign ME__in___msg[14] = PE_rc__out__msg[48][2];
  assign PE_rc__out__rdy[48][2] = ME__in___rdy[14];
  assign ME__in___val[14] = PE_rc__out__val[48][2];
  assign PE_rc__is_calc[49] = is_calc;
  assign PE_rc__y_cord[49] = 4'd7;
  assign PE_rc__x_cord[49] = 4'd2;
  assign PE_rc__in___msg[49][0] = PE_rc__out__msg[57][1];
  assign PE_rc__out__rdy[57][1] = PE_rc__in___rdy[49][0];
  assign PE_rc__in___val[49][0] = PE_rc__out__val[57][1];
  assign PE_rc__in___msg[57][1] = PE_rc__out__msg[49][0];
  assign PE_rc__out__rdy[49][0] = PE_rc__in___rdy[57][1];
  assign PE_rc__in___val[57][1] = PE_rc__out__val[49][0];
  assign PE_rc__in___msg[49][3] = PE_rc__out__msg[50][2];
  assign PE_rc__out__rdy[50][2] = PE_rc__in___rdy[49][3];
  assign PE_rc__in___val[49][3] = PE_rc__out__val[50][2];
  assign PE_rc__in___msg[50][2] = PE_rc__out__msg[49][3];
  assign PE_rc__out__rdy[49][3] = PE_rc__in___rdy[50][2];
  assign PE_rc__in___val[50][2] = PE_rc__out__val[49][3];
  assign PE_rc__is_calc[50] = is_calc;
  assign PE_rc__y_cord[50] = 4'd7;
  assign PE_rc__x_cord[50] = 4'd3;
  assign PE_rc__in___msg[50][0] = PE_rc__out__msg[58][1];
  assign PE_rc__out__rdy[58][1] = PE_rc__in___rdy[50][0];
  assign PE_rc__in___val[50][0] = PE_rc__out__val[58][1];
  assign PE_rc__in___msg[58][1] = PE_rc__out__msg[50][0];
  assign PE_rc__out__rdy[50][0] = PE_rc__in___rdy[58][1];
  assign PE_rc__in___val[58][1] = PE_rc__out__val[50][0];
  assign PE_rc__in___msg[50][3] = PE_rc__out__msg[51][2];
  assign PE_rc__out__rdy[51][2] = PE_rc__in___rdy[50][3];
  assign PE_rc__in___val[50][3] = PE_rc__out__val[51][2];
  assign PE_rc__in___msg[51][2] = PE_rc__out__msg[50][3];
  assign PE_rc__out__rdy[50][3] = PE_rc__in___rdy[51][2];
  assign PE_rc__in___val[51][2] = PE_rc__out__val[50][3];
  assign PE_rc__is_calc[51] = is_calc;
  assign PE_rc__y_cord[51] = 4'd7;
  assign PE_rc__x_cord[51] = 4'd4;
  assign PE_rc__in___msg[51][0] = PE_rc__out__msg[59][1];
  assign PE_rc__out__rdy[59][1] = PE_rc__in___rdy[51][0];
  assign PE_rc__in___val[51][0] = PE_rc__out__val[59][1];
  assign PE_rc__in___msg[59][1] = PE_rc__out__msg[51][0];
  assign PE_rc__out__rdy[51][0] = PE_rc__in___rdy[59][1];
  assign PE_rc__in___val[59][1] = PE_rc__out__val[51][0];
  assign PE_rc__in___msg[51][3] = PE_rc__out__msg[52][2];
  assign PE_rc__out__rdy[52][2] = PE_rc__in___rdy[51][3];
  assign PE_rc__in___val[51][3] = PE_rc__out__val[52][2];
  assign PE_rc__in___msg[52][2] = PE_rc__out__msg[51][3];
  assign PE_rc__out__rdy[51][3] = PE_rc__in___rdy[52][2];
  assign PE_rc__in___val[52][2] = PE_rc__out__val[51][3];
  assign PE_rc__is_calc[52] = is_calc;
  assign PE_rc__y_cord[52] = 4'd7;
  assign PE_rc__x_cord[52] = 4'd5;
  assign PE_rc__in___msg[52][0] = PE_rc__out__msg[60][1];
  assign PE_rc__out__rdy[60][1] = PE_rc__in___rdy[52][0];
  assign PE_rc__in___val[52][0] = PE_rc__out__val[60][1];
  assign PE_rc__in___msg[60][1] = PE_rc__out__msg[52][0];
  assign PE_rc__out__rdy[52][0] = PE_rc__in___rdy[60][1];
  assign PE_rc__in___val[60][1] = PE_rc__out__val[52][0];
  assign PE_rc__in___msg[52][3] = PE_rc__out__msg[53][2];
  assign PE_rc__out__rdy[53][2] = PE_rc__in___rdy[52][3];
  assign PE_rc__in___val[52][3] = PE_rc__out__val[53][2];
  assign PE_rc__in___msg[53][2] = PE_rc__out__msg[52][3];
  assign PE_rc__out__rdy[52][3] = PE_rc__in___rdy[53][2];
  assign PE_rc__in___val[53][2] = PE_rc__out__val[52][3];
  assign PE_rc__is_calc[53] = is_calc;
  assign PE_rc__y_cord[53] = 4'd7;
  assign PE_rc__x_cord[53] = 4'd6;
  assign PE_rc__in___msg[53][0] = PE_rc__out__msg[61][1];
  assign PE_rc__out__rdy[61][1] = PE_rc__in___rdy[53][0];
  assign PE_rc__in___val[53][0] = PE_rc__out__val[61][1];
  assign PE_rc__in___msg[61][1] = PE_rc__out__msg[53][0];
  assign PE_rc__out__rdy[53][0] = PE_rc__in___rdy[61][1];
  assign PE_rc__in___val[61][1] = PE_rc__out__val[53][0];
  assign PE_rc__in___msg[53][3] = PE_rc__out__msg[54][2];
  assign PE_rc__out__rdy[54][2] = PE_rc__in___rdy[53][3];
  assign PE_rc__in___val[53][3] = PE_rc__out__val[54][2];
  assign PE_rc__in___msg[54][2] = PE_rc__out__msg[53][3];
  assign PE_rc__out__rdy[53][3] = PE_rc__in___rdy[54][2];
  assign PE_rc__in___val[54][2] = PE_rc__out__val[53][3];
  assign PE_rc__is_calc[54] = is_calc;
  assign PE_rc__y_cord[54] = 4'd7;
  assign PE_rc__x_cord[54] = 4'd7;
  assign PE_rc__in___msg[54][0] = PE_rc__out__msg[62][1];
  assign PE_rc__out__rdy[62][1] = PE_rc__in___rdy[54][0];
  assign PE_rc__in___val[54][0] = PE_rc__out__val[62][1];
  assign PE_rc__in___msg[62][1] = PE_rc__out__msg[54][0];
  assign PE_rc__out__rdy[54][0] = PE_rc__in___rdy[62][1];
  assign PE_rc__in___val[62][1] = PE_rc__out__val[54][0];
  assign PE_rc__in___msg[54][3] = PE_rc__out__msg[55][2];
  assign PE_rc__out__rdy[55][2] = PE_rc__in___rdy[54][3];
  assign PE_rc__in___val[54][3] = PE_rc__out__val[55][2];
  assign PE_rc__in___msg[55][2] = PE_rc__out__msg[54][3];
  assign PE_rc__out__rdy[54][3] = PE_rc__in___rdy[55][2];
  assign PE_rc__in___val[55][2] = PE_rc__out__val[54][3];
  assign PE_rc__is_calc[55] = is_calc;
  assign PE_rc__y_cord[55] = 4'd7;
  assign PE_rc__x_cord[55] = 4'd8;
  assign PE_rc__in___msg[55][0] = PE_rc__out__msg[63][1];
  assign PE_rc__out__rdy[63][1] = PE_rc__in___rdy[55][0];
  assign PE_rc__in___val[55][0] = PE_rc__out__val[63][1];
  assign PE_rc__in___msg[63][1] = PE_rc__out__msg[55][0];
  assign PE_rc__out__rdy[55][0] = PE_rc__in___rdy[63][1];
  assign PE_rc__in___val[63][1] = PE_rc__out__val[55][0];
  assign PE_rc__in___val[55][3] = 1'd0;
  assign PE_rc__in___msg[55][3] = 32'd0;
  assign PE_rc__out__rdy[55][3] = 1'd1;
  assign PE_rc__is_calc[56] = is_calc;
  assign PE_rc__y_cord[56] = 4'd8;
  assign PE_rc__x_cord[56] = 4'd1;
  assign PE_rc__in___val[56][0] = 1'd0;
  assign PE_rc__in___msg[56][0] = 32'd0;
  assign PE_rc__out__rdy[56][0] = 1'd1;
  assign PE_rc__in___msg[56][3] = PE_rc__out__msg[57][2];
  assign PE_rc__out__rdy[57][2] = PE_rc__in___rdy[56][3];
  assign PE_rc__in___val[56][3] = PE_rc__out__val[57][2];
  assign PE_rc__in___msg[57][2] = PE_rc__out__msg[56][3];
  assign PE_rc__out__rdy[56][3] = PE_rc__in___rdy[57][2];
  assign PE_rc__in___val[57][2] = PE_rc__out__val[56][3];
  assign PE_rc__in___msg[56][2] = ME__out__msg[15];
  assign ME__out__rdy[15] = PE_rc__in___rdy[56][2];
  assign PE_rc__in___val[56][2] = ME__out__val[15];
  assign ME__in___msg[15] = PE_rc__out__msg[56][2];
  assign PE_rc__out__rdy[56][2] = ME__in___rdy[15];
  assign ME__in___val[15] = PE_rc__out__val[56][2];
  assign PE_rc__is_calc[57] = is_calc;
  assign PE_rc__y_cord[57] = 4'd8;
  assign PE_rc__x_cord[57] = 4'd2;
  assign PE_rc__in___val[57][0] = 1'd0;
  assign PE_rc__in___msg[57][0] = 32'd0;
  assign PE_rc__out__rdy[57][0] = 1'd1;
  assign PE_rc__in___msg[57][3] = PE_rc__out__msg[58][2];
  assign PE_rc__out__rdy[58][2] = PE_rc__in___rdy[57][3];
  assign PE_rc__in___val[57][3] = PE_rc__out__val[58][2];
  assign PE_rc__in___msg[58][2] = PE_rc__out__msg[57][3];
  assign PE_rc__out__rdy[57][3] = PE_rc__in___rdy[58][2];
  assign PE_rc__in___val[58][2] = PE_rc__out__val[57][3];
  assign PE_rc__is_calc[58] = is_calc;
  assign PE_rc__y_cord[58] = 4'd8;
  assign PE_rc__x_cord[58] = 4'd3;
  assign PE_rc__in___val[58][0] = 1'd0;
  assign PE_rc__in___msg[58][0] = 32'd0;
  assign PE_rc__out__rdy[58][0] = 1'd1;
  assign PE_rc__in___msg[58][3] = PE_rc__out__msg[59][2];
  assign PE_rc__out__rdy[59][2] = PE_rc__in___rdy[58][3];
  assign PE_rc__in___val[58][3] = PE_rc__out__val[59][2];
  assign PE_rc__in___msg[59][2] = PE_rc__out__msg[58][3];
  assign PE_rc__out__rdy[58][3] = PE_rc__in___rdy[59][2];
  assign PE_rc__in___val[59][2] = PE_rc__out__val[58][3];
  assign PE_rc__is_calc[59] = is_calc;
  assign PE_rc__y_cord[59] = 4'd8;
  assign PE_rc__x_cord[59] = 4'd4;
  assign PE_rc__in___val[59][0] = 1'd0;
  assign PE_rc__in___msg[59][0] = 32'd0;
  assign PE_rc__out__rdy[59][0] = 1'd1;
  assign PE_rc__in___msg[59][3] = PE_rc__out__msg[60][2];
  assign PE_rc__out__rdy[60][2] = PE_rc__in___rdy[59][3];
  assign PE_rc__in___val[59][3] = PE_rc__out__val[60][2];
  assign PE_rc__in___msg[60][2] = PE_rc__out__msg[59][3];
  assign PE_rc__out__rdy[59][3] = PE_rc__in___rdy[60][2];
  assign PE_rc__in___val[60][2] = PE_rc__out__val[59][3];
  assign PE_rc__is_calc[60] = is_calc;
  assign PE_rc__y_cord[60] = 4'd8;
  assign PE_rc__x_cord[60] = 4'd5;
  assign PE_rc__in___val[60][0] = 1'd0;
  assign PE_rc__in___msg[60][0] = 32'd0;
  assign PE_rc__out__rdy[60][0] = 1'd1;
  assign PE_rc__in___msg[60][3] = PE_rc__out__msg[61][2];
  assign PE_rc__out__rdy[61][2] = PE_rc__in___rdy[60][3];
  assign PE_rc__in___val[60][3] = PE_rc__out__val[61][2];
  assign PE_rc__in___msg[61][2] = PE_rc__out__msg[60][3];
  assign PE_rc__out__rdy[60][3] = PE_rc__in___rdy[61][2];
  assign PE_rc__in___val[61][2] = PE_rc__out__val[60][3];
  assign PE_rc__is_calc[61] = is_calc;
  assign PE_rc__y_cord[61] = 4'd8;
  assign PE_rc__x_cord[61] = 4'd6;
  assign PE_rc__in___val[61][0] = 1'd0;
  assign PE_rc__in___msg[61][0] = 32'd0;
  assign PE_rc__out__rdy[61][0] = 1'd1;
  assign PE_rc__in___msg[61][3] = PE_rc__out__msg[62][2];
  assign PE_rc__out__rdy[62][2] = PE_rc__in___rdy[61][3];
  assign PE_rc__in___val[61][3] = PE_rc__out__val[62][2];
  assign PE_rc__in___msg[62][2] = PE_rc__out__msg[61][3];
  assign PE_rc__out__rdy[61][3] = PE_rc__in___rdy[62][2];
  assign PE_rc__in___val[62][2] = PE_rc__out__val[61][3];
  assign PE_rc__is_calc[62] = is_calc;
  assign PE_rc__y_cord[62] = 4'd8;
  assign PE_rc__x_cord[62] = 4'd7;
  assign PE_rc__in___val[62][0] = 1'd0;
  assign PE_rc__in___msg[62][0] = 32'd0;
  assign PE_rc__out__rdy[62][0] = 1'd1;
  assign PE_rc__in___msg[62][3] = PE_rc__out__msg[63][2];
  assign PE_rc__out__rdy[63][2] = PE_rc__in___rdy[62][3];
  assign PE_rc__in___val[62][3] = PE_rc__out__val[63][2];
  assign PE_rc__in___msg[63][2] = PE_rc__out__msg[62][3];
  assign PE_rc__out__rdy[62][3] = PE_rc__in___rdy[63][2];
  assign PE_rc__in___val[63][2] = PE_rc__out__val[62][3];
  assign PE_rc__is_calc[63] = is_calc;
  assign PE_rc__y_cord[63] = 4'd8;
  assign PE_rc__x_cord[63] = 4'd8;
  assign PE_rc__in___val[63][0] = 1'd0;
  assign PE_rc__in___msg[63][0] = 32'd0;
  assign PE_rc__out__rdy[63][0] = 1'd1;
  assign PE_rc__in___val[63][3] = 1'd0;
  assign PE_rc__in___msg[63][3] = 32'd0;
  assign PE_rc__out__rdy[63][3] = 1'd1;
  assign xminion_resp_msg.wen = 1'd0;
  assign xminion_resp_msg.addr = reg_CSR_raddr;
  assign all_CE_done[0:0] = CE_s__is_done;
  assign all_CE_done[1:1] = CE_e__is_done[0];
  assign all_CE_done[2:2] = CE_e__is_done[1];
  assign all_CE_done[3:3] = CE_e__is_done[2];
  assign all_CE_done[4:4] = CE_e__is_done[3];
  assign all_CE_done[5:5] = CE_e__is_done[4];
  assign all_CE_done[6:6] = CE_e__is_done[5];
  assign all_CE_done[7:7] = CE_e__is_done[6];
  assign all_CE_done[8:8] = CE_e__is_done[7];
  assign delayed_all_CE_done__clk = clk;
  assign delayed_all_CE_done__reset = reset;
  assign delayed_all_CE_done__cfg_reset = cfg_init;
  assign all_ME_done[0:0] = ME__is_done[0];
  assign all_ME_done[1:1] = ME__is_done[1];
  assign all_ME_done[2:2] = ME__is_done[2];
  assign all_ME_done[3:3] = ME__is_done[3];
  assign all_ME_done[4:4] = ME__is_done[4];
  assign all_ME_done[5:5] = ME__is_done[5];
  assign all_ME_done[6:6] = ME__is_done[6];
  assign all_ME_done[7:7] = ME__is_done[7];
  assign all_ME_done[8:8] = ME__is_done[8];
  assign all_ME_done[9:9] = ME__is_done[9];
  assign all_ME_done[10:10] = ME__is_done[10];
  assign all_ME_done[11:11] = ME__is_done[11];
  assign all_ME_done[12:12] = ME__is_done[12];
  assign all_ME_done[13:13] = ME__is_done[13];
  assign all_ME_done[14:14] = ME__is_done[14];
  assign all_ME_done[15:15] = ME__is_done[15];
  assign all_PE_occupancy[0:0] = PE_rc__is_occupied[0];
  assign all_PE_occupancy[1:1] = PE_rc__is_occupied[1];
  assign all_PE_occupancy[2:2] = PE_rc__is_occupied[2];
  assign all_PE_occupancy[3:3] = PE_rc__is_occupied[3];
  assign all_PE_occupancy[4:4] = PE_rc__is_occupied[4];
  assign all_PE_occupancy[5:5] = PE_rc__is_occupied[5];
  assign all_PE_occupancy[6:6] = PE_rc__is_occupied[6];
  assign all_PE_occupancy[7:7] = PE_rc__is_occupied[7];
  assign all_PE_occupancy[8:8] = PE_rc__is_occupied[8];
  assign all_PE_occupancy[9:9] = PE_rc__is_occupied[9];
  assign all_PE_occupancy[10:10] = PE_rc__is_occupied[10];
  assign all_PE_occupancy[11:11] = PE_rc__is_occupied[11];
  assign all_PE_occupancy[12:12] = PE_rc__is_occupied[12];
  assign all_PE_occupancy[13:13] = PE_rc__is_occupied[13];
  assign all_PE_occupancy[14:14] = PE_rc__is_occupied[14];
  assign all_PE_occupancy[15:15] = PE_rc__is_occupied[15];
  assign all_PE_occupancy[16:16] = PE_rc__is_occupied[16];
  assign all_PE_occupancy[17:17] = PE_rc__is_occupied[17];
  assign all_PE_occupancy[18:18] = PE_rc__is_occupied[18];
  assign all_PE_occupancy[19:19] = PE_rc__is_occupied[19];
  assign all_PE_occupancy[20:20] = PE_rc__is_occupied[20];
  assign all_PE_occupancy[21:21] = PE_rc__is_occupied[21];
  assign all_PE_occupancy[22:22] = PE_rc__is_occupied[22];
  assign all_PE_occupancy[23:23] = PE_rc__is_occupied[23];
  assign all_PE_occupancy[24:24] = PE_rc__is_occupied[24];
  assign all_PE_occupancy[25:25] = PE_rc__is_occupied[25];
  assign all_PE_occupancy[26:26] = PE_rc__is_occupied[26];
  assign all_PE_occupancy[27:27] = PE_rc__is_occupied[27];
  assign all_PE_occupancy[28:28] = PE_rc__is_occupied[28];
  assign all_PE_occupancy[29:29] = PE_rc__is_occupied[29];
  assign all_PE_occupancy[30:30] = PE_rc__is_occupied[30];
  assign all_PE_occupancy[31:31] = PE_rc__is_occupied[31];
  assign all_PE_occupancy[32:32] = PE_rc__is_occupied[32];
  assign all_PE_occupancy[33:33] = PE_rc__is_occupied[33];
  assign all_PE_occupancy[34:34] = PE_rc__is_occupied[34];
  assign all_PE_occupancy[35:35] = PE_rc__is_occupied[35];
  assign all_PE_occupancy[36:36] = PE_rc__is_occupied[36];
  assign all_PE_occupancy[37:37] = PE_rc__is_occupied[37];
  assign all_PE_occupancy[38:38] = PE_rc__is_occupied[38];
  assign all_PE_occupancy[39:39] = PE_rc__is_occupied[39];
  assign all_PE_occupancy[40:40] = PE_rc__is_occupied[40];
  assign all_PE_occupancy[41:41] = PE_rc__is_occupied[41];
  assign all_PE_occupancy[42:42] = PE_rc__is_occupied[42];
  assign all_PE_occupancy[43:43] = PE_rc__is_occupied[43];
  assign all_PE_occupancy[44:44] = PE_rc__is_occupied[44];
  assign all_PE_occupancy[45:45] = PE_rc__is_occupied[45];
  assign all_PE_occupancy[46:46] = PE_rc__is_occupied[46];
  assign all_PE_occupancy[47:47] = PE_rc__is_occupied[47];
  assign all_PE_occupancy[48:48] = PE_rc__is_occupied[48];
  assign all_PE_occupancy[49:49] = PE_rc__is_occupied[49];
  assign all_PE_occupancy[50:50] = PE_rc__is_occupied[50];
  assign all_PE_occupancy[51:51] = PE_rc__is_occupied[51];
  assign all_PE_occupancy[52:52] = PE_rc__is_occupied[52];
  assign all_PE_occupancy[53:53] = PE_rc__is_occupied[53];
  assign all_PE_occupancy[54:54] = PE_rc__is_occupied[54];
  assign all_PE_occupancy[55:55] = PE_rc__is_occupied[55];
  assign all_PE_occupancy[56:56] = PE_rc__is_occupied[56];
  assign all_PE_occupancy[57:57] = PE_rc__is_occupied[57];
  assign all_PE_occupancy[58:58] = PE_rc__is_occupied[58];
  assign all_PE_occupancy[59:59] = PE_rc__is_occupied[59];
  assign all_PE_occupancy[60:60] = PE_rc__is_occupied[60];
  assign all_PE_occupancy[61:61] = PE_rc__is_occupied[61];
  assign all_PE_occupancy[62:62] = PE_rc__is_occupied[62];
  assign all_PE_occupancy[63:63] = PE_rc__is_occupied[63];
  assign is_cfg_done = delayed_all_CE_done__out;
  assign is_wen = xminion_req_msg.wen;

endmodule


// PyMTL Component CGRACore Definition
// Full name: CGRACore__xcel_params_CGRAParams: base_addr_bound:16384, base_addr_register:0, base_addr_scratchpad:256, cfg_nwords:1, cfg_type:<class 'pymtl3.datatypes.bits_import.Bits32'>, data_width:32, enable_FP:True, me_cfg_type:<class 'types.MEConfigMsg_8x8'>, mul_cycles:0, ncols:8, nrows:8, nspads:4, num_remote_masters:4, pe_cfg_type:<class 'types.PEConfigMsg_8x8'>, remote_master_addr_width:28, remote_master_data_width_factor:1, rf_nregs:2, spad_data_width:32, spad_mask_size:0, spad_num_entries:1024, trace_verbosity:0
// At /work/global/pp482/cgra/src/cgra/CGRACore.py

module CGRACore__e7b85fc84228c577
(
  input  logic [0:0] clk ,
  output logic [0:0] is_calc_done ,
  input  logic [0:0] reset ,
  output logic [0:0] spad_masters__req__en [0:15],
  output CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 spad_masters__req__msg [0:15],
  input logic [0:0] spad_masters__req__rdy [0:15],
  input logic [0:0] spad_masters__resp__en [0:15],
  input CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 spad_masters__resp__msg [0:15],
  output logic [0:0] spad_masters__resp__rdy [0:15],
  input logic [0:0] xcel_minion__req__en ,
  input CgraXcelReqMsg__wen_1__addr_14__data_32 xcel_minion__req__msg ,
  output logic [0:0] xcel_minion__req__rdy ,
  output logic [0:0] xcel_minion__resp__en ,
  output CgraXcelRespMsg__wen_1__addr_14__data_32 xcel_minion__resp__msg ,
  input logic [0:0] xcel_minion__resp__rdy 
);
  //-------------------------------------------------------------
  // Component ctrl
  //-------------------------------------------------------------

  logic [0:0] ctrl__CSR_wen;
  logic [0:0] ctrl__cfg_init;
  logic [0:0] ctrl__clk;
  logic [0:0] ctrl__is_calc;
  logic [0:0] ctrl__is_calc_done;
  logic [0:0] ctrl__is_calc_go;
  logic [0:0] ctrl__is_calc_go_transaction;
  logic [0:0] ctrl__is_cfg;
  logic [0:0] ctrl__is_cfg_done;
  logic [0:0] ctrl__is_cfg_go;
  logic [0:0] ctrl__is_cfg_go_transaction;
  logic [0:0] ctrl__is_wen;
  logic [0:0] ctrl__reset;
  logic [0:0] ctrl__xminion_req_en;
  logic [0:0] ctrl__xminion_req_rdy;
  logic [0:0] ctrl__xminion_resp_en;
  logic [0:0] ctrl__xminion_resp_rdy;

  CGRACoreCtrl__e7b85fc84228c577 ctrl
  (
    .CSR_wen( ctrl__CSR_wen ),
    .cfg_init( ctrl__cfg_init ),
    .clk( ctrl__clk ),
    .is_calc( ctrl__is_calc ),
    .is_calc_done( ctrl__is_calc_done ),
    .is_calc_go( ctrl__is_calc_go ),
    .is_calc_go_transaction( ctrl__is_calc_go_transaction ),
    .is_cfg( ctrl__is_cfg ),
    .is_cfg_done( ctrl__is_cfg_done ),
    .is_cfg_go( ctrl__is_cfg_go ),
    .is_cfg_go_transaction( ctrl__is_cfg_go_transaction ),
    .is_wen( ctrl__is_wen ),
    .reset( ctrl__reset ),
    .xminion_req_en( ctrl__xminion_req_en ),
    .xminion_req_rdy( ctrl__xminion_req_rdy ),
    .xminion_resp_en( ctrl__xminion_resp_en ),
    .xminion_resp_rdy( ctrl__xminion_resp_rdy )
  );

  //-------------------------------------------------------------
  // End of component ctrl
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component dpath
  //-------------------------------------------------------------

  logic [0:0] dpath__CSR_wen;
  logic [0:0] dpath__cfg_init;
  logic [0:0] dpath__clk;
  logic [0:0] dpath__is_calc;
  logic [0:0] dpath__is_calc_done;
  logic [0:0] dpath__is_calc_go;
  logic [0:0] dpath__is_calc_go_transaction;
  logic [0:0] dpath__is_cfg;
  logic [0:0] dpath__is_cfg_done;
  logic [0:0] dpath__is_cfg_go;
  logic [0:0] dpath__is_cfg_go_transaction;
  logic [0:0] dpath__is_wen;
  logic [0:0] dpath__reset;
  CgraXcelReqMsg__wen_1__addr_14__data_32 dpath__xminion_req_msg;
  CgraXcelRespMsg__wen_1__addr_14__data_32 dpath__xminion_resp_msg;
  logic [0:0] dpath__spad_masters__req__en [0:15];
  CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 dpath__spad_masters__req__msg [0:15];
  logic [0:0] dpath__spad_masters__req__rdy [0:15];
  logic [0:0] dpath__spad_masters__resp__en [0:15];
  CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 dpath__spad_masters__resp__msg [0:15];
  logic [0:0] dpath__spad_masters__resp__rdy [0:15];

  CGRACoreDpath__e7b85fc84228c577 dpath
  (
    .CSR_wen( dpath__CSR_wen ),
    .cfg_init( dpath__cfg_init ),
    .clk( dpath__clk ),
    .is_calc( dpath__is_calc ),
    .is_calc_done( dpath__is_calc_done ),
    .is_calc_go( dpath__is_calc_go ),
    .is_calc_go_transaction( dpath__is_calc_go_transaction ),
    .is_cfg( dpath__is_cfg ),
    .is_cfg_done( dpath__is_cfg_done ),
    .is_cfg_go( dpath__is_cfg_go ),
    .is_cfg_go_transaction( dpath__is_cfg_go_transaction ),
    .is_wen( dpath__is_wen ),
    .reset( dpath__reset ),
    .xminion_req_msg( dpath__xminion_req_msg ),
    .xminion_resp_msg( dpath__xminion_resp_msg ),
    .spad_masters__req__en( dpath__spad_masters__req__en ),
    .spad_masters__req__msg( dpath__spad_masters__req__msg ),
    .spad_masters__req__rdy( dpath__spad_masters__req__rdy ),
    .spad_masters__resp__en( dpath__spad_masters__resp__en ),
    .spad_masters__resp__msg( dpath__spad_masters__resp__msg ),
    .spad_masters__resp__rdy( dpath__spad_masters__resp__rdy )
  );

  //-------------------------------------------------------------
  // End of component dpath
  //-------------------------------------------------------------

  assign ctrl__clk = clk;
  assign ctrl__reset = reset;
  assign dpath__clk = clk;
  assign dpath__reset = reset;
  assign ctrl__xminion_req_en = xcel_minion__req__en;
  assign xcel_minion__req__rdy = ctrl__xminion_req_rdy;
  assign dpath__xminion_req_msg = xcel_minion__req__msg;
  assign xcel_minion__resp__en = ctrl__xminion_resp_en;
  assign ctrl__xminion_resp_rdy = xcel_minion__resp__rdy;
  assign xcel_minion__resp__msg = dpath__xminion_resp_msg;
  assign spad_masters__req__en[0] = dpath__spad_masters__req__en[0];
  assign spad_masters__req__msg[0] = dpath__spad_masters__req__msg[0];
  assign dpath__spad_masters__req__rdy[0] = spad_masters__req__rdy[0];
  assign dpath__spad_masters__resp__en[0] = spad_masters__resp__en[0];
  assign dpath__spad_masters__resp__msg[0] = spad_masters__resp__msg[0];
  assign spad_masters__resp__rdy[0] = dpath__spad_masters__resp__rdy[0];
  assign spad_masters__req__en[1] = dpath__spad_masters__req__en[1];
  assign spad_masters__req__msg[1] = dpath__spad_masters__req__msg[1];
  assign dpath__spad_masters__req__rdy[1] = spad_masters__req__rdy[1];
  assign dpath__spad_masters__resp__en[1] = spad_masters__resp__en[1];
  assign dpath__spad_masters__resp__msg[1] = spad_masters__resp__msg[1];
  assign spad_masters__resp__rdy[1] = dpath__spad_masters__resp__rdy[1];
  assign spad_masters__req__en[2] = dpath__spad_masters__req__en[2];
  assign spad_masters__req__msg[2] = dpath__spad_masters__req__msg[2];
  assign dpath__spad_masters__req__rdy[2] = spad_masters__req__rdy[2];
  assign dpath__spad_masters__resp__en[2] = spad_masters__resp__en[2];
  assign dpath__spad_masters__resp__msg[2] = spad_masters__resp__msg[2];
  assign spad_masters__resp__rdy[2] = dpath__spad_masters__resp__rdy[2];
  assign spad_masters__req__en[3] = dpath__spad_masters__req__en[3];
  assign spad_masters__req__msg[3] = dpath__spad_masters__req__msg[3];
  assign dpath__spad_masters__req__rdy[3] = spad_masters__req__rdy[3];
  assign dpath__spad_masters__resp__en[3] = spad_masters__resp__en[3];
  assign dpath__spad_masters__resp__msg[3] = spad_masters__resp__msg[3];
  assign spad_masters__resp__rdy[3] = dpath__spad_masters__resp__rdy[3];
  assign spad_masters__req__en[4] = dpath__spad_masters__req__en[4];
  assign spad_masters__req__msg[4] = dpath__spad_masters__req__msg[4];
  assign dpath__spad_masters__req__rdy[4] = spad_masters__req__rdy[4];
  assign dpath__spad_masters__resp__en[4] = spad_masters__resp__en[4];
  assign dpath__spad_masters__resp__msg[4] = spad_masters__resp__msg[4];
  assign spad_masters__resp__rdy[4] = dpath__spad_masters__resp__rdy[4];
  assign spad_masters__req__en[5] = dpath__spad_masters__req__en[5];
  assign spad_masters__req__msg[5] = dpath__spad_masters__req__msg[5];
  assign dpath__spad_masters__req__rdy[5] = spad_masters__req__rdy[5];
  assign dpath__spad_masters__resp__en[5] = spad_masters__resp__en[5];
  assign dpath__spad_masters__resp__msg[5] = spad_masters__resp__msg[5];
  assign spad_masters__resp__rdy[5] = dpath__spad_masters__resp__rdy[5];
  assign spad_masters__req__en[6] = dpath__spad_masters__req__en[6];
  assign spad_masters__req__msg[6] = dpath__spad_masters__req__msg[6];
  assign dpath__spad_masters__req__rdy[6] = spad_masters__req__rdy[6];
  assign dpath__spad_masters__resp__en[6] = spad_masters__resp__en[6];
  assign dpath__spad_masters__resp__msg[6] = spad_masters__resp__msg[6];
  assign spad_masters__resp__rdy[6] = dpath__spad_masters__resp__rdy[6];
  assign spad_masters__req__en[7] = dpath__spad_masters__req__en[7];
  assign spad_masters__req__msg[7] = dpath__spad_masters__req__msg[7];
  assign dpath__spad_masters__req__rdy[7] = spad_masters__req__rdy[7];
  assign dpath__spad_masters__resp__en[7] = spad_masters__resp__en[7];
  assign dpath__spad_masters__resp__msg[7] = spad_masters__resp__msg[7];
  assign spad_masters__resp__rdy[7] = dpath__spad_masters__resp__rdy[7];
  assign spad_masters__req__en[8] = dpath__spad_masters__req__en[8];
  assign spad_masters__req__msg[8] = dpath__spad_masters__req__msg[8];
  assign dpath__spad_masters__req__rdy[8] = spad_masters__req__rdy[8];
  assign dpath__spad_masters__resp__en[8] = spad_masters__resp__en[8];
  assign dpath__spad_masters__resp__msg[8] = spad_masters__resp__msg[8];
  assign spad_masters__resp__rdy[8] = dpath__spad_masters__resp__rdy[8];
  assign spad_masters__req__en[9] = dpath__spad_masters__req__en[9];
  assign spad_masters__req__msg[9] = dpath__spad_masters__req__msg[9];
  assign dpath__spad_masters__req__rdy[9] = spad_masters__req__rdy[9];
  assign dpath__spad_masters__resp__en[9] = spad_masters__resp__en[9];
  assign dpath__spad_masters__resp__msg[9] = spad_masters__resp__msg[9];
  assign spad_masters__resp__rdy[9] = dpath__spad_masters__resp__rdy[9];
  assign spad_masters__req__en[10] = dpath__spad_masters__req__en[10];
  assign spad_masters__req__msg[10] = dpath__spad_masters__req__msg[10];
  assign dpath__spad_masters__req__rdy[10] = spad_masters__req__rdy[10];
  assign dpath__spad_masters__resp__en[10] = spad_masters__resp__en[10];
  assign dpath__spad_masters__resp__msg[10] = spad_masters__resp__msg[10];
  assign spad_masters__resp__rdy[10] = dpath__spad_masters__resp__rdy[10];
  assign spad_masters__req__en[11] = dpath__spad_masters__req__en[11];
  assign spad_masters__req__msg[11] = dpath__spad_masters__req__msg[11];
  assign dpath__spad_masters__req__rdy[11] = spad_masters__req__rdy[11];
  assign dpath__spad_masters__resp__en[11] = spad_masters__resp__en[11];
  assign dpath__spad_masters__resp__msg[11] = spad_masters__resp__msg[11];
  assign spad_masters__resp__rdy[11] = dpath__spad_masters__resp__rdy[11];
  assign spad_masters__req__en[12] = dpath__spad_masters__req__en[12];
  assign spad_masters__req__msg[12] = dpath__spad_masters__req__msg[12];
  assign dpath__spad_masters__req__rdy[12] = spad_masters__req__rdy[12];
  assign dpath__spad_masters__resp__en[12] = spad_masters__resp__en[12];
  assign dpath__spad_masters__resp__msg[12] = spad_masters__resp__msg[12];
  assign spad_masters__resp__rdy[12] = dpath__spad_masters__resp__rdy[12];
  assign spad_masters__req__en[13] = dpath__spad_masters__req__en[13];
  assign spad_masters__req__msg[13] = dpath__spad_masters__req__msg[13];
  assign dpath__spad_masters__req__rdy[13] = spad_masters__req__rdy[13];
  assign dpath__spad_masters__resp__en[13] = spad_masters__resp__en[13];
  assign dpath__spad_masters__resp__msg[13] = spad_masters__resp__msg[13];
  assign spad_masters__resp__rdy[13] = dpath__spad_masters__resp__rdy[13];
  assign spad_masters__req__en[14] = dpath__spad_masters__req__en[14];
  assign spad_masters__req__msg[14] = dpath__spad_masters__req__msg[14];
  assign dpath__spad_masters__req__rdy[14] = spad_masters__req__rdy[14];
  assign dpath__spad_masters__resp__en[14] = spad_masters__resp__en[14];
  assign dpath__spad_masters__resp__msg[14] = spad_masters__resp__msg[14];
  assign spad_masters__resp__rdy[14] = dpath__spad_masters__resp__rdy[14];
  assign spad_masters__req__en[15] = dpath__spad_masters__req__en[15];
  assign spad_masters__req__msg[15] = dpath__spad_masters__req__msg[15];
  assign dpath__spad_masters__req__rdy[15] = spad_masters__req__rdy[15];
  assign dpath__spad_masters__resp__en[15] = spad_masters__resp__en[15];
  assign dpath__spad_masters__resp__msg[15] = spad_masters__resp__msg[15];
  assign spad_masters__resp__rdy[15] = dpath__spad_masters__resp__rdy[15];
  assign ctrl__is_cfg_go_transaction = dpath__is_cfg_go_transaction;
  assign ctrl__is_calc_go_transaction = dpath__is_calc_go_transaction;
  assign ctrl__is_cfg_done = dpath__is_cfg_done;
  assign ctrl__is_calc_done = dpath__is_calc_done;
  assign ctrl__is_wen = dpath__is_wen;
  assign dpath__is_cfg = ctrl__is_cfg;
  assign dpath__is_calc = ctrl__is_calc;
  assign dpath__cfg_init = ctrl__cfg_init;
  assign dpath__CSR_wen = ctrl__CSR_wen;
  assign is_calc_done = dpath__is_calc_done;

endmodule


// PyMTL Component MemMasterToSramAdapter Definition
// Full name: MemMasterToSramAdapter__Req_CgraPerBankMemReqMsg__wen_1__addr_10__data_32__opaque_7__Resp_CgraPerBankMemRespMsg__wen_1__addr_10__data_32__opaque_7__data_width_32__num_entries_1024__mask_size_0
// At /work/global/pp482/cgra/src/misc/MemMasterToSramAdapter.py

module MemMasterToSramAdapter__394405fa592d30bd
(
  input  logic [0:0] clk ,
  output logic [9:0] idx ,
  input  logic [31:0] rdata ,
  input  logic [0:0] reset ,
  output logic [0:0] type_ ,
  output logic [0:0] val ,
  output logic [31:0] wdata ,
  input logic [0:0] minion__req__en ,
  input CgraPerBankMemReqMsg__wen_1__addr_10__data_32__opaque_7 minion__req__msg ,
  output logic [0:0] minion__req__rdy ,
  output logic [0:0] minion__resp__en ,
  output CgraPerBankMemRespMsg__wen_1__addr_10__data_32__opaque_7 minion__resp__msg ,
  input logic [0:0] minion__resp__rdy 
);
  logic [9:0] reg_req_addr;
  logic [6:0] reg_req_opaque;
  logic [0:0] reg_req_wen;
  logic [0:0] resp_val;

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/misc/MemMasterToSramAdapter.py:49
  // s.minion.resp.en //= lambda: s.minion.resp.rdy & s.resp_val
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_scratchpad_banks_0__adapter_minion_resp_en
    minion__resp__en = minion__resp__rdy & resp_val;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/misc/MemMasterToSramAdapter.py:42
  // s.val   //= lambda: s.minion.req.en & s.minion.req.rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_scratchpad_banks_0__adapter_val
    val = minion__req__en & minion__req__rdy;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/misc/MemMasterToSramAdapter.py:61
  // @update_ff
  // def register_req():
  //   s.reg_req_wen <<= s.minion.req.msg.wen
  //   s.reg_req_addr <<= s.minion.req.msg.addr
  //   s.reg_req_opaque <<= s.minion.req.msg.opaque
  
  always_ff @(posedge clk) begin : register_req
    reg_req_wen <= minion__req__msg.wen;
    reg_req_addr <= minion__req__msg.addr;
    reg_req_opaque <= minion__req__msg.opaque;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/misc/MemMasterToSramAdapter.py:56
  // @update_ff
  // def resp_val_upblk():
  //   # Read response will come out in the next cycle
  //   s.resp_val <<= s.val
  
  always_ff @(posedge clk) begin : resp_val_upblk
    resp_val <= val;
  end

  assign minion__req__rdy = 1'd1;
  assign type_ = minion__req__msg.wen;
  assign idx = minion__req__msg.addr;
  assign wdata = minion__req__msg.data;
  assign minion__resp__msg.wen = reg_req_wen;
  assign minion__resp__msg.addr = reg_req_addr;
  assign minion__resp__msg.opaque = reg_req_opaque;
  assign minion__resp__msg.data = rdata;

endmodule


// PyMTL Component SramGenericPRTL Definition
// At /work/global/pp482/cgra/src/sram/SramGenericPRTL.py

module SramGenericPRTL__data_nbits_32__num_entries_1024
(
  input  logic [9:0] A1 ,
  input  logic [0:0] CE1 ,
  input  logic [0:0] CSB1 ,
  input  logic [31:0] I1 ,
  output logic [31:0] O1 ,
  input  logic [0:0] OEB1 ,
  input  logic [0:0] WEB1 ,
  input  logic [0:0] clk ,
  input  logic [0:0] reset 
);
  logic [31:0] dout;
  logic [31:0] ram [0:1023];

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/sram/SramGenericPRTL.py:46
  // @update
  // def comb_logic():
  //   if ~s.OEB1:
  //     s.O1 @= s.dout
  //   else:
  //     s.O1 @= 0
  
  always_comb begin : comb_logic
    if ( ~OEB1 ) begin
      O1 = dout;
    end
    else
      O1 = 32'd0;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/sram/SramGenericPRTL.py:39
  // @update_ff
  // def read_logic():
  //   if ~s.CSB1 & s.WEB1:
  //     s.dout <<= s.ram[ s.A1 ]
  //   else:
  //     s.dout <<= 0
  
  always_ff @(posedge clk) begin : read_logic
    if ( ( ~CSB1 ) & WEB1 ) begin
      dout <= ram[A1];
    end
    else
      dout <= 32'd0;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/sram/SramGenericPRTL.py:55
  // @update_ff
  // def write_logic():
  //   if (~s.CSB1) & (~s.WEB1):
  //     s.ram[s.A1] <<= s.I1
  
  always_ff @(posedge clk) begin : write_logic
    if ( ( ~CSB1 ) & ( ~WEB1 ) ) begin
      ram[A1] <= I1;
    end
  end

endmodule


// PyMTL Component SramRTL Definition
// At /work/global/pp482/cgra/src/sram/SramRTL.py

module SramRTL__data_nbits_32__num_entries_1024__mask_size_0
(
  input  logic [0:0] clk ,
  input  logic [9:0] port0_idx ,
  output logic [31:0] port0_rdata ,
  input  logic [0:0] port0_type ,
  input  logic [0:0] port0_val ,
  input  logic [31:0] port0_wdata ,
  input  logic [0:0] reset 
);
  logic [0:0] port0_type_bar;
  logic [0:0] port0_val_bar;
  //-------------------------------------------------------------
  // Component sram
  //-------------------------------------------------------------

  logic [9:0] sram__A1;
  logic [0:0] sram__CE1;
  logic [0:0] sram__CSB1;
  logic [31:0] sram__I1;
  logic [31:0] sram__O1;
  logic [0:0] sram__OEB1;
  logic [0:0] sram__WEB1;
  logic [0:0] sram__clk;
  logic [0:0] sram__reset;

  SramGenericPRTL__data_nbits_32__num_entries_1024 sram
  (
    .A1( sram__A1 ),
    .CE1( sram__CE1 ),
    .CSB1( sram__CSB1 ),
    .I1( sram__I1 ),
    .O1( sram__O1 ),
    .OEB1( sram__OEB1 ),
    .WEB1( sram__WEB1 ),
    .clk( sram__clk ),
    .reset( sram__reset )
  );

  //-------------------------------------------------------------
  // End of component sram
  //-------------------------------------------------------------

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/sram/SramPRTL.py:84
  // s.port0_type_bar //= lambda: ~s.port0_type
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_scratchpad_banks_0__sram_port0_type_bar
    port0_type_bar = ~port0_type;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/sram/SramPRTL.py:58
  // s.port0_val_bar  //= lambda: ~s.port0_val
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_scratchpad_banks_0__sram_port0_val_bar
    port0_val_bar = ~port0_val;
  end

  assign sram__clk = clk;
  assign sram__reset = reset;
  assign sram__CE1 = clk;
  assign sram__CSB1 = port0_val_bar;
  assign sram__OEB1 = 1'd0;
  assign sram__WEB1 = port0_type_bar;
  assign sram__A1 = port0_idx;
  assign sram__I1 = port0_wdata;
  assign port0_rdata = sram__O1;

endmodule


// PyMTL Component ScratchpadBank Definition
// Full name: ScratchpadBank__Req_CgraPerBankMemReqMsg__wen_1__addr_10__data_32__opaque_7__Resp_CgraPerBankMemRespMsg__wen_1__addr_10__data_32__opaque_7__data_width_32__num_entries_per_bank_1024__mask_size_0
// At /work/global/pp482/cgra/src/scratchpad/ScratchpadBank.py

module ScratchpadBank__30b2d19dd8e6a420
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  input logic [0:0] minion__req__en ,
  input CgraPerBankMemReqMsg__wen_1__addr_10__data_32__opaque_7 minion__req__msg ,
  output logic [0:0] minion__req__rdy ,
  output logic [0:0] minion__resp__en ,
  output CgraPerBankMemRespMsg__wen_1__addr_10__data_32__opaque_7 minion__resp__msg ,
  input logic [0:0] minion__resp__rdy 
);
  //-------------------------------------------------------------
  // Component adapter
  //-------------------------------------------------------------

  logic [0:0] adapter__clk;
  logic [9:0] adapter__idx;
  logic [31:0] adapter__rdata;
  logic [0:0] adapter__reset;
  logic [0:0] adapter__type_;
  logic [0:0] adapter__val;
  logic [31:0] adapter__wdata;
  logic [0:0] adapter__minion__req__en;
  CgraPerBankMemReqMsg__wen_1__addr_10__data_32__opaque_7 adapter__minion__req__msg;
  logic [0:0] adapter__minion__req__rdy;
  logic [0:0] adapter__minion__resp__en;
  CgraPerBankMemRespMsg__wen_1__addr_10__data_32__opaque_7 adapter__minion__resp__msg;
  logic [0:0] adapter__minion__resp__rdy;

  MemMasterToSramAdapter__394405fa592d30bd adapter
  (
    .clk( adapter__clk ),
    .idx( adapter__idx ),
    .rdata( adapter__rdata ),
    .reset( adapter__reset ),
    .type_( adapter__type_ ),
    .val( adapter__val ),
    .wdata( adapter__wdata ),
    .minion__req__en( adapter__minion__req__en ),
    .minion__req__msg( adapter__minion__req__msg ),
    .minion__req__rdy( adapter__minion__req__rdy ),
    .minion__resp__en( adapter__minion__resp__en ),
    .minion__resp__msg( adapter__minion__resp__msg ),
    .minion__resp__rdy( adapter__minion__resp__rdy )
  );

  //-------------------------------------------------------------
  // End of component adapter
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component sram
  //-------------------------------------------------------------

  logic [0:0] sram__clk;
  logic [9:0] sram__port0_idx;
  logic [31:0] sram__port0_rdata;
  logic [0:0] sram__port0_type;
  logic [0:0] sram__port0_val;
  logic [31:0] sram__port0_wdata;
  logic [0:0] sram__reset;

  SramRTL__data_nbits_32__num_entries_1024__mask_size_0 sram
  (
    .clk( sram__clk ),
    .port0_idx( sram__port0_idx ),
    .port0_rdata( sram__port0_rdata ),
    .port0_type( sram__port0_type ),
    .port0_val( sram__port0_val ),
    .port0_wdata( sram__port0_wdata ),
    .reset( sram__reset )
  );

  //-------------------------------------------------------------
  // End of component sram
  //-------------------------------------------------------------

  assign adapter__clk = clk;
  assign adapter__reset = reset;
  assign sram__clk = clk;
  assign sram__reset = reset;
  assign adapter__minion__req__en = minion__req__en;
  assign adapter__minion__req__msg = minion__req__msg;
  assign minion__req__rdy = adapter__minion__req__rdy;
  assign minion__resp__en = adapter__minion__resp__en;
  assign minion__resp__msg = adapter__minion__resp__msg;
  assign adapter__minion__resp__rdy = minion__resp__rdy;
  assign sram__port0_val = adapter__val;
  assign sram__port0_type = adapter__type_;
  assign sram__port0_idx = adapter__idx;
  assign sram__port0_wdata = adapter__wdata;
  assign adapter__rdata = sram__port0_rdata;

endmodule


// PyMTL Component Scratchpad Definition
// Full name: Scratchpad__num_mem_minions_4__Req_CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7__Resp_CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7__data_width_32__num_entries_per_bank_1024__mask_size_0
// At /work/global/pp482/cgra/src/scratchpad/Scratchpad.py

module Scratchpad__c6176239b846ec0a
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  input logic [0:0] minion__req__en [0:3],
  input CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 minion__req__msg [0:3],
  output logic [0:0] minion__req__rdy [0:3],
  output logic [0:0] minion__resp__en [0:3],
  output CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 minion__resp__msg [0:3],
  input logic [0:0] minion__resp__rdy [0:3]
);
  //-------------------------------------------------------------
  // Component banks[0:3]
  //-------------------------------------------------------------

  logic [0:0] banks__clk [0:3];
  logic [0:0] banks__reset [0:3];
  logic [0:0] banks__minion__req__en [0:3];
  CgraPerBankMemReqMsg__wen_1__addr_10__data_32__opaque_7 banks__minion__req__msg [0:3];
  logic [0:0] banks__minion__req__rdy [0:3];
  logic [0:0] banks__minion__resp__en [0:3];
  CgraPerBankMemRespMsg__wen_1__addr_10__data_32__opaque_7 banks__minion__resp__msg [0:3];
  logic [0:0] banks__minion__resp__rdy [0:3];

  ScratchpadBank__30b2d19dd8e6a420 banks__0
  (
    .clk( banks__clk[0] ),
    .reset( banks__reset[0] ),
    .minion__req__en( banks__minion__req__en[0] ),
    .minion__req__msg( banks__minion__req__msg[0] ),
    .minion__req__rdy( banks__minion__req__rdy[0] ),
    .minion__resp__en( banks__minion__resp__en[0] ),
    .minion__resp__msg( banks__minion__resp__msg[0] ),
    .minion__resp__rdy( banks__minion__resp__rdy[0] )
  );

  ScratchpadBank__30b2d19dd8e6a420 banks__1
  (
    .clk( banks__clk[1] ),
    .reset( banks__reset[1] ),
    .minion__req__en( banks__minion__req__en[1] ),
    .minion__req__msg( banks__minion__req__msg[1] ),
    .minion__req__rdy( banks__minion__req__rdy[1] ),
    .minion__resp__en( banks__minion__resp__en[1] ),
    .minion__resp__msg( banks__minion__resp__msg[1] ),
    .minion__resp__rdy( banks__minion__resp__rdy[1] )
  );

  ScratchpadBank__30b2d19dd8e6a420 banks__2
  (
    .clk( banks__clk[2] ),
    .reset( banks__reset[2] ),
    .minion__req__en( banks__minion__req__en[2] ),
    .minion__req__msg( banks__minion__req__msg[2] ),
    .minion__req__rdy( banks__minion__req__rdy[2] ),
    .minion__resp__en( banks__minion__resp__en[2] ),
    .minion__resp__msg( banks__minion__resp__msg[2] ),
    .minion__resp__rdy( banks__minion__resp__rdy[2] )
  );

  ScratchpadBank__30b2d19dd8e6a420 banks__3
  (
    .clk( banks__clk[3] ),
    .reset( banks__reset[3] ),
    .minion__req__en( banks__minion__req__en[3] ),
    .minion__req__msg( banks__minion__req__msg[3] ),
    .minion__req__rdy( banks__minion__req__rdy[3] ),
    .minion__resp__en( banks__minion__resp__en[3] ),
    .minion__resp__msg( banks__minion__resp__msg[3] ),
    .minion__resp__rdy( banks__minion__resp__rdy[3] )
  );

  //-------------------------------------------------------------
  // End of component banks[0:3]
  //-------------------------------------------------------------

  assign banks__clk[0] = clk;
  assign banks__reset[0] = reset;
  assign banks__clk[1] = clk;
  assign banks__reset[1] = reset;
  assign banks__clk[2] = clk;
  assign banks__reset[2] = reset;
  assign banks__clk[3] = clk;
  assign banks__reset[3] = reset;
  assign banks__minion__req__en[0] = minion__req__en[0];
  assign minion__req__rdy[0] = banks__minion__req__rdy[0];
  assign banks__minion__req__msg[0].wen = minion__req__msg[0].wen;
  assign banks__minion__req__msg[0].addr = minion__req__msg[0].addr[13:4];
  assign banks__minion__req__msg[0].data = minion__req__msg[0].data;
  assign banks__minion__req__msg[0].opaque = minion__req__msg[0].opaque;
  assign minion__resp__en[0] = banks__minion__resp__en[0];
  assign banks__minion__resp__rdy[0] = minion__resp__rdy[0];
  assign minion__resp__msg[0].wen = banks__minion__resp__msg[0].wen;
  assign minion__resp__msg[0].addr[13:4] = banks__minion__resp__msg[0].addr;
  assign minion__resp__msg[0].addr[3:0] = 4'd0;
  assign minion__resp__msg[0].data = banks__minion__resp__msg[0].data;
  assign minion__resp__msg[0].opaque = banks__minion__resp__msg[0].opaque;
  assign banks__minion__req__en[1] = minion__req__en[1];
  assign minion__req__rdy[1] = banks__minion__req__rdy[1];
  assign banks__minion__req__msg[1].wen = minion__req__msg[1].wen;
  assign banks__minion__req__msg[1].addr = minion__req__msg[1].addr[13:4];
  assign banks__minion__req__msg[1].data = minion__req__msg[1].data;
  assign banks__minion__req__msg[1].opaque = minion__req__msg[1].opaque;
  assign minion__resp__en[1] = banks__minion__resp__en[1];
  assign banks__minion__resp__rdy[1] = minion__resp__rdy[1];
  assign minion__resp__msg[1].wen = banks__minion__resp__msg[1].wen;
  assign minion__resp__msg[1].addr[13:4] = banks__minion__resp__msg[1].addr;
  assign minion__resp__msg[1].addr[3:0] = 4'd1;
  assign minion__resp__msg[1].data = banks__minion__resp__msg[1].data;
  assign minion__resp__msg[1].opaque = banks__minion__resp__msg[1].opaque;
  assign banks__minion__req__en[2] = minion__req__en[2];
  assign minion__req__rdy[2] = banks__minion__req__rdy[2];
  assign banks__minion__req__msg[2].wen = minion__req__msg[2].wen;
  assign banks__minion__req__msg[2].addr = minion__req__msg[2].addr[13:4];
  assign banks__minion__req__msg[2].data = minion__req__msg[2].data;
  assign banks__minion__req__msg[2].opaque = minion__req__msg[2].opaque;
  assign minion__resp__en[2] = banks__minion__resp__en[2];
  assign banks__minion__resp__rdy[2] = minion__resp__rdy[2];
  assign minion__resp__msg[2].wen = banks__minion__resp__msg[2].wen;
  assign minion__resp__msg[2].addr[13:4] = banks__minion__resp__msg[2].addr;
  assign minion__resp__msg[2].addr[3:0] = 4'd2;
  assign minion__resp__msg[2].data = banks__minion__resp__msg[2].data;
  assign minion__resp__msg[2].opaque = banks__minion__resp__msg[2].opaque;
  assign banks__minion__req__en[3] = minion__req__en[3];
  assign minion__req__rdy[3] = banks__minion__req__rdy[3];
  assign banks__minion__req__msg[3].wen = minion__req__msg[3].wen;
  assign banks__minion__req__msg[3].addr = minion__req__msg[3].addr[13:4];
  assign banks__minion__req__msg[3].data = minion__req__msg[3].data;
  assign banks__minion__req__msg[3].opaque = minion__req__msg[3].opaque;
  assign minion__resp__en[3] = banks__minion__resp__en[3];
  assign banks__minion__resp__rdy[3] = minion__resp__rdy[3];
  assign minion__resp__msg[3].wen = banks__minion__resp__msg[3].wen;
  assign minion__resp__msg[3].addr[13:4] = banks__minion__resp__msg[3].addr;
  assign minion__resp__msg[3].addr[3:0] = 4'd3;
  assign minion__resp__msg[3].data = banks__minion__resp__msg[3].data;
  assign minion__resp__msg[3].opaque = banks__minion__resp__msg[3].opaque;

endmodule


// PyMTL Component ScratchpadDstLogic Definition
// Full name: ScratchpadDstLogic__Req_CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7__SrcT_Bits5__DstT_Bits2
// At /work/global/pp482/cgra/src/cgra/CGRAXcelDpath.py

module ScratchpadDstLogic__1bc6dabd503ca2d2
(
  input  logic [0:0] clk ,
  input  CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 in_req ,
  input  logic [4:0] in_src_id ,
  output logic [1:0] out_dst ,
  input  logic [0:0] reset 
);

  assign out_dst = in_req.addr[3:2];

endmodule


// PyMTL Component Table Definition
// At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/Table.py

module Table__EntryType_Bits7__num_entries_4
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  input logic [0:0] alloc__en  ,
  input logic [6:0] alloc__msg  ,
  output logic [0:0] alloc__rdy  ,
  output logic [1:0] alloc__ret  ,
  input logic [0:0] dealloc__en  ,
  input logic [1:0] dealloc__msg  ,
  output logic [0:0] dealloc__rdy  ,
  output logic [6:0] dealloc__ret  
);
  localparam logic [2:0] __const__num_entries_at_up_entry_r_valid_r  = 3'd4;
  localparam logic [2:0] __const__num_entries_at_up_avail_idx_next  = 3'd4;
  localparam logic [2:0] __const__num_entries_at_up_avail_idx_r  = 3'd4;
  localparam logic [2:0] __const__num_entries_at_up_alloc_rdy  = 3'd4;
  localparam logic [2:0] __const__num_entries_at_up_dealloc_rdy  = 3'd4;
  logic [1:0] avail_idx_next;
  logic [1:0] avail_idx_r;
  logic [6:0] entry_r [0:3];
  logic [0:0] valid_r [0:3];

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/Table.py:89
  // s.dealloc.ret //= lambda: s.entry_r[ s.dealloc.msg ] if s.valid_r[ s.dealloc.msg ] else EntryType(-1)
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_0__opq_table_dealloc_ret
    dealloc__ret = valid_r[dealloc__msg] ? entry_r[dealloc__msg] : 7'd127;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/Table.py:72
  // @update
  // def up_alloc_rdy():
  //   s.alloc.rdy @= 0
  //   for i in range( num_entries ):
  //     if ~s.valid_r[i]:
  //       s.alloc.rdy @= 1
  
  always_comb begin : up_alloc_rdy
    alloc__rdy = 1'd0;
    for ( int unsigned i = 1'd0; i < 3'( __const__num_entries_at_up_alloc_rdy ); i += 1'd1 )
      if ( ~valid_r[2'(i)] ) begin
        alloc__rdy = 1'd1;
      end
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/Table.py:51
  // @update
  // def up_avail_idx_next():
  //   s.avail_idx_next @= 0
  //   for i in range( num_entries ):
  //     if ~s.valid_r[i] & \
  //        ~( s.alloc.en & ( s.avail_idx_r == i ) ) | \
  //        s.dealloc.en & ( s.dealloc.msg == i ):
  //       s.avail_idx_next @= i
  
  always_comb begin : up_avail_idx_next
    avail_idx_next = 2'd0;
    for ( int unsigned i = 1'd0; i < 3'( __const__num_entries_at_up_avail_idx_next ); i += 1'd1 )
      if ( ( ( ~valid_r[2'(i)] ) & ( ~( alloc__en & ( avail_idx_r == 2'(i) ) ) ) ) | ( dealloc__en & ( dealloc__msg == 2'(i) ) ) ) begin
        avail_idx_next = 2'(i);
      end
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/Table.py:79
  // @update
  // def up_dealloc_rdy():
  //   s.dealloc.rdy @= 0
  //   for i in range( num_entries ):
  //     if s.valid_r[i]:
  //       s.dealloc.rdy @= 1
  
  always_comb begin : up_dealloc_rdy
    dealloc__rdy = 1'd0;
    for ( int unsigned i = 1'd0; i < 3'( __const__num_entries_at_up_dealloc_rdy ); i += 1'd1 )
      if ( valid_r[2'(i)] ) begin
        dealloc__rdy = 1'd1;
      end
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/Table.py:60
  // @update_ff
  // def up_avail_idx_r():
  //   if s.reset:
  //     s.avail_idx_r <<= IdxType(num_entries-1)
  //   else:
  //     s.avail_idx_r <<= s.avail_idx_next
  
  always_ff @(posedge clk) begin : up_avail_idx_r
    if ( reset ) begin
      avail_idx_r <= 2'd3;
    end
    else
      avail_idx_r <= avail_idx_next;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/Table.py:37
  // @update_ff
  // def up_entry_r_valid_r():
  //   if s.reset:
  //     # s.valid_r <<= BitsN(0)
  //     for i in range( num_entries ):
  //       s.valid_r[i] <<= 0
  //   else:
  //     if s.alloc.en:
  //       s.entry_r[ s.avail_idx_r ] <<= s.alloc.msg
  //       s.valid_r[ s.avail_idx_r ] <<= 1
  // 
  //     if s.dealloc.en:
  //       s.valid_r[ s.dealloc.msg ] <<= 0
  
  always_ff @(posedge clk) begin : up_entry_r_valid_r
    if ( reset ) begin
      for ( int unsigned i = 1'd0; i < 3'( __const__num_entries_at_up_entry_r_valid_r ); i += 1'd1 )
        valid_r[2'(i)] <= 1'd0;
    end
    else begin
      if ( alloc__en ) begin
        entry_r[avail_idx_r] <= alloc__msg;
        valid_r[avail_idx_r] <= 1'd1;
      end
      if ( dealloc__en ) begin
        valid_r[dealloc__msg] <= 1'd0;
      end
    end
  end

  assign alloc__ret = avail_idx_r;

endmodule


// PyMTL Component ReqAdapter Definition
// Full name: ReqAdapter__Req_CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7__Resp_CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7__id_0__num_requesters_17__num_responders_4__max_req_in_flight_4__DstLogicT_ScratchpadDstLogic
// At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py

module ReqAdapter__fd54650417570394
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  output logic [0:0] master__req__en ,
  output mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd master__req__msg ,
  input logic [0:0] master__req__rdy ,
  input logic [0:0] master__resp__en ,
  input mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 master__resp__msg ,
  output logic [0:0] master__resp__rdy ,
  input logic [0:0] minion__req__en ,
  input CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 minion__req__msg ,
  output logic [0:0] minion__req__rdy ,
  output logic [0:0] minion__resp__en ,
  output CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 minion__resp__msg ,
  input logic [0:0] minion__resp__rdy 
);
  localparam logic [0:0] __const__id_at_up_master_req_msg  = 1'd0;
  //-------------------------------------------------------------
  // Component dst_logic
  //-------------------------------------------------------------

  logic [0:0] dst_logic__clk;
  CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 dst_logic__in_req;
  logic [4:0] dst_logic__in_src_id;
  logic [1:0] dst_logic__out_dst;
  logic [0:0] dst_logic__reset;

  ScratchpadDstLogic__1bc6dabd503ca2d2 dst_logic
  (
    .clk( dst_logic__clk ),
    .in_req( dst_logic__in_req ),
    .in_src_id( dst_logic__in_src_id ),
    .out_dst( dst_logic__out_dst ),
    .reset( dst_logic__reset )
  );

  //-------------------------------------------------------------
  // End of component dst_logic
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component opq_table
  //-------------------------------------------------------------

  logic [0:0] opq_table__clk;
  logic [0:0] opq_table__reset;
  logic [0:0] opq_table__alloc__en;
  logic [6:0] opq_table__alloc__msg;
  logic [0:0] opq_table__alloc__rdy;
  logic [1:0] opq_table__alloc__ret;
  logic [0:0] opq_table__dealloc__en;
  logic [1:0] opq_table__dealloc__msg;
  logic [0:0] opq_table__dealloc__rdy;
  logic [6:0] opq_table__dealloc__ret;

  Table__EntryType_Bits7__num_entries_4 opq_table
  (
    .clk( opq_table__clk ),
    .reset( opq_table__reset ),
    .alloc__en( opq_table__alloc__en ),
    .alloc__msg( opq_table__alloc__msg ),
    .alloc__rdy( opq_table__alloc__rdy ),
    .alloc__ret( opq_table__alloc__ret ),
    .dealloc__en( opq_table__dealloc__en ),
    .dealloc__msg( opq_table__dealloc__msg ),
    .dealloc__rdy( opq_table__dealloc__rdy ),
    .dealloc__ret( opq_table__dealloc__ret )
  );

  //-------------------------------------------------------------
  // End of component opq_table
  //-------------------------------------------------------------

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:91
  // s.master.req.en   //= lambda: s.minion.req.en
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_0__master_req_en
    master__req__en = minion__req__en;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:92
  // s.master.resp.rdy //= lambda: s.minion.resp.rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_0__master_resp_rdy
    master__resp__rdy = minion__resp__rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:88
  // s.minion.req.rdy //= lambda: s.opq_table.alloc.rdy & s.master.req.rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_0__minion_req_rdy
    minion__req__rdy = opq_table__alloc__rdy & master__req__rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:89
  // s.minion.resp.en //= lambda: s.master.resp.en
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_0__minion_resp_en
    minion__resp__en = master__resp__en;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:94
  // @update
  // def up_master_req_msg():
  //   s.master.req.msg.dst @= s.dst_logic.out_dst
  //   s.master.req.msg.payload @= s.minion.req.msg
  //   s.master.req.msg.payload.opaque[ sl_src ] @= id
  //   s.master.req.msg.payload.opaque[ sl_idx ] @= s.opq_table.alloc.ret
  
  always_comb begin : up_master_req_msg
    master__req__msg.dst = dst_logic__out_dst;
    master__req__msg.payload = minion__req__msg;
    master__req__msg.payload.opaque[3'd4:3'd0] = 5'( __const__id_at_up_master_req_msg );
    master__req__msg.payload.opaque[3'd6:3'd5] = opq_table__alloc__ret;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:101
  // @update
  // def up_minion_resp_msg():
  //   s.minion.resp.msg @= s.master.resp.msg.payload
  //   s.minion.resp.msg.opaque @= s.opq_table.dealloc.ret
  
  always_comb begin : up_minion_resp_msg
    minion__resp__msg = master__resp__msg.payload;
    minion__resp__msg.opaque = opq_table__dealloc__ret;
  end

  assign opq_table__clk = clk;
  assign opq_table__reset = reset;
  assign opq_table__alloc__en = minion__req__en;
  assign opq_table__alloc__msg = minion__req__msg.opaque;
  assign opq_table__dealloc__en = master__resp__en;
  assign opq_table__dealloc__msg = master__resp__msg.payload.opaque[6:5];
  assign dst_logic__clk = clk;
  assign dst_logic__reset = reset;
  assign dst_logic__in_req = minion__req__msg;
  assign dst_logic__in_src_id = 5'd0;

endmodule


// PyMTL Component ReqAdapter Definition
// Full name: ReqAdapter__Req_CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7__Resp_CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7__id_10__num_requesters_17__num_responders_4__max_req_in_flight_4__DstLogicT_ScratchpadDstLogic
// At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py

module ReqAdapter__4aaa04dd88de17e9
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  output logic [0:0] master__req__en ,
  output mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd master__req__msg ,
  input logic [0:0] master__req__rdy ,
  input logic [0:0] master__resp__en ,
  input mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 master__resp__msg ,
  output logic [0:0] master__resp__rdy ,
  input logic [0:0] minion__req__en ,
  input CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 minion__req__msg ,
  output logic [0:0] minion__req__rdy ,
  output logic [0:0] minion__resp__en ,
  output CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 minion__resp__msg ,
  input logic [0:0] minion__resp__rdy 
);
  localparam logic [3:0] __const__id_at_up_master_req_msg  = 4'd10;
  //-------------------------------------------------------------
  // Component dst_logic
  //-------------------------------------------------------------

  logic [0:0] dst_logic__clk;
  CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 dst_logic__in_req;
  logic [4:0] dst_logic__in_src_id;
  logic [1:0] dst_logic__out_dst;
  logic [0:0] dst_logic__reset;

  ScratchpadDstLogic__1bc6dabd503ca2d2 dst_logic
  (
    .clk( dst_logic__clk ),
    .in_req( dst_logic__in_req ),
    .in_src_id( dst_logic__in_src_id ),
    .out_dst( dst_logic__out_dst ),
    .reset( dst_logic__reset )
  );

  //-------------------------------------------------------------
  // End of component dst_logic
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component opq_table
  //-------------------------------------------------------------

  logic [0:0] opq_table__clk;
  logic [0:0] opq_table__reset;
  logic [0:0] opq_table__alloc__en;
  logic [6:0] opq_table__alloc__msg;
  logic [0:0] opq_table__alloc__rdy;
  logic [1:0] opq_table__alloc__ret;
  logic [0:0] opq_table__dealloc__en;
  logic [1:0] opq_table__dealloc__msg;
  logic [0:0] opq_table__dealloc__rdy;
  logic [6:0] opq_table__dealloc__ret;

  Table__EntryType_Bits7__num_entries_4 opq_table
  (
    .clk( opq_table__clk ),
    .reset( opq_table__reset ),
    .alloc__en( opq_table__alloc__en ),
    .alloc__msg( opq_table__alloc__msg ),
    .alloc__rdy( opq_table__alloc__rdy ),
    .alloc__ret( opq_table__alloc__ret ),
    .dealloc__en( opq_table__dealloc__en ),
    .dealloc__msg( opq_table__dealloc__msg ),
    .dealloc__rdy( opq_table__dealloc__rdy ),
    .dealloc__ret( opq_table__dealloc__ret )
  );

  //-------------------------------------------------------------
  // End of component opq_table
  //-------------------------------------------------------------

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:91
  // s.master.req.en   //= lambda: s.minion.req.en
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_10__master_req_en
    master__req__en = minion__req__en;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:92
  // s.master.resp.rdy //= lambda: s.minion.resp.rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_10__master_resp_rdy
    master__resp__rdy = minion__resp__rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:88
  // s.minion.req.rdy //= lambda: s.opq_table.alloc.rdy & s.master.req.rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_10__minion_req_rdy
    minion__req__rdy = opq_table__alloc__rdy & master__req__rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:89
  // s.minion.resp.en //= lambda: s.master.resp.en
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_10__minion_resp_en
    minion__resp__en = master__resp__en;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:94
  // @update
  // def up_master_req_msg():
  //   s.master.req.msg.dst @= s.dst_logic.out_dst
  //   s.master.req.msg.payload @= s.minion.req.msg
  //   s.master.req.msg.payload.opaque[ sl_src ] @= id
  //   s.master.req.msg.payload.opaque[ sl_idx ] @= s.opq_table.alloc.ret
  
  always_comb begin : up_master_req_msg
    master__req__msg.dst = dst_logic__out_dst;
    master__req__msg.payload = minion__req__msg;
    master__req__msg.payload.opaque[3'd4:3'd0] = 5'( __const__id_at_up_master_req_msg );
    master__req__msg.payload.opaque[3'd6:3'd5] = opq_table__alloc__ret;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:101
  // @update
  // def up_minion_resp_msg():
  //   s.minion.resp.msg @= s.master.resp.msg.payload
  //   s.minion.resp.msg.opaque @= s.opq_table.dealloc.ret
  
  always_comb begin : up_minion_resp_msg
    minion__resp__msg = master__resp__msg.payload;
    minion__resp__msg.opaque = opq_table__dealloc__ret;
  end

  assign opq_table__clk = clk;
  assign opq_table__reset = reset;
  assign opq_table__alloc__en = minion__req__en;
  assign opq_table__alloc__msg = minion__req__msg.opaque;
  assign opq_table__dealloc__en = master__resp__en;
  assign opq_table__dealloc__msg = master__resp__msg.payload.opaque[6:5];
  assign dst_logic__clk = clk;
  assign dst_logic__reset = reset;
  assign dst_logic__in_req = minion__req__msg;
  assign dst_logic__in_src_id = 5'd10;

endmodule


// PyMTL Component ReqAdapter Definition
// Full name: ReqAdapter__Req_CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7__Resp_CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7__id_11__num_requesters_17__num_responders_4__max_req_in_flight_4__DstLogicT_ScratchpadDstLogic
// At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py

module ReqAdapter__b3a44120b57b6ffc
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  output logic [0:0] master__req__en ,
  output mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd master__req__msg ,
  input logic [0:0] master__req__rdy ,
  input logic [0:0] master__resp__en ,
  input mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 master__resp__msg ,
  output logic [0:0] master__resp__rdy ,
  input logic [0:0] minion__req__en ,
  input CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 minion__req__msg ,
  output logic [0:0] minion__req__rdy ,
  output logic [0:0] minion__resp__en ,
  output CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 minion__resp__msg ,
  input logic [0:0] minion__resp__rdy 
);
  localparam logic [3:0] __const__id_at_up_master_req_msg  = 4'd11;
  //-------------------------------------------------------------
  // Component dst_logic
  //-------------------------------------------------------------

  logic [0:0] dst_logic__clk;
  CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 dst_logic__in_req;
  logic [4:0] dst_logic__in_src_id;
  logic [1:0] dst_logic__out_dst;
  logic [0:0] dst_logic__reset;

  ScratchpadDstLogic__1bc6dabd503ca2d2 dst_logic
  (
    .clk( dst_logic__clk ),
    .in_req( dst_logic__in_req ),
    .in_src_id( dst_logic__in_src_id ),
    .out_dst( dst_logic__out_dst ),
    .reset( dst_logic__reset )
  );

  //-------------------------------------------------------------
  // End of component dst_logic
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component opq_table
  //-------------------------------------------------------------

  logic [0:0] opq_table__clk;
  logic [0:0] opq_table__reset;
  logic [0:0] opq_table__alloc__en;
  logic [6:0] opq_table__alloc__msg;
  logic [0:0] opq_table__alloc__rdy;
  logic [1:0] opq_table__alloc__ret;
  logic [0:0] opq_table__dealloc__en;
  logic [1:0] opq_table__dealloc__msg;
  logic [0:0] opq_table__dealloc__rdy;
  logic [6:0] opq_table__dealloc__ret;

  Table__EntryType_Bits7__num_entries_4 opq_table
  (
    .clk( opq_table__clk ),
    .reset( opq_table__reset ),
    .alloc__en( opq_table__alloc__en ),
    .alloc__msg( opq_table__alloc__msg ),
    .alloc__rdy( opq_table__alloc__rdy ),
    .alloc__ret( opq_table__alloc__ret ),
    .dealloc__en( opq_table__dealloc__en ),
    .dealloc__msg( opq_table__dealloc__msg ),
    .dealloc__rdy( opq_table__dealloc__rdy ),
    .dealloc__ret( opq_table__dealloc__ret )
  );

  //-------------------------------------------------------------
  // End of component opq_table
  //-------------------------------------------------------------

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:91
  // s.master.req.en   //= lambda: s.minion.req.en
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_11__master_req_en
    master__req__en = minion__req__en;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:92
  // s.master.resp.rdy //= lambda: s.minion.resp.rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_11__master_resp_rdy
    master__resp__rdy = minion__resp__rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:88
  // s.minion.req.rdy //= lambda: s.opq_table.alloc.rdy & s.master.req.rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_11__minion_req_rdy
    minion__req__rdy = opq_table__alloc__rdy & master__req__rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:89
  // s.minion.resp.en //= lambda: s.master.resp.en
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_11__minion_resp_en
    minion__resp__en = master__resp__en;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:94
  // @update
  // def up_master_req_msg():
  //   s.master.req.msg.dst @= s.dst_logic.out_dst
  //   s.master.req.msg.payload @= s.minion.req.msg
  //   s.master.req.msg.payload.opaque[ sl_src ] @= id
  //   s.master.req.msg.payload.opaque[ sl_idx ] @= s.opq_table.alloc.ret
  
  always_comb begin : up_master_req_msg
    master__req__msg.dst = dst_logic__out_dst;
    master__req__msg.payload = minion__req__msg;
    master__req__msg.payload.opaque[3'd4:3'd0] = 5'( __const__id_at_up_master_req_msg );
    master__req__msg.payload.opaque[3'd6:3'd5] = opq_table__alloc__ret;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:101
  // @update
  // def up_minion_resp_msg():
  //   s.minion.resp.msg @= s.master.resp.msg.payload
  //   s.minion.resp.msg.opaque @= s.opq_table.dealloc.ret
  
  always_comb begin : up_minion_resp_msg
    minion__resp__msg = master__resp__msg.payload;
    minion__resp__msg.opaque = opq_table__dealloc__ret;
  end

  assign opq_table__clk = clk;
  assign opq_table__reset = reset;
  assign opq_table__alloc__en = minion__req__en;
  assign opq_table__alloc__msg = minion__req__msg.opaque;
  assign opq_table__dealloc__en = master__resp__en;
  assign opq_table__dealloc__msg = master__resp__msg.payload.opaque[6:5];
  assign dst_logic__clk = clk;
  assign dst_logic__reset = reset;
  assign dst_logic__in_req = minion__req__msg;
  assign dst_logic__in_src_id = 5'd11;

endmodule


// PyMTL Component ReqAdapter Definition
// Full name: ReqAdapter__Req_CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7__Resp_CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7__id_12__num_requesters_17__num_responders_4__max_req_in_flight_4__DstLogicT_ScratchpadDstLogic
// At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py

module ReqAdapter__01becc7a5001b5c2
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  output logic [0:0] master__req__en ,
  output mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd master__req__msg ,
  input logic [0:0] master__req__rdy ,
  input logic [0:0] master__resp__en ,
  input mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 master__resp__msg ,
  output logic [0:0] master__resp__rdy ,
  input logic [0:0] minion__req__en ,
  input CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 minion__req__msg ,
  output logic [0:0] minion__req__rdy ,
  output logic [0:0] minion__resp__en ,
  output CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 minion__resp__msg ,
  input logic [0:0] minion__resp__rdy 
);
  localparam logic [3:0] __const__id_at_up_master_req_msg  = 4'd12;
  //-------------------------------------------------------------
  // Component dst_logic
  //-------------------------------------------------------------

  logic [0:0] dst_logic__clk;
  CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 dst_logic__in_req;
  logic [4:0] dst_logic__in_src_id;
  logic [1:0] dst_logic__out_dst;
  logic [0:0] dst_logic__reset;

  ScratchpadDstLogic__1bc6dabd503ca2d2 dst_logic
  (
    .clk( dst_logic__clk ),
    .in_req( dst_logic__in_req ),
    .in_src_id( dst_logic__in_src_id ),
    .out_dst( dst_logic__out_dst ),
    .reset( dst_logic__reset )
  );

  //-------------------------------------------------------------
  // End of component dst_logic
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component opq_table
  //-------------------------------------------------------------

  logic [0:0] opq_table__clk;
  logic [0:0] opq_table__reset;
  logic [0:0] opq_table__alloc__en;
  logic [6:0] opq_table__alloc__msg;
  logic [0:0] opq_table__alloc__rdy;
  logic [1:0] opq_table__alloc__ret;
  logic [0:0] opq_table__dealloc__en;
  logic [1:0] opq_table__dealloc__msg;
  logic [0:0] opq_table__dealloc__rdy;
  logic [6:0] opq_table__dealloc__ret;

  Table__EntryType_Bits7__num_entries_4 opq_table
  (
    .clk( opq_table__clk ),
    .reset( opq_table__reset ),
    .alloc__en( opq_table__alloc__en ),
    .alloc__msg( opq_table__alloc__msg ),
    .alloc__rdy( opq_table__alloc__rdy ),
    .alloc__ret( opq_table__alloc__ret ),
    .dealloc__en( opq_table__dealloc__en ),
    .dealloc__msg( opq_table__dealloc__msg ),
    .dealloc__rdy( opq_table__dealloc__rdy ),
    .dealloc__ret( opq_table__dealloc__ret )
  );

  //-------------------------------------------------------------
  // End of component opq_table
  //-------------------------------------------------------------

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:91
  // s.master.req.en   //= lambda: s.minion.req.en
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_12__master_req_en
    master__req__en = minion__req__en;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:92
  // s.master.resp.rdy //= lambda: s.minion.resp.rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_12__master_resp_rdy
    master__resp__rdy = minion__resp__rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:88
  // s.minion.req.rdy //= lambda: s.opq_table.alloc.rdy & s.master.req.rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_12__minion_req_rdy
    minion__req__rdy = opq_table__alloc__rdy & master__req__rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:89
  // s.minion.resp.en //= lambda: s.master.resp.en
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_12__minion_resp_en
    minion__resp__en = master__resp__en;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:94
  // @update
  // def up_master_req_msg():
  //   s.master.req.msg.dst @= s.dst_logic.out_dst
  //   s.master.req.msg.payload @= s.minion.req.msg
  //   s.master.req.msg.payload.opaque[ sl_src ] @= id
  //   s.master.req.msg.payload.opaque[ sl_idx ] @= s.opq_table.alloc.ret
  
  always_comb begin : up_master_req_msg
    master__req__msg.dst = dst_logic__out_dst;
    master__req__msg.payload = minion__req__msg;
    master__req__msg.payload.opaque[3'd4:3'd0] = 5'( __const__id_at_up_master_req_msg );
    master__req__msg.payload.opaque[3'd6:3'd5] = opq_table__alloc__ret;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:101
  // @update
  // def up_minion_resp_msg():
  //   s.minion.resp.msg @= s.master.resp.msg.payload
  //   s.minion.resp.msg.opaque @= s.opq_table.dealloc.ret
  
  always_comb begin : up_minion_resp_msg
    minion__resp__msg = master__resp__msg.payload;
    minion__resp__msg.opaque = opq_table__dealloc__ret;
  end

  assign opq_table__clk = clk;
  assign opq_table__reset = reset;
  assign opq_table__alloc__en = minion__req__en;
  assign opq_table__alloc__msg = minion__req__msg.opaque;
  assign opq_table__dealloc__en = master__resp__en;
  assign opq_table__dealloc__msg = master__resp__msg.payload.opaque[6:5];
  assign dst_logic__clk = clk;
  assign dst_logic__reset = reset;
  assign dst_logic__in_req = minion__req__msg;
  assign dst_logic__in_src_id = 5'd12;

endmodule


// PyMTL Component ReqAdapter Definition
// Full name: ReqAdapter__Req_CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7__Resp_CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7__id_13__num_requesters_17__num_responders_4__max_req_in_flight_4__DstLogicT_ScratchpadDstLogic
// At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py

module ReqAdapter__5fca60022a755d99
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  output logic [0:0] master__req__en ,
  output mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd master__req__msg ,
  input logic [0:0] master__req__rdy ,
  input logic [0:0] master__resp__en ,
  input mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 master__resp__msg ,
  output logic [0:0] master__resp__rdy ,
  input logic [0:0] minion__req__en ,
  input CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 minion__req__msg ,
  output logic [0:0] minion__req__rdy ,
  output logic [0:0] minion__resp__en ,
  output CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 minion__resp__msg ,
  input logic [0:0] minion__resp__rdy 
);
  localparam logic [3:0] __const__id_at_up_master_req_msg  = 4'd13;
  //-------------------------------------------------------------
  // Component dst_logic
  //-------------------------------------------------------------

  logic [0:0] dst_logic__clk;
  CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 dst_logic__in_req;
  logic [4:0] dst_logic__in_src_id;
  logic [1:0] dst_logic__out_dst;
  logic [0:0] dst_logic__reset;

  ScratchpadDstLogic__1bc6dabd503ca2d2 dst_logic
  (
    .clk( dst_logic__clk ),
    .in_req( dst_logic__in_req ),
    .in_src_id( dst_logic__in_src_id ),
    .out_dst( dst_logic__out_dst ),
    .reset( dst_logic__reset )
  );

  //-------------------------------------------------------------
  // End of component dst_logic
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component opq_table
  //-------------------------------------------------------------

  logic [0:0] opq_table__clk;
  logic [0:0] opq_table__reset;
  logic [0:0] opq_table__alloc__en;
  logic [6:0] opq_table__alloc__msg;
  logic [0:0] opq_table__alloc__rdy;
  logic [1:0] opq_table__alloc__ret;
  logic [0:0] opq_table__dealloc__en;
  logic [1:0] opq_table__dealloc__msg;
  logic [0:0] opq_table__dealloc__rdy;
  logic [6:0] opq_table__dealloc__ret;

  Table__EntryType_Bits7__num_entries_4 opq_table
  (
    .clk( opq_table__clk ),
    .reset( opq_table__reset ),
    .alloc__en( opq_table__alloc__en ),
    .alloc__msg( opq_table__alloc__msg ),
    .alloc__rdy( opq_table__alloc__rdy ),
    .alloc__ret( opq_table__alloc__ret ),
    .dealloc__en( opq_table__dealloc__en ),
    .dealloc__msg( opq_table__dealloc__msg ),
    .dealloc__rdy( opq_table__dealloc__rdy ),
    .dealloc__ret( opq_table__dealloc__ret )
  );

  //-------------------------------------------------------------
  // End of component opq_table
  //-------------------------------------------------------------

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:91
  // s.master.req.en   //= lambda: s.minion.req.en
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_13__master_req_en
    master__req__en = minion__req__en;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:92
  // s.master.resp.rdy //= lambda: s.minion.resp.rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_13__master_resp_rdy
    master__resp__rdy = minion__resp__rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:88
  // s.minion.req.rdy //= lambda: s.opq_table.alloc.rdy & s.master.req.rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_13__minion_req_rdy
    minion__req__rdy = opq_table__alloc__rdy & master__req__rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:89
  // s.minion.resp.en //= lambda: s.master.resp.en
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_13__minion_resp_en
    minion__resp__en = master__resp__en;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:94
  // @update
  // def up_master_req_msg():
  //   s.master.req.msg.dst @= s.dst_logic.out_dst
  //   s.master.req.msg.payload @= s.minion.req.msg
  //   s.master.req.msg.payload.opaque[ sl_src ] @= id
  //   s.master.req.msg.payload.opaque[ sl_idx ] @= s.opq_table.alloc.ret
  
  always_comb begin : up_master_req_msg
    master__req__msg.dst = dst_logic__out_dst;
    master__req__msg.payload = minion__req__msg;
    master__req__msg.payload.opaque[3'd4:3'd0] = 5'( __const__id_at_up_master_req_msg );
    master__req__msg.payload.opaque[3'd6:3'd5] = opq_table__alloc__ret;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:101
  // @update
  // def up_minion_resp_msg():
  //   s.minion.resp.msg @= s.master.resp.msg.payload
  //   s.minion.resp.msg.opaque @= s.opq_table.dealloc.ret
  
  always_comb begin : up_minion_resp_msg
    minion__resp__msg = master__resp__msg.payload;
    minion__resp__msg.opaque = opq_table__dealloc__ret;
  end

  assign opq_table__clk = clk;
  assign opq_table__reset = reset;
  assign opq_table__alloc__en = minion__req__en;
  assign opq_table__alloc__msg = minion__req__msg.opaque;
  assign opq_table__dealloc__en = master__resp__en;
  assign opq_table__dealloc__msg = master__resp__msg.payload.opaque[6:5];
  assign dst_logic__clk = clk;
  assign dst_logic__reset = reset;
  assign dst_logic__in_req = minion__req__msg;
  assign dst_logic__in_src_id = 5'd13;

endmodule


// PyMTL Component ReqAdapter Definition
// Full name: ReqAdapter__Req_CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7__Resp_CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7__id_14__num_requesters_17__num_responders_4__max_req_in_flight_4__DstLogicT_ScratchpadDstLogic
// At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py

module ReqAdapter__80e5324b4a2f795e
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  output logic [0:0] master__req__en ,
  output mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd master__req__msg ,
  input logic [0:0] master__req__rdy ,
  input logic [0:0] master__resp__en ,
  input mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 master__resp__msg ,
  output logic [0:0] master__resp__rdy ,
  input logic [0:0] minion__req__en ,
  input CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 minion__req__msg ,
  output logic [0:0] minion__req__rdy ,
  output logic [0:0] minion__resp__en ,
  output CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 minion__resp__msg ,
  input logic [0:0] minion__resp__rdy 
);
  localparam logic [3:0] __const__id_at_up_master_req_msg  = 4'd14;
  //-------------------------------------------------------------
  // Component dst_logic
  //-------------------------------------------------------------

  logic [0:0] dst_logic__clk;
  CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 dst_logic__in_req;
  logic [4:0] dst_logic__in_src_id;
  logic [1:0] dst_logic__out_dst;
  logic [0:0] dst_logic__reset;

  ScratchpadDstLogic__1bc6dabd503ca2d2 dst_logic
  (
    .clk( dst_logic__clk ),
    .in_req( dst_logic__in_req ),
    .in_src_id( dst_logic__in_src_id ),
    .out_dst( dst_logic__out_dst ),
    .reset( dst_logic__reset )
  );

  //-------------------------------------------------------------
  // End of component dst_logic
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component opq_table
  //-------------------------------------------------------------

  logic [0:0] opq_table__clk;
  logic [0:0] opq_table__reset;
  logic [0:0] opq_table__alloc__en;
  logic [6:0] opq_table__alloc__msg;
  logic [0:0] opq_table__alloc__rdy;
  logic [1:0] opq_table__alloc__ret;
  logic [0:0] opq_table__dealloc__en;
  logic [1:0] opq_table__dealloc__msg;
  logic [0:0] opq_table__dealloc__rdy;
  logic [6:0] opq_table__dealloc__ret;

  Table__EntryType_Bits7__num_entries_4 opq_table
  (
    .clk( opq_table__clk ),
    .reset( opq_table__reset ),
    .alloc__en( opq_table__alloc__en ),
    .alloc__msg( opq_table__alloc__msg ),
    .alloc__rdy( opq_table__alloc__rdy ),
    .alloc__ret( opq_table__alloc__ret ),
    .dealloc__en( opq_table__dealloc__en ),
    .dealloc__msg( opq_table__dealloc__msg ),
    .dealloc__rdy( opq_table__dealloc__rdy ),
    .dealloc__ret( opq_table__dealloc__ret )
  );

  //-------------------------------------------------------------
  // End of component opq_table
  //-------------------------------------------------------------

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:91
  // s.master.req.en   //= lambda: s.minion.req.en
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_14__master_req_en
    master__req__en = minion__req__en;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:92
  // s.master.resp.rdy //= lambda: s.minion.resp.rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_14__master_resp_rdy
    master__resp__rdy = minion__resp__rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:88
  // s.minion.req.rdy //= lambda: s.opq_table.alloc.rdy & s.master.req.rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_14__minion_req_rdy
    minion__req__rdy = opq_table__alloc__rdy & master__req__rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:89
  // s.minion.resp.en //= lambda: s.master.resp.en
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_14__minion_resp_en
    minion__resp__en = master__resp__en;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:94
  // @update
  // def up_master_req_msg():
  //   s.master.req.msg.dst @= s.dst_logic.out_dst
  //   s.master.req.msg.payload @= s.minion.req.msg
  //   s.master.req.msg.payload.opaque[ sl_src ] @= id
  //   s.master.req.msg.payload.opaque[ sl_idx ] @= s.opq_table.alloc.ret
  
  always_comb begin : up_master_req_msg
    master__req__msg.dst = dst_logic__out_dst;
    master__req__msg.payload = minion__req__msg;
    master__req__msg.payload.opaque[3'd4:3'd0] = 5'( __const__id_at_up_master_req_msg );
    master__req__msg.payload.opaque[3'd6:3'd5] = opq_table__alloc__ret;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:101
  // @update
  // def up_minion_resp_msg():
  //   s.minion.resp.msg @= s.master.resp.msg.payload
  //   s.minion.resp.msg.opaque @= s.opq_table.dealloc.ret
  
  always_comb begin : up_minion_resp_msg
    minion__resp__msg = master__resp__msg.payload;
    minion__resp__msg.opaque = opq_table__dealloc__ret;
  end

  assign opq_table__clk = clk;
  assign opq_table__reset = reset;
  assign opq_table__alloc__en = minion__req__en;
  assign opq_table__alloc__msg = minion__req__msg.opaque;
  assign opq_table__dealloc__en = master__resp__en;
  assign opq_table__dealloc__msg = master__resp__msg.payload.opaque[6:5];
  assign dst_logic__clk = clk;
  assign dst_logic__reset = reset;
  assign dst_logic__in_req = minion__req__msg;
  assign dst_logic__in_src_id = 5'd14;

endmodule


// PyMTL Component ReqAdapter Definition
// Full name: ReqAdapter__Req_CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7__Resp_CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7__id_15__num_requesters_17__num_responders_4__max_req_in_flight_4__DstLogicT_ScratchpadDstLogic
// At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py

module ReqAdapter__db11fe7fced03363
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  output logic [0:0] master__req__en ,
  output mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd master__req__msg ,
  input logic [0:0] master__req__rdy ,
  input logic [0:0] master__resp__en ,
  input mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 master__resp__msg ,
  output logic [0:0] master__resp__rdy ,
  input logic [0:0] minion__req__en ,
  input CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 minion__req__msg ,
  output logic [0:0] minion__req__rdy ,
  output logic [0:0] minion__resp__en ,
  output CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 minion__resp__msg ,
  input logic [0:0] minion__resp__rdy 
);
  localparam logic [3:0] __const__id_at_up_master_req_msg  = 4'd15;
  //-------------------------------------------------------------
  // Component dst_logic
  //-------------------------------------------------------------

  logic [0:0] dst_logic__clk;
  CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 dst_logic__in_req;
  logic [4:0] dst_logic__in_src_id;
  logic [1:0] dst_logic__out_dst;
  logic [0:0] dst_logic__reset;

  ScratchpadDstLogic__1bc6dabd503ca2d2 dst_logic
  (
    .clk( dst_logic__clk ),
    .in_req( dst_logic__in_req ),
    .in_src_id( dst_logic__in_src_id ),
    .out_dst( dst_logic__out_dst ),
    .reset( dst_logic__reset )
  );

  //-------------------------------------------------------------
  // End of component dst_logic
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component opq_table
  //-------------------------------------------------------------

  logic [0:0] opq_table__clk;
  logic [0:0] opq_table__reset;
  logic [0:0] opq_table__alloc__en;
  logic [6:0] opq_table__alloc__msg;
  logic [0:0] opq_table__alloc__rdy;
  logic [1:0] opq_table__alloc__ret;
  logic [0:0] opq_table__dealloc__en;
  logic [1:0] opq_table__dealloc__msg;
  logic [0:0] opq_table__dealloc__rdy;
  logic [6:0] opq_table__dealloc__ret;

  Table__EntryType_Bits7__num_entries_4 opq_table
  (
    .clk( opq_table__clk ),
    .reset( opq_table__reset ),
    .alloc__en( opq_table__alloc__en ),
    .alloc__msg( opq_table__alloc__msg ),
    .alloc__rdy( opq_table__alloc__rdy ),
    .alloc__ret( opq_table__alloc__ret ),
    .dealloc__en( opq_table__dealloc__en ),
    .dealloc__msg( opq_table__dealloc__msg ),
    .dealloc__rdy( opq_table__dealloc__rdy ),
    .dealloc__ret( opq_table__dealloc__ret )
  );

  //-------------------------------------------------------------
  // End of component opq_table
  //-------------------------------------------------------------

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:91
  // s.master.req.en   //= lambda: s.minion.req.en
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_15__master_req_en
    master__req__en = minion__req__en;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:92
  // s.master.resp.rdy //= lambda: s.minion.resp.rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_15__master_resp_rdy
    master__resp__rdy = minion__resp__rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:88
  // s.minion.req.rdy //= lambda: s.opq_table.alloc.rdy & s.master.req.rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_15__minion_req_rdy
    minion__req__rdy = opq_table__alloc__rdy & master__req__rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:89
  // s.minion.resp.en //= lambda: s.master.resp.en
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_15__minion_resp_en
    minion__resp__en = master__resp__en;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:94
  // @update
  // def up_master_req_msg():
  //   s.master.req.msg.dst @= s.dst_logic.out_dst
  //   s.master.req.msg.payload @= s.minion.req.msg
  //   s.master.req.msg.payload.opaque[ sl_src ] @= id
  //   s.master.req.msg.payload.opaque[ sl_idx ] @= s.opq_table.alloc.ret
  
  always_comb begin : up_master_req_msg
    master__req__msg.dst = dst_logic__out_dst;
    master__req__msg.payload = minion__req__msg;
    master__req__msg.payload.opaque[3'd4:3'd0] = 5'( __const__id_at_up_master_req_msg );
    master__req__msg.payload.opaque[3'd6:3'd5] = opq_table__alloc__ret;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:101
  // @update
  // def up_minion_resp_msg():
  //   s.minion.resp.msg @= s.master.resp.msg.payload
  //   s.minion.resp.msg.opaque @= s.opq_table.dealloc.ret
  
  always_comb begin : up_minion_resp_msg
    minion__resp__msg = master__resp__msg.payload;
    minion__resp__msg.opaque = opq_table__dealloc__ret;
  end

  assign opq_table__clk = clk;
  assign opq_table__reset = reset;
  assign opq_table__alloc__en = minion__req__en;
  assign opq_table__alloc__msg = minion__req__msg.opaque;
  assign opq_table__dealloc__en = master__resp__en;
  assign opq_table__dealloc__msg = master__resp__msg.payload.opaque[6:5];
  assign dst_logic__clk = clk;
  assign dst_logic__reset = reset;
  assign dst_logic__in_req = minion__req__msg;
  assign dst_logic__in_src_id = 5'd15;

endmodule


// PyMTL Component ReqAdapter Definition
// Full name: ReqAdapter__Req_CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7__Resp_CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7__id_16__num_requesters_17__num_responders_4__max_req_in_flight_4__DstLogicT_ScratchpadDstLogic
// At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py

module ReqAdapter__78550895ef6730eb
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  output logic [0:0] master__req__en ,
  output mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd master__req__msg ,
  input logic [0:0] master__req__rdy ,
  input logic [0:0] master__resp__en ,
  input mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 master__resp__msg ,
  output logic [0:0] master__resp__rdy ,
  input logic [0:0] minion__req__en ,
  input CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 minion__req__msg ,
  output logic [0:0] minion__req__rdy ,
  output logic [0:0] minion__resp__en ,
  output CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 minion__resp__msg ,
  input logic [0:0] minion__resp__rdy 
);
  localparam logic [4:0] __const__id_at_up_master_req_msg  = 5'd16;
  //-------------------------------------------------------------
  // Component dst_logic
  //-------------------------------------------------------------

  logic [0:0] dst_logic__clk;
  CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 dst_logic__in_req;
  logic [4:0] dst_logic__in_src_id;
  logic [1:0] dst_logic__out_dst;
  logic [0:0] dst_logic__reset;

  ScratchpadDstLogic__1bc6dabd503ca2d2 dst_logic
  (
    .clk( dst_logic__clk ),
    .in_req( dst_logic__in_req ),
    .in_src_id( dst_logic__in_src_id ),
    .out_dst( dst_logic__out_dst ),
    .reset( dst_logic__reset )
  );

  //-------------------------------------------------------------
  // End of component dst_logic
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component opq_table
  //-------------------------------------------------------------

  logic [0:0] opq_table__clk;
  logic [0:0] opq_table__reset;
  logic [0:0] opq_table__alloc__en;
  logic [6:0] opq_table__alloc__msg;
  logic [0:0] opq_table__alloc__rdy;
  logic [1:0] opq_table__alloc__ret;
  logic [0:0] opq_table__dealloc__en;
  logic [1:0] opq_table__dealloc__msg;
  logic [0:0] opq_table__dealloc__rdy;
  logic [6:0] opq_table__dealloc__ret;

  Table__EntryType_Bits7__num_entries_4 opq_table
  (
    .clk( opq_table__clk ),
    .reset( opq_table__reset ),
    .alloc__en( opq_table__alloc__en ),
    .alloc__msg( opq_table__alloc__msg ),
    .alloc__rdy( opq_table__alloc__rdy ),
    .alloc__ret( opq_table__alloc__ret ),
    .dealloc__en( opq_table__dealloc__en ),
    .dealloc__msg( opq_table__dealloc__msg ),
    .dealloc__rdy( opq_table__dealloc__rdy ),
    .dealloc__ret( opq_table__dealloc__ret )
  );

  //-------------------------------------------------------------
  // End of component opq_table
  //-------------------------------------------------------------

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:91
  // s.master.req.en   //= lambda: s.minion.req.en
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_16__master_req_en
    master__req__en = minion__req__en;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:92
  // s.master.resp.rdy //= lambda: s.minion.resp.rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_16__master_resp_rdy
    master__resp__rdy = minion__resp__rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:88
  // s.minion.req.rdy //= lambda: s.opq_table.alloc.rdy & s.master.req.rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_16__minion_req_rdy
    minion__req__rdy = opq_table__alloc__rdy & master__req__rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:89
  // s.minion.resp.en //= lambda: s.master.resp.en
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_16__minion_resp_en
    minion__resp__en = master__resp__en;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:94
  // @update
  // def up_master_req_msg():
  //   s.master.req.msg.dst @= s.dst_logic.out_dst
  //   s.master.req.msg.payload @= s.minion.req.msg
  //   s.master.req.msg.payload.opaque[ sl_src ] @= id
  //   s.master.req.msg.payload.opaque[ sl_idx ] @= s.opq_table.alloc.ret
  
  always_comb begin : up_master_req_msg
    master__req__msg.dst = dst_logic__out_dst;
    master__req__msg.payload = minion__req__msg;
    master__req__msg.payload.opaque[3'd4:3'd0] = 5'( __const__id_at_up_master_req_msg );
    master__req__msg.payload.opaque[3'd6:3'd5] = opq_table__alloc__ret;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:101
  // @update
  // def up_minion_resp_msg():
  //   s.minion.resp.msg @= s.master.resp.msg.payload
  //   s.minion.resp.msg.opaque @= s.opq_table.dealloc.ret
  
  always_comb begin : up_minion_resp_msg
    minion__resp__msg = master__resp__msg.payload;
    minion__resp__msg.opaque = opq_table__dealloc__ret;
  end

  assign opq_table__clk = clk;
  assign opq_table__reset = reset;
  assign opq_table__alloc__en = minion__req__en;
  assign opq_table__alloc__msg = minion__req__msg.opaque;
  assign opq_table__dealloc__en = master__resp__en;
  assign opq_table__dealloc__msg = master__resp__msg.payload.opaque[6:5];
  assign dst_logic__clk = clk;
  assign dst_logic__reset = reset;
  assign dst_logic__in_req = minion__req__msg;
  assign dst_logic__in_src_id = 5'd16;

endmodule


// PyMTL Component ReqAdapter Definition
// Full name: ReqAdapter__Req_CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7__Resp_CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7__id_1__num_requesters_17__num_responders_4__max_req_in_flight_4__DstLogicT_ScratchpadDstLogic
// At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py

module ReqAdapter__d35006938139cb70
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  output logic [0:0] master__req__en ,
  output mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd master__req__msg ,
  input logic [0:0] master__req__rdy ,
  input logic [0:0] master__resp__en ,
  input mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 master__resp__msg ,
  output logic [0:0] master__resp__rdy ,
  input logic [0:0] minion__req__en ,
  input CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 minion__req__msg ,
  output logic [0:0] minion__req__rdy ,
  output logic [0:0] minion__resp__en ,
  output CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 minion__resp__msg ,
  input logic [0:0] minion__resp__rdy 
);
  localparam logic [0:0] __const__id_at_up_master_req_msg  = 1'd1;
  //-------------------------------------------------------------
  // Component dst_logic
  //-------------------------------------------------------------

  logic [0:0] dst_logic__clk;
  CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 dst_logic__in_req;
  logic [4:0] dst_logic__in_src_id;
  logic [1:0] dst_logic__out_dst;
  logic [0:0] dst_logic__reset;

  ScratchpadDstLogic__1bc6dabd503ca2d2 dst_logic
  (
    .clk( dst_logic__clk ),
    .in_req( dst_logic__in_req ),
    .in_src_id( dst_logic__in_src_id ),
    .out_dst( dst_logic__out_dst ),
    .reset( dst_logic__reset )
  );

  //-------------------------------------------------------------
  // End of component dst_logic
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component opq_table
  //-------------------------------------------------------------

  logic [0:0] opq_table__clk;
  logic [0:0] opq_table__reset;
  logic [0:0] opq_table__alloc__en;
  logic [6:0] opq_table__alloc__msg;
  logic [0:0] opq_table__alloc__rdy;
  logic [1:0] opq_table__alloc__ret;
  logic [0:0] opq_table__dealloc__en;
  logic [1:0] opq_table__dealloc__msg;
  logic [0:0] opq_table__dealloc__rdy;
  logic [6:0] opq_table__dealloc__ret;

  Table__EntryType_Bits7__num_entries_4 opq_table
  (
    .clk( opq_table__clk ),
    .reset( opq_table__reset ),
    .alloc__en( opq_table__alloc__en ),
    .alloc__msg( opq_table__alloc__msg ),
    .alloc__rdy( opq_table__alloc__rdy ),
    .alloc__ret( opq_table__alloc__ret ),
    .dealloc__en( opq_table__dealloc__en ),
    .dealloc__msg( opq_table__dealloc__msg ),
    .dealloc__rdy( opq_table__dealloc__rdy ),
    .dealloc__ret( opq_table__dealloc__ret )
  );

  //-------------------------------------------------------------
  // End of component opq_table
  //-------------------------------------------------------------

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:91
  // s.master.req.en   //= lambda: s.minion.req.en
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_1__master_req_en
    master__req__en = minion__req__en;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:92
  // s.master.resp.rdy //= lambda: s.minion.resp.rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_1__master_resp_rdy
    master__resp__rdy = minion__resp__rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:88
  // s.minion.req.rdy //= lambda: s.opq_table.alloc.rdy & s.master.req.rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_1__minion_req_rdy
    minion__req__rdy = opq_table__alloc__rdy & master__req__rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:89
  // s.minion.resp.en //= lambda: s.master.resp.en
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_1__minion_resp_en
    minion__resp__en = master__resp__en;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:94
  // @update
  // def up_master_req_msg():
  //   s.master.req.msg.dst @= s.dst_logic.out_dst
  //   s.master.req.msg.payload @= s.minion.req.msg
  //   s.master.req.msg.payload.opaque[ sl_src ] @= id
  //   s.master.req.msg.payload.opaque[ sl_idx ] @= s.opq_table.alloc.ret
  
  always_comb begin : up_master_req_msg
    master__req__msg.dst = dst_logic__out_dst;
    master__req__msg.payload = minion__req__msg;
    master__req__msg.payload.opaque[3'd4:3'd0] = 5'( __const__id_at_up_master_req_msg );
    master__req__msg.payload.opaque[3'd6:3'd5] = opq_table__alloc__ret;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:101
  // @update
  // def up_minion_resp_msg():
  //   s.minion.resp.msg @= s.master.resp.msg.payload
  //   s.minion.resp.msg.opaque @= s.opq_table.dealloc.ret
  
  always_comb begin : up_minion_resp_msg
    minion__resp__msg = master__resp__msg.payload;
    minion__resp__msg.opaque = opq_table__dealloc__ret;
  end

  assign opq_table__clk = clk;
  assign opq_table__reset = reset;
  assign opq_table__alloc__en = minion__req__en;
  assign opq_table__alloc__msg = minion__req__msg.opaque;
  assign opq_table__dealloc__en = master__resp__en;
  assign opq_table__dealloc__msg = master__resp__msg.payload.opaque[6:5];
  assign dst_logic__clk = clk;
  assign dst_logic__reset = reset;
  assign dst_logic__in_req = minion__req__msg;
  assign dst_logic__in_src_id = 5'd1;

endmodule


// PyMTL Component ReqAdapter Definition
// Full name: ReqAdapter__Req_CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7__Resp_CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7__id_2__num_requesters_17__num_responders_4__max_req_in_flight_4__DstLogicT_ScratchpadDstLogic
// At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py

module ReqAdapter__8af44fd2bb63f5ca
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  output logic [0:0] master__req__en ,
  output mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd master__req__msg ,
  input logic [0:0] master__req__rdy ,
  input logic [0:0] master__resp__en ,
  input mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 master__resp__msg ,
  output logic [0:0] master__resp__rdy ,
  input logic [0:0] minion__req__en ,
  input CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 minion__req__msg ,
  output logic [0:0] minion__req__rdy ,
  output logic [0:0] minion__resp__en ,
  output CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 minion__resp__msg ,
  input logic [0:0] minion__resp__rdy 
);
  localparam logic [1:0] __const__id_at_up_master_req_msg  = 2'd2;
  //-------------------------------------------------------------
  // Component dst_logic
  //-------------------------------------------------------------

  logic [0:0] dst_logic__clk;
  CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 dst_logic__in_req;
  logic [4:0] dst_logic__in_src_id;
  logic [1:0] dst_logic__out_dst;
  logic [0:0] dst_logic__reset;

  ScratchpadDstLogic__1bc6dabd503ca2d2 dst_logic
  (
    .clk( dst_logic__clk ),
    .in_req( dst_logic__in_req ),
    .in_src_id( dst_logic__in_src_id ),
    .out_dst( dst_logic__out_dst ),
    .reset( dst_logic__reset )
  );

  //-------------------------------------------------------------
  // End of component dst_logic
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component opq_table
  //-------------------------------------------------------------

  logic [0:0] opq_table__clk;
  logic [0:0] opq_table__reset;
  logic [0:0] opq_table__alloc__en;
  logic [6:0] opq_table__alloc__msg;
  logic [0:0] opq_table__alloc__rdy;
  logic [1:0] opq_table__alloc__ret;
  logic [0:0] opq_table__dealloc__en;
  logic [1:0] opq_table__dealloc__msg;
  logic [0:0] opq_table__dealloc__rdy;
  logic [6:0] opq_table__dealloc__ret;

  Table__EntryType_Bits7__num_entries_4 opq_table
  (
    .clk( opq_table__clk ),
    .reset( opq_table__reset ),
    .alloc__en( opq_table__alloc__en ),
    .alloc__msg( opq_table__alloc__msg ),
    .alloc__rdy( opq_table__alloc__rdy ),
    .alloc__ret( opq_table__alloc__ret ),
    .dealloc__en( opq_table__dealloc__en ),
    .dealloc__msg( opq_table__dealloc__msg ),
    .dealloc__rdy( opq_table__dealloc__rdy ),
    .dealloc__ret( opq_table__dealloc__ret )
  );

  //-------------------------------------------------------------
  // End of component opq_table
  //-------------------------------------------------------------

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:91
  // s.master.req.en   //= lambda: s.minion.req.en
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_2__master_req_en
    master__req__en = minion__req__en;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:92
  // s.master.resp.rdy //= lambda: s.minion.resp.rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_2__master_resp_rdy
    master__resp__rdy = minion__resp__rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:88
  // s.minion.req.rdy //= lambda: s.opq_table.alloc.rdy & s.master.req.rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_2__minion_req_rdy
    minion__req__rdy = opq_table__alloc__rdy & master__req__rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:89
  // s.minion.resp.en //= lambda: s.master.resp.en
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_2__minion_resp_en
    minion__resp__en = master__resp__en;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:94
  // @update
  // def up_master_req_msg():
  //   s.master.req.msg.dst @= s.dst_logic.out_dst
  //   s.master.req.msg.payload @= s.minion.req.msg
  //   s.master.req.msg.payload.opaque[ sl_src ] @= id
  //   s.master.req.msg.payload.opaque[ sl_idx ] @= s.opq_table.alloc.ret
  
  always_comb begin : up_master_req_msg
    master__req__msg.dst = dst_logic__out_dst;
    master__req__msg.payload = minion__req__msg;
    master__req__msg.payload.opaque[3'd4:3'd0] = 5'( __const__id_at_up_master_req_msg );
    master__req__msg.payload.opaque[3'd6:3'd5] = opq_table__alloc__ret;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:101
  // @update
  // def up_minion_resp_msg():
  //   s.minion.resp.msg @= s.master.resp.msg.payload
  //   s.minion.resp.msg.opaque @= s.opq_table.dealloc.ret
  
  always_comb begin : up_minion_resp_msg
    minion__resp__msg = master__resp__msg.payload;
    minion__resp__msg.opaque = opq_table__dealloc__ret;
  end

  assign opq_table__clk = clk;
  assign opq_table__reset = reset;
  assign opq_table__alloc__en = minion__req__en;
  assign opq_table__alloc__msg = minion__req__msg.opaque;
  assign opq_table__dealloc__en = master__resp__en;
  assign opq_table__dealloc__msg = master__resp__msg.payload.opaque[6:5];
  assign dst_logic__clk = clk;
  assign dst_logic__reset = reset;
  assign dst_logic__in_req = minion__req__msg;
  assign dst_logic__in_src_id = 5'd2;

endmodule


// PyMTL Component ReqAdapter Definition
// Full name: ReqAdapter__Req_CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7__Resp_CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7__id_3__num_requesters_17__num_responders_4__max_req_in_flight_4__DstLogicT_ScratchpadDstLogic
// At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py

module ReqAdapter__97e8a9cd31de8392
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  output logic [0:0] master__req__en ,
  output mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd master__req__msg ,
  input logic [0:0] master__req__rdy ,
  input logic [0:0] master__resp__en ,
  input mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 master__resp__msg ,
  output logic [0:0] master__resp__rdy ,
  input logic [0:0] minion__req__en ,
  input CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 minion__req__msg ,
  output logic [0:0] minion__req__rdy ,
  output logic [0:0] minion__resp__en ,
  output CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 minion__resp__msg ,
  input logic [0:0] minion__resp__rdy 
);
  localparam logic [1:0] __const__id_at_up_master_req_msg  = 2'd3;
  //-------------------------------------------------------------
  // Component dst_logic
  //-------------------------------------------------------------

  logic [0:0] dst_logic__clk;
  CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 dst_logic__in_req;
  logic [4:0] dst_logic__in_src_id;
  logic [1:0] dst_logic__out_dst;
  logic [0:0] dst_logic__reset;

  ScratchpadDstLogic__1bc6dabd503ca2d2 dst_logic
  (
    .clk( dst_logic__clk ),
    .in_req( dst_logic__in_req ),
    .in_src_id( dst_logic__in_src_id ),
    .out_dst( dst_logic__out_dst ),
    .reset( dst_logic__reset )
  );

  //-------------------------------------------------------------
  // End of component dst_logic
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component opq_table
  //-------------------------------------------------------------

  logic [0:0] opq_table__clk;
  logic [0:0] opq_table__reset;
  logic [0:0] opq_table__alloc__en;
  logic [6:0] opq_table__alloc__msg;
  logic [0:0] opq_table__alloc__rdy;
  logic [1:0] opq_table__alloc__ret;
  logic [0:0] opq_table__dealloc__en;
  logic [1:0] opq_table__dealloc__msg;
  logic [0:0] opq_table__dealloc__rdy;
  logic [6:0] opq_table__dealloc__ret;

  Table__EntryType_Bits7__num_entries_4 opq_table
  (
    .clk( opq_table__clk ),
    .reset( opq_table__reset ),
    .alloc__en( opq_table__alloc__en ),
    .alloc__msg( opq_table__alloc__msg ),
    .alloc__rdy( opq_table__alloc__rdy ),
    .alloc__ret( opq_table__alloc__ret ),
    .dealloc__en( opq_table__dealloc__en ),
    .dealloc__msg( opq_table__dealloc__msg ),
    .dealloc__rdy( opq_table__dealloc__rdy ),
    .dealloc__ret( opq_table__dealloc__ret )
  );

  //-------------------------------------------------------------
  // End of component opq_table
  //-------------------------------------------------------------

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:91
  // s.master.req.en   //= lambda: s.minion.req.en
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_3__master_req_en
    master__req__en = minion__req__en;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:92
  // s.master.resp.rdy //= lambda: s.minion.resp.rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_3__master_resp_rdy
    master__resp__rdy = minion__resp__rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:88
  // s.minion.req.rdy //= lambda: s.opq_table.alloc.rdy & s.master.req.rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_3__minion_req_rdy
    minion__req__rdy = opq_table__alloc__rdy & master__req__rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:89
  // s.minion.resp.en //= lambda: s.master.resp.en
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_3__minion_resp_en
    minion__resp__en = master__resp__en;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:94
  // @update
  // def up_master_req_msg():
  //   s.master.req.msg.dst @= s.dst_logic.out_dst
  //   s.master.req.msg.payload @= s.minion.req.msg
  //   s.master.req.msg.payload.opaque[ sl_src ] @= id
  //   s.master.req.msg.payload.opaque[ sl_idx ] @= s.opq_table.alloc.ret
  
  always_comb begin : up_master_req_msg
    master__req__msg.dst = dst_logic__out_dst;
    master__req__msg.payload = minion__req__msg;
    master__req__msg.payload.opaque[3'd4:3'd0] = 5'( __const__id_at_up_master_req_msg );
    master__req__msg.payload.opaque[3'd6:3'd5] = opq_table__alloc__ret;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:101
  // @update
  // def up_minion_resp_msg():
  //   s.minion.resp.msg @= s.master.resp.msg.payload
  //   s.minion.resp.msg.opaque @= s.opq_table.dealloc.ret
  
  always_comb begin : up_minion_resp_msg
    minion__resp__msg = master__resp__msg.payload;
    minion__resp__msg.opaque = opq_table__dealloc__ret;
  end

  assign opq_table__clk = clk;
  assign opq_table__reset = reset;
  assign opq_table__alloc__en = minion__req__en;
  assign opq_table__alloc__msg = minion__req__msg.opaque;
  assign opq_table__dealloc__en = master__resp__en;
  assign opq_table__dealloc__msg = master__resp__msg.payload.opaque[6:5];
  assign dst_logic__clk = clk;
  assign dst_logic__reset = reset;
  assign dst_logic__in_req = minion__req__msg;
  assign dst_logic__in_src_id = 5'd3;

endmodule


// PyMTL Component ReqAdapter Definition
// Full name: ReqAdapter__Req_CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7__Resp_CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7__id_4__num_requesters_17__num_responders_4__max_req_in_flight_4__DstLogicT_ScratchpadDstLogic
// At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py

module ReqAdapter__00db4764a604ff63
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  output logic [0:0] master__req__en ,
  output mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd master__req__msg ,
  input logic [0:0] master__req__rdy ,
  input logic [0:0] master__resp__en ,
  input mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 master__resp__msg ,
  output logic [0:0] master__resp__rdy ,
  input logic [0:0] minion__req__en ,
  input CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 minion__req__msg ,
  output logic [0:0] minion__req__rdy ,
  output logic [0:0] minion__resp__en ,
  output CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 minion__resp__msg ,
  input logic [0:0] minion__resp__rdy 
);
  localparam logic [2:0] __const__id_at_up_master_req_msg  = 3'd4;
  //-------------------------------------------------------------
  // Component dst_logic
  //-------------------------------------------------------------

  logic [0:0] dst_logic__clk;
  CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 dst_logic__in_req;
  logic [4:0] dst_logic__in_src_id;
  logic [1:0] dst_logic__out_dst;
  logic [0:0] dst_logic__reset;

  ScratchpadDstLogic__1bc6dabd503ca2d2 dst_logic
  (
    .clk( dst_logic__clk ),
    .in_req( dst_logic__in_req ),
    .in_src_id( dst_logic__in_src_id ),
    .out_dst( dst_logic__out_dst ),
    .reset( dst_logic__reset )
  );

  //-------------------------------------------------------------
  // End of component dst_logic
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component opq_table
  //-------------------------------------------------------------

  logic [0:0] opq_table__clk;
  logic [0:0] opq_table__reset;
  logic [0:0] opq_table__alloc__en;
  logic [6:0] opq_table__alloc__msg;
  logic [0:0] opq_table__alloc__rdy;
  logic [1:0] opq_table__alloc__ret;
  logic [0:0] opq_table__dealloc__en;
  logic [1:0] opq_table__dealloc__msg;
  logic [0:0] opq_table__dealloc__rdy;
  logic [6:0] opq_table__dealloc__ret;

  Table__EntryType_Bits7__num_entries_4 opq_table
  (
    .clk( opq_table__clk ),
    .reset( opq_table__reset ),
    .alloc__en( opq_table__alloc__en ),
    .alloc__msg( opq_table__alloc__msg ),
    .alloc__rdy( opq_table__alloc__rdy ),
    .alloc__ret( opq_table__alloc__ret ),
    .dealloc__en( opq_table__dealloc__en ),
    .dealloc__msg( opq_table__dealloc__msg ),
    .dealloc__rdy( opq_table__dealloc__rdy ),
    .dealloc__ret( opq_table__dealloc__ret )
  );

  //-------------------------------------------------------------
  // End of component opq_table
  //-------------------------------------------------------------

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:91
  // s.master.req.en   //= lambda: s.minion.req.en
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_4__master_req_en
    master__req__en = minion__req__en;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:92
  // s.master.resp.rdy //= lambda: s.minion.resp.rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_4__master_resp_rdy
    master__resp__rdy = minion__resp__rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:88
  // s.minion.req.rdy //= lambda: s.opq_table.alloc.rdy & s.master.req.rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_4__minion_req_rdy
    minion__req__rdy = opq_table__alloc__rdy & master__req__rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:89
  // s.minion.resp.en //= lambda: s.master.resp.en
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_4__minion_resp_en
    minion__resp__en = master__resp__en;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:94
  // @update
  // def up_master_req_msg():
  //   s.master.req.msg.dst @= s.dst_logic.out_dst
  //   s.master.req.msg.payload @= s.minion.req.msg
  //   s.master.req.msg.payload.opaque[ sl_src ] @= id
  //   s.master.req.msg.payload.opaque[ sl_idx ] @= s.opq_table.alloc.ret
  
  always_comb begin : up_master_req_msg
    master__req__msg.dst = dst_logic__out_dst;
    master__req__msg.payload = minion__req__msg;
    master__req__msg.payload.opaque[3'd4:3'd0] = 5'( __const__id_at_up_master_req_msg );
    master__req__msg.payload.opaque[3'd6:3'd5] = opq_table__alloc__ret;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:101
  // @update
  // def up_minion_resp_msg():
  //   s.minion.resp.msg @= s.master.resp.msg.payload
  //   s.minion.resp.msg.opaque @= s.opq_table.dealloc.ret
  
  always_comb begin : up_minion_resp_msg
    minion__resp__msg = master__resp__msg.payload;
    minion__resp__msg.opaque = opq_table__dealloc__ret;
  end

  assign opq_table__clk = clk;
  assign opq_table__reset = reset;
  assign opq_table__alloc__en = minion__req__en;
  assign opq_table__alloc__msg = minion__req__msg.opaque;
  assign opq_table__dealloc__en = master__resp__en;
  assign opq_table__dealloc__msg = master__resp__msg.payload.opaque[6:5];
  assign dst_logic__clk = clk;
  assign dst_logic__reset = reset;
  assign dst_logic__in_req = minion__req__msg;
  assign dst_logic__in_src_id = 5'd4;

endmodule


// PyMTL Component ReqAdapter Definition
// Full name: ReqAdapter__Req_CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7__Resp_CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7__id_5__num_requesters_17__num_responders_4__max_req_in_flight_4__DstLogicT_ScratchpadDstLogic
// At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py

module ReqAdapter__01da3b84d22e9b3f
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  output logic [0:0] master__req__en ,
  output mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd master__req__msg ,
  input logic [0:0] master__req__rdy ,
  input logic [0:0] master__resp__en ,
  input mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 master__resp__msg ,
  output logic [0:0] master__resp__rdy ,
  input logic [0:0] minion__req__en ,
  input CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 minion__req__msg ,
  output logic [0:0] minion__req__rdy ,
  output logic [0:0] minion__resp__en ,
  output CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 minion__resp__msg ,
  input logic [0:0] minion__resp__rdy 
);
  localparam logic [2:0] __const__id_at_up_master_req_msg  = 3'd5;
  //-------------------------------------------------------------
  // Component dst_logic
  //-------------------------------------------------------------

  logic [0:0] dst_logic__clk;
  CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 dst_logic__in_req;
  logic [4:0] dst_logic__in_src_id;
  logic [1:0] dst_logic__out_dst;
  logic [0:0] dst_logic__reset;

  ScratchpadDstLogic__1bc6dabd503ca2d2 dst_logic
  (
    .clk( dst_logic__clk ),
    .in_req( dst_logic__in_req ),
    .in_src_id( dst_logic__in_src_id ),
    .out_dst( dst_logic__out_dst ),
    .reset( dst_logic__reset )
  );

  //-------------------------------------------------------------
  // End of component dst_logic
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component opq_table
  //-------------------------------------------------------------

  logic [0:0] opq_table__clk;
  logic [0:0] opq_table__reset;
  logic [0:0] opq_table__alloc__en;
  logic [6:0] opq_table__alloc__msg;
  logic [0:0] opq_table__alloc__rdy;
  logic [1:0] opq_table__alloc__ret;
  logic [0:0] opq_table__dealloc__en;
  logic [1:0] opq_table__dealloc__msg;
  logic [0:0] opq_table__dealloc__rdy;
  logic [6:0] opq_table__dealloc__ret;

  Table__EntryType_Bits7__num_entries_4 opq_table
  (
    .clk( opq_table__clk ),
    .reset( opq_table__reset ),
    .alloc__en( opq_table__alloc__en ),
    .alloc__msg( opq_table__alloc__msg ),
    .alloc__rdy( opq_table__alloc__rdy ),
    .alloc__ret( opq_table__alloc__ret ),
    .dealloc__en( opq_table__dealloc__en ),
    .dealloc__msg( opq_table__dealloc__msg ),
    .dealloc__rdy( opq_table__dealloc__rdy ),
    .dealloc__ret( opq_table__dealloc__ret )
  );

  //-------------------------------------------------------------
  // End of component opq_table
  //-------------------------------------------------------------

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:91
  // s.master.req.en   //= lambda: s.minion.req.en
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_5__master_req_en
    master__req__en = minion__req__en;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:92
  // s.master.resp.rdy //= lambda: s.minion.resp.rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_5__master_resp_rdy
    master__resp__rdy = minion__resp__rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:88
  // s.minion.req.rdy //= lambda: s.opq_table.alloc.rdy & s.master.req.rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_5__minion_req_rdy
    minion__req__rdy = opq_table__alloc__rdy & master__req__rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:89
  // s.minion.resp.en //= lambda: s.master.resp.en
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_5__minion_resp_en
    minion__resp__en = master__resp__en;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:94
  // @update
  // def up_master_req_msg():
  //   s.master.req.msg.dst @= s.dst_logic.out_dst
  //   s.master.req.msg.payload @= s.minion.req.msg
  //   s.master.req.msg.payload.opaque[ sl_src ] @= id
  //   s.master.req.msg.payload.opaque[ sl_idx ] @= s.opq_table.alloc.ret
  
  always_comb begin : up_master_req_msg
    master__req__msg.dst = dst_logic__out_dst;
    master__req__msg.payload = minion__req__msg;
    master__req__msg.payload.opaque[3'd4:3'd0] = 5'( __const__id_at_up_master_req_msg );
    master__req__msg.payload.opaque[3'd6:3'd5] = opq_table__alloc__ret;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:101
  // @update
  // def up_minion_resp_msg():
  //   s.minion.resp.msg @= s.master.resp.msg.payload
  //   s.minion.resp.msg.opaque @= s.opq_table.dealloc.ret
  
  always_comb begin : up_minion_resp_msg
    minion__resp__msg = master__resp__msg.payload;
    minion__resp__msg.opaque = opq_table__dealloc__ret;
  end

  assign opq_table__clk = clk;
  assign opq_table__reset = reset;
  assign opq_table__alloc__en = minion__req__en;
  assign opq_table__alloc__msg = minion__req__msg.opaque;
  assign opq_table__dealloc__en = master__resp__en;
  assign opq_table__dealloc__msg = master__resp__msg.payload.opaque[6:5];
  assign dst_logic__clk = clk;
  assign dst_logic__reset = reset;
  assign dst_logic__in_req = minion__req__msg;
  assign dst_logic__in_src_id = 5'd5;

endmodule


// PyMTL Component ReqAdapter Definition
// Full name: ReqAdapter__Req_CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7__Resp_CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7__id_6__num_requesters_17__num_responders_4__max_req_in_flight_4__DstLogicT_ScratchpadDstLogic
// At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py

module ReqAdapter__529dea8e619fa0ea
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  output logic [0:0] master__req__en ,
  output mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd master__req__msg ,
  input logic [0:0] master__req__rdy ,
  input logic [0:0] master__resp__en ,
  input mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 master__resp__msg ,
  output logic [0:0] master__resp__rdy ,
  input logic [0:0] minion__req__en ,
  input CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 minion__req__msg ,
  output logic [0:0] minion__req__rdy ,
  output logic [0:0] minion__resp__en ,
  output CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 minion__resp__msg ,
  input logic [0:0] minion__resp__rdy 
);
  localparam logic [2:0] __const__id_at_up_master_req_msg  = 3'd6;
  //-------------------------------------------------------------
  // Component dst_logic
  //-------------------------------------------------------------

  logic [0:0] dst_logic__clk;
  CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 dst_logic__in_req;
  logic [4:0] dst_logic__in_src_id;
  logic [1:0] dst_logic__out_dst;
  logic [0:0] dst_logic__reset;

  ScratchpadDstLogic__1bc6dabd503ca2d2 dst_logic
  (
    .clk( dst_logic__clk ),
    .in_req( dst_logic__in_req ),
    .in_src_id( dst_logic__in_src_id ),
    .out_dst( dst_logic__out_dst ),
    .reset( dst_logic__reset )
  );

  //-------------------------------------------------------------
  // End of component dst_logic
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component opq_table
  //-------------------------------------------------------------

  logic [0:0] opq_table__clk;
  logic [0:0] opq_table__reset;
  logic [0:0] opq_table__alloc__en;
  logic [6:0] opq_table__alloc__msg;
  logic [0:0] opq_table__alloc__rdy;
  logic [1:0] opq_table__alloc__ret;
  logic [0:0] opq_table__dealloc__en;
  logic [1:0] opq_table__dealloc__msg;
  logic [0:0] opq_table__dealloc__rdy;
  logic [6:0] opq_table__dealloc__ret;

  Table__EntryType_Bits7__num_entries_4 opq_table
  (
    .clk( opq_table__clk ),
    .reset( opq_table__reset ),
    .alloc__en( opq_table__alloc__en ),
    .alloc__msg( opq_table__alloc__msg ),
    .alloc__rdy( opq_table__alloc__rdy ),
    .alloc__ret( opq_table__alloc__ret ),
    .dealloc__en( opq_table__dealloc__en ),
    .dealloc__msg( opq_table__dealloc__msg ),
    .dealloc__rdy( opq_table__dealloc__rdy ),
    .dealloc__ret( opq_table__dealloc__ret )
  );

  //-------------------------------------------------------------
  // End of component opq_table
  //-------------------------------------------------------------

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:91
  // s.master.req.en   //= lambda: s.minion.req.en
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_6__master_req_en
    master__req__en = minion__req__en;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:92
  // s.master.resp.rdy //= lambda: s.minion.resp.rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_6__master_resp_rdy
    master__resp__rdy = minion__resp__rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:88
  // s.minion.req.rdy //= lambda: s.opq_table.alloc.rdy & s.master.req.rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_6__minion_req_rdy
    minion__req__rdy = opq_table__alloc__rdy & master__req__rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:89
  // s.minion.resp.en //= lambda: s.master.resp.en
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_6__minion_resp_en
    minion__resp__en = master__resp__en;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:94
  // @update
  // def up_master_req_msg():
  //   s.master.req.msg.dst @= s.dst_logic.out_dst
  //   s.master.req.msg.payload @= s.minion.req.msg
  //   s.master.req.msg.payload.opaque[ sl_src ] @= id
  //   s.master.req.msg.payload.opaque[ sl_idx ] @= s.opq_table.alloc.ret
  
  always_comb begin : up_master_req_msg
    master__req__msg.dst = dst_logic__out_dst;
    master__req__msg.payload = minion__req__msg;
    master__req__msg.payload.opaque[3'd4:3'd0] = 5'( __const__id_at_up_master_req_msg );
    master__req__msg.payload.opaque[3'd6:3'd5] = opq_table__alloc__ret;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:101
  // @update
  // def up_minion_resp_msg():
  //   s.minion.resp.msg @= s.master.resp.msg.payload
  //   s.minion.resp.msg.opaque @= s.opq_table.dealloc.ret
  
  always_comb begin : up_minion_resp_msg
    minion__resp__msg = master__resp__msg.payload;
    minion__resp__msg.opaque = opq_table__dealloc__ret;
  end

  assign opq_table__clk = clk;
  assign opq_table__reset = reset;
  assign opq_table__alloc__en = minion__req__en;
  assign opq_table__alloc__msg = minion__req__msg.opaque;
  assign opq_table__dealloc__en = master__resp__en;
  assign opq_table__dealloc__msg = master__resp__msg.payload.opaque[6:5];
  assign dst_logic__clk = clk;
  assign dst_logic__reset = reset;
  assign dst_logic__in_req = minion__req__msg;
  assign dst_logic__in_src_id = 5'd6;

endmodule


// PyMTL Component ReqAdapter Definition
// Full name: ReqAdapter__Req_CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7__Resp_CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7__id_7__num_requesters_17__num_responders_4__max_req_in_flight_4__DstLogicT_ScratchpadDstLogic
// At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py

module ReqAdapter__76ed7830b9e5ef5f
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  output logic [0:0] master__req__en ,
  output mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd master__req__msg ,
  input logic [0:0] master__req__rdy ,
  input logic [0:0] master__resp__en ,
  input mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 master__resp__msg ,
  output logic [0:0] master__resp__rdy ,
  input logic [0:0] minion__req__en ,
  input CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 minion__req__msg ,
  output logic [0:0] minion__req__rdy ,
  output logic [0:0] minion__resp__en ,
  output CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 minion__resp__msg ,
  input logic [0:0] minion__resp__rdy 
);
  localparam logic [2:0] __const__id_at_up_master_req_msg  = 3'd7;
  //-------------------------------------------------------------
  // Component dst_logic
  //-------------------------------------------------------------

  logic [0:0] dst_logic__clk;
  CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 dst_logic__in_req;
  logic [4:0] dst_logic__in_src_id;
  logic [1:0] dst_logic__out_dst;
  logic [0:0] dst_logic__reset;

  ScratchpadDstLogic__1bc6dabd503ca2d2 dst_logic
  (
    .clk( dst_logic__clk ),
    .in_req( dst_logic__in_req ),
    .in_src_id( dst_logic__in_src_id ),
    .out_dst( dst_logic__out_dst ),
    .reset( dst_logic__reset )
  );

  //-------------------------------------------------------------
  // End of component dst_logic
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component opq_table
  //-------------------------------------------------------------

  logic [0:0] opq_table__clk;
  logic [0:0] opq_table__reset;
  logic [0:0] opq_table__alloc__en;
  logic [6:0] opq_table__alloc__msg;
  logic [0:0] opq_table__alloc__rdy;
  logic [1:0] opq_table__alloc__ret;
  logic [0:0] opq_table__dealloc__en;
  logic [1:0] opq_table__dealloc__msg;
  logic [0:0] opq_table__dealloc__rdy;
  logic [6:0] opq_table__dealloc__ret;

  Table__EntryType_Bits7__num_entries_4 opq_table
  (
    .clk( opq_table__clk ),
    .reset( opq_table__reset ),
    .alloc__en( opq_table__alloc__en ),
    .alloc__msg( opq_table__alloc__msg ),
    .alloc__rdy( opq_table__alloc__rdy ),
    .alloc__ret( opq_table__alloc__ret ),
    .dealloc__en( opq_table__dealloc__en ),
    .dealloc__msg( opq_table__dealloc__msg ),
    .dealloc__rdy( opq_table__dealloc__rdy ),
    .dealloc__ret( opq_table__dealloc__ret )
  );

  //-------------------------------------------------------------
  // End of component opq_table
  //-------------------------------------------------------------

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:91
  // s.master.req.en   //= lambda: s.minion.req.en
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_7__master_req_en
    master__req__en = minion__req__en;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:92
  // s.master.resp.rdy //= lambda: s.minion.resp.rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_7__master_resp_rdy
    master__resp__rdy = minion__resp__rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:88
  // s.minion.req.rdy //= lambda: s.opq_table.alloc.rdy & s.master.req.rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_7__minion_req_rdy
    minion__req__rdy = opq_table__alloc__rdy & master__req__rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:89
  // s.minion.resp.en //= lambda: s.master.resp.en
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_7__minion_resp_en
    minion__resp__en = master__resp__en;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:94
  // @update
  // def up_master_req_msg():
  //   s.master.req.msg.dst @= s.dst_logic.out_dst
  //   s.master.req.msg.payload @= s.minion.req.msg
  //   s.master.req.msg.payload.opaque[ sl_src ] @= id
  //   s.master.req.msg.payload.opaque[ sl_idx ] @= s.opq_table.alloc.ret
  
  always_comb begin : up_master_req_msg
    master__req__msg.dst = dst_logic__out_dst;
    master__req__msg.payload = minion__req__msg;
    master__req__msg.payload.opaque[3'd4:3'd0] = 5'( __const__id_at_up_master_req_msg );
    master__req__msg.payload.opaque[3'd6:3'd5] = opq_table__alloc__ret;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:101
  // @update
  // def up_minion_resp_msg():
  //   s.minion.resp.msg @= s.master.resp.msg.payload
  //   s.minion.resp.msg.opaque @= s.opq_table.dealloc.ret
  
  always_comb begin : up_minion_resp_msg
    minion__resp__msg = master__resp__msg.payload;
    minion__resp__msg.opaque = opq_table__dealloc__ret;
  end

  assign opq_table__clk = clk;
  assign opq_table__reset = reset;
  assign opq_table__alloc__en = minion__req__en;
  assign opq_table__alloc__msg = minion__req__msg.opaque;
  assign opq_table__dealloc__en = master__resp__en;
  assign opq_table__dealloc__msg = master__resp__msg.payload.opaque[6:5];
  assign dst_logic__clk = clk;
  assign dst_logic__reset = reset;
  assign dst_logic__in_req = minion__req__msg;
  assign dst_logic__in_src_id = 5'd7;

endmodule


// PyMTL Component ReqAdapter Definition
// Full name: ReqAdapter__Req_CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7__Resp_CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7__id_8__num_requesters_17__num_responders_4__max_req_in_flight_4__DstLogicT_ScratchpadDstLogic
// At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py

module ReqAdapter__6ab641fc601c91f5
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  output logic [0:0] master__req__en ,
  output mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd master__req__msg ,
  input logic [0:0] master__req__rdy ,
  input logic [0:0] master__resp__en ,
  input mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 master__resp__msg ,
  output logic [0:0] master__resp__rdy ,
  input logic [0:0] minion__req__en ,
  input CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 minion__req__msg ,
  output logic [0:0] minion__req__rdy ,
  output logic [0:0] minion__resp__en ,
  output CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 minion__resp__msg ,
  input logic [0:0] minion__resp__rdy 
);
  localparam logic [3:0] __const__id_at_up_master_req_msg  = 4'd8;
  //-------------------------------------------------------------
  // Component dst_logic
  //-------------------------------------------------------------

  logic [0:0] dst_logic__clk;
  CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 dst_logic__in_req;
  logic [4:0] dst_logic__in_src_id;
  logic [1:0] dst_logic__out_dst;
  logic [0:0] dst_logic__reset;

  ScratchpadDstLogic__1bc6dabd503ca2d2 dst_logic
  (
    .clk( dst_logic__clk ),
    .in_req( dst_logic__in_req ),
    .in_src_id( dst_logic__in_src_id ),
    .out_dst( dst_logic__out_dst ),
    .reset( dst_logic__reset )
  );

  //-------------------------------------------------------------
  // End of component dst_logic
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component opq_table
  //-------------------------------------------------------------

  logic [0:0] opq_table__clk;
  logic [0:0] opq_table__reset;
  logic [0:0] opq_table__alloc__en;
  logic [6:0] opq_table__alloc__msg;
  logic [0:0] opq_table__alloc__rdy;
  logic [1:0] opq_table__alloc__ret;
  logic [0:0] opq_table__dealloc__en;
  logic [1:0] opq_table__dealloc__msg;
  logic [0:0] opq_table__dealloc__rdy;
  logic [6:0] opq_table__dealloc__ret;

  Table__EntryType_Bits7__num_entries_4 opq_table
  (
    .clk( opq_table__clk ),
    .reset( opq_table__reset ),
    .alloc__en( opq_table__alloc__en ),
    .alloc__msg( opq_table__alloc__msg ),
    .alloc__rdy( opq_table__alloc__rdy ),
    .alloc__ret( opq_table__alloc__ret ),
    .dealloc__en( opq_table__dealloc__en ),
    .dealloc__msg( opq_table__dealloc__msg ),
    .dealloc__rdy( opq_table__dealloc__rdy ),
    .dealloc__ret( opq_table__dealloc__ret )
  );

  //-------------------------------------------------------------
  // End of component opq_table
  //-------------------------------------------------------------

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:91
  // s.master.req.en   //= lambda: s.minion.req.en
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_8__master_req_en
    master__req__en = minion__req__en;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:92
  // s.master.resp.rdy //= lambda: s.minion.resp.rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_8__master_resp_rdy
    master__resp__rdy = minion__resp__rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:88
  // s.minion.req.rdy //= lambda: s.opq_table.alloc.rdy & s.master.req.rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_8__minion_req_rdy
    minion__req__rdy = opq_table__alloc__rdy & master__req__rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:89
  // s.minion.resp.en //= lambda: s.master.resp.en
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_8__minion_resp_en
    minion__resp__en = master__resp__en;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:94
  // @update
  // def up_master_req_msg():
  //   s.master.req.msg.dst @= s.dst_logic.out_dst
  //   s.master.req.msg.payload @= s.minion.req.msg
  //   s.master.req.msg.payload.opaque[ sl_src ] @= id
  //   s.master.req.msg.payload.opaque[ sl_idx ] @= s.opq_table.alloc.ret
  
  always_comb begin : up_master_req_msg
    master__req__msg.dst = dst_logic__out_dst;
    master__req__msg.payload = minion__req__msg;
    master__req__msg.payload.opaque[3'd4:3'd0] = 5'( __const__id_at_up_master_req_msg );
    master__req__msg.payload.opaque[3'd6:3'd5] = opq_table__alloc__ret;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:101
  // @update
  // def up_minion_resp_msg():
  //   s.minion.resp.msg @= s.master.resp.msg.payload
  //   s.minion.resp.msg.opaque @= s.opq_table.dealloc.ret
  
  always_comb begin : up_minion_resp_msg
    minion__resp__msg = master__resp__msg.payload;
    minion__resp__msg.opaque = opq_table__dealloc__ret;
  end

  assign opq_table__clk = clk;
  assign opq_table__reset = reset;
  assign opq_table__alloc__en = minion__req__en;
  assign opq_table__alloc__msg = minion__req__msg.opaque;
  assign opq_table__dealloc__en = master__resp__en;
  assign opq_table__dealloc__msg = master__resp__msg.payload.opaque[6:5];
  assign dst_logic__clk = clk;
  assign dst_logic__reset = reset;
  assign dst_logic__in_req = minion__req__msg;
  assign dst_logic__in_src_id = 5'd8;

endmodule


// PyMTL Component ReqAdapter Definition
// Full name: ReqAdapter__Req_CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7__Resp_CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7__id_9__num_requesters_17__num_responders_4__max_req_in_flight_4__DstLogicT_ScratchpadDstLogic
// At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py

module ReqAdapter__4e7ae9506498f3cb
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  output logic [0:0] master__req__en ,
  output mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd master__req__msg ,
  input logic [0:0] master__req__rdy ,
  input logic [0:0] master__resp__en ,
  input mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 master__resp__msg ,
  output logic [0:0] master__resp__rdy ,
  input logic [0:0] minion__req__en ,
  input CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 minion__req__msg ,
  output logic [0:0] minion__req__rdy ,
  output logic [0:0] minion__resp__en ,
  output CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 minion__resp__msg ,
  input logic [0:0] minion__resp__rdy 
);
  localparam logic [3:0] __const__id_at_up_master_req_msg  = 4'd9;
  //-------------------------------------------------------------
  // Component dst_logic
  //-------------------------------------------------------------

  logic [0:0] dst_logic__clk;
  CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 dst_logic__in_req;
  logic [4:0] dst_logic__in_src_id;
  logic [1:0] dst_logic__out_dst;
  logic [0:0] dst_logic__reset;

  ScratchpadDstLogic__1bc6dabd503ca2d2 dst_logic
  (
    .clk( dst_logic__clk ),
    .in_req( dst_logic__in_req ),
    .in_src_id( dst_logic__in_src_id ),
    .out_dst( dst_logic__out_dst ),
    .reset( dst_logic__reset )
  );

  //-------------------------------------------------------------
  // End of component dst_logic
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component opq_table
  //-------------------------------------------------------------

  logic [0:0] opq_table__clk;
  logic [0:0] opq_table__reset;
  logic [0:0] opq_table__alloc__en;
  logic [6:0] opq_table__alloc__msg;
  logic [0:0] opq_table__alloc__rdy;
  logic [1:0] opq_table__alloc__ret;
  logic [0:0] opq_table__dealloc__en;
  logic [1:0] opq_table__dealloc__msg;
  logic [0:0] opq_table__dealloc__rdy;
  logic [6:0] opq_table__dealloc__ret;

  Table__EntryType_Bits7__num_entries_4 opq_table
  (
    .clk( opq_table__clk ),
    .reset( opq_table__reset ),
    .alloc__en( opq_table__alloc__en ),
    .alloc__msg( opq_table__alloc__msg ),
    .alloc__rdy( opq_table__alloc__rdy ),
    .alloc__ret( opq_table__alloc__ret ),
    .dealloc__en( opq_table__dealloc__en ),
    .dealloc__msg( opq_table__dealloc__msg ),
    .dealloc__rdy( opq_table__dealloc__rdy ),
    .dealloc__ret( opq_table__dealloc__ret )
  );

  //-------------------------------------------------------------
  // End of component opq_table
  //-------------------------------------------------------------

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:91
  // s.master.req.en   //= lambda: s.minion.req.en
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_9__master_req_en
    master__req__en = minion__req__en;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:92
  // s.master.resp.rdy //= lambda: s.minion.resp.rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_9__master_resp_rdy
    master__resp__rdy = minion__resp__rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:88
  // s.minion.req.rdy //= lambda: s.opq_table.alloc.rdy & s.master.req.rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_9__minion_req_rdy
    minion__req__rdy = opq_table__alloc__rdy & master__req__rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:89
  // s.minion.resp.en //= lambda: s.master.resp.en
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_adapter_9__minion_resp_en
    minion__resp__en = master__resp__en;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:94
  // @update
  // def up_master_req_msg():
  //   s.master.req.msg.dst @= s.dst_logic.out_dst
  //   s.master.req.msg.payload @= s.minion.req.msg
  //   s.master.req.msg.payload.opaque[ sl_src ] @= id
  //   s.master.req.msg.payload.opaque[ sl_idx ] @= s.opq_table.alloc.ret
  
  always_comb begin : up_master_req_msg
    master__req__msg.dst = dst_logic__out_dst;
    master__req__msg.payload = minion__req__msg;
    master__req__msg.payload.opaque[3'd4:3'd0] = 5'( __const__id_at_up_master_req_msg );
    master__req__msg.payload.opaque[3'd6:3'd5] = opq_table__alloc__ret;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:101
  // @update
  // def up_minion_resp_msg():
  //   s.minion.resp.msg @= s.master.resp.msg.payload
  //   s.minion.resp.msg.opaque @= s.opq_table.dealloc.ret
  
  always_comb begin : up_minion_resp_msg
    minion__resp__msg = master__resp__msg.payload;
    minion__resp__msg.opaque = opq_table__dealloc__ret;
  end

  assign opq_table__clk = clk;
  assign opq_table__reset = reset;
  assign opq_table__alloc__en = minion__req__en;
  assign opq_table__alloc__msg = minion__req__msg.opaque;
  assign opq_table__dealloc__en = master__resp__en;
  assign opq_table__dealloc__msg = master__resp__msg.payload.opaque[6:5];
  assign dst_logic__clk = clk;
  assign dst_logic__reset = reset;
  assign dst_logic__in_req = minion__req__msg;
  assign dst_logic__in_src_id = 5'd9;

endmodule


// PyMTL Component NormalQueueCtrlRTL Definition
// At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/queues/queues.py

module NormalQueueCtrlRTL__num_entries_2
(
  input  logic [0:0] clk ,
  output logic [1:0] count ,
  input  logic [0:0] deq_en ,
  output logic [0:0] deq_rdy ,
  input  logic [0:0] enq_en ,
  output logic [0:0] enq_rdy ,
  output logic [0:0] raddr ,
  input  logic [0:0] reset ,
  output logic [0:0] waddr ,
  output logic [0:0] wen 
);
  logic [0:0] deq_xfer;
  logic [0:0] enq_xfer;
  logic [0:0] head;
  logic [0:0] tail;

  // PyMTL Lambda Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/queues/queues.py:84
  // s.deq_rdy //= lambda: ~s.reset & ( s.count > CountType(0) )
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_net_input_units_0__queue_ctrl_deq_rdy
    deq_rdy = ( ~reset ) & ( count > 2'd0 );
  end

  // PyMTL Lambda Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/queues/queues.py:87
  // s.deq_xfer //= lambda: s.deq_en & s.deq_rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_net_input_units_0__queue_ctrl_deq_xfer
    deq_xfer = deq_en & deq_rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/queues/queues.py:83
  // s.enq_rdy //= lambda: ~s.reset & ( s.count < s.num_entries )
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_net_input_units_0__queue_ctrl_enq_rdy
    enq_rdy = ( ~reset ) & ( count < 2'd2 );
  end

  // PyMTL Lambda Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/queues/queues.py:86
  // s.enq_xfer //= lambda: s.enq_en & s.enq_rdy
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_net_input_units_0__queue_ctrl_enq_xfer
    enq_xfer = enq_en & enq_rdy;
  end

  // PyMTL Update Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/queues/queues.py:89
  // @update_ff
  // def up_reg():
  // 
  //   if s.reset:
  //     s.head  <<= PtrType(0)
  //     s.tail  <<= PtrType(0)
  //     s.count <<= CountType(0)
  // 
  //   else:
  //     if s.deq_xfer:
  //       s.head <<= s.head + PtrType(1) if s.head < s.last_idx else PtrType(0)
  // 
  //     if s.enq_xfer:
  //       s.tail <<= s.tail + PtrType(1) if s.tail < s.last_idx else PtrType(0)
  // 
  //     if s.enq_xfer & ~s.deq_xfer:
  //       s.count <<= s.count + CountType(1)
  //     if ~s.enq_xfer & s.deq_xfer:
  //       s.count <<= s.count - CountType(1)
  
  always_ff @(posedge clk) begin : up_reg
    if ( reset ) begin
      head <= 1'd0;
      tail <= 1'd0;
      count <= 2'd0;
    end
    else begin
      if ( deq_xfer ) begin
        head <= ( head < 1'd1 ) ? head + 1'd1 : 1'd0;
      end
      if ( enq_xfer ) begin
        tail <= ( tail < 1'd1 ) ? tail + 1'd1 : 1'd0;
      end
      if ( enq_xfer & ( ~deq_xfer ) ) begin
        count <= count + 2'd1;
      end
      if ( ( ~enq_xfer ) & deq_xfer ) begin
        count <= count - 2'd1;
      end
    end
  end

  assign wen = enq_xfer;
  assign waddr = tail;
  assign raddr = head;

endmodule


// PyMTL Component RegisterFile Definition
// Full name: RegisterFile__Type_mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd__nregs_2__rd_ports_1__wr_ports_1__const_zero_False
// At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/register_files.py

module RegisterFile__8f337ac113ad64d9
(
  input  logic [0:0] clk ,
  input  logic [0:0] raddr [0:0],
  output mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd rdata [0:0],
  input  logic [0:0] reset ,
  input  logic [0:0] waddr [0:0],
  input  mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd wdata [0:0],
  input  logic [0:0] wen [0:0]
);
  localparam logic [0:0] __const__rd_ports_at_up_rf_read  = 1'd1;
  localparam logic [0:0] __const__wr_ports_at_up_rf_write  = 1'd1;
  mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd regs [0:1];

  // PyMTL Update Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/register_files.py:20
  // @update
  // def up_rf_read():
  //   for i in range( rd_ports ):
  //     s.rdata[i] @= s.regs[ s.raddr[i] ]
  
  always_comb begin : up_rf_read
    for ( int unsigned i = 1'd0; i < 1'( __const__rd_ports_at_up_rf_read ); i += 1'd1 )
      rdata[1'(i)] = regs[raddr[1'(i)]];
  end

  // PyMTL Update Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/register_files.py:32
  // @update_ff
  // def up_rf_write():
  //   for i in range( wr_ports ):
  //     if s.wen[i]:
  //       s.regs[ s.waddr[i] ] <<= s.wdata[i]
  
  always_ff @(posedge clk) begin : up_rf_write
    for ( int unsigned i = 1'd0; i < 1'( __const__wr_ports_at_up_rf_write ); i += 1'd1 )
      if ( wen[1'(i)] ) begin
        regs[waddr[1'(i)]] <= wdata[1'(i)];
      end
  end

endmodule


// PyMTL Component NormalQueueDpathRTL Definition
// Full name: NormalQueueDpathRTL__EntryType_mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd__num_entries_2
// At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/queues/queues.py

module NormalQueueDpathRTL__3497262bccd2acae
(
  input  logic [0:0] clk ,
  output mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd deq_ret ,
  input  mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd enq_msg ,
  input  logic [0:0] raddr ,
  input  logic [0:0] reset ,
  input  logic [0:0] waddr ,
  input  logic [0:0] wen 
);
  //-------------------------------------------------------------
  // Component queue
  //-------------------------------------------------------------

  logic [0:0] queue__clk;
  logic [0:0] queue__raddr [0:0];
  mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd queue__rdata [0:0];
  logic [0:0] queue__reset;
  logic [0:0] queue__waddr [0:0];
  mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd queue__wdata [0:0];
  logic [0:0] queue__wen [0:0];

  RegisterFile__8f337ac113ad64d9 queue
  (
    .clk( queue__clk ),
    .raddr( queue__raddr ),
    .rdata( queue__rdata ),
    .reset( queue__reset ),
    .waddr( queue__waddr ),
    .wdata( queue__wdata ),
    .wen( queue__wen )
  );

  //-------------------------------------------------------------
  // End of component queue
  //-------------------------------------------------------------

  assign queue__clk = clk;
  assign queue__reset = reset;
  assign queue__raddr[0] = raddr;
  assign deq_ret = queue__rdata[0];
  assign queue__wen[0] = wen;
  assign queue__waddr[0] = waddr;
  assign queue__wdata[0] = enq_msg;

endmodule


// PyMTL Component NormalQueueRTL Definition
// Full name: NormalQueueRTL__EntryType_mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd__num_entries_2
// At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/queues/queues.py

module NormalQueueRTL__3497262bccd2acae
(
  input  logic [0:0] clk ,
  output logic [1:0] count ,
  input  logic [0:0] reset ,
  input logic [0:0] deq__en  ,
  output logic [0:0] deq__rdy  ,
  output mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd deq__ret  ,
  input logic [0:0] enq__en  ,
  input mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd enq__msg  ,
  output logic [0:0] enq__rdy  
);
  //-------------------------------------------------------------
  // Component ctrl
  //-------------------------------------------------------------

  logic [0:0] ctrl__clk;
  logic [1:0] ctrl__count;
  logic [0:0] ctrl__deq_en;
  logic [0:0] ctrl__deq_rdy;
  logic [0:0] ctrl__enq_en;
  logic [0:0] ctrl__enq_rdy;
  logic [0:0] ctrl__raddr;
  logic [0:0] ctrl__reset;
  logic [0:0] ctrl__waddr;
  logic [0:0] ctrl__wen;

  NormalQueueCtrlRTL__num_entries_2 ctrl
  (
    .clk( ctrl__clk ),
    .count( ctrl__count ),
    .deq_en( ctrl__deq_en ),
    .deq_rdy( ctrl__deq_rdy ),
    .enq_en( ctrl__enq_en ),
    .enq_rdy( ctrl__enq_rdy ),
    .raddr( ctrl__raddr ),
    .reset( ctrl__reset ),
    .waddr( ctrl__waddr ),
    .wen( ctrl__wen )
  );

  //-------------------------------------------------------------
  // End of component ctrl
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component dpath
  //-------------------------------------------------------------

  logic [0:0] dpath__clk;
  mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd dpath__deq_ret;
  mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd dpath__enq_msg;
  logic [0:0] dpath__raddr;
  logic [0:0] dpath__reset;
  logic [0:0] dpath__waddr;
  logic [0:0] dpath__wen;

  NormalQueueDpathRTL__3497262bccd2acae dpath
  (
    .clk( dpath__clk ),
    .deq_ret( dpath__deq_ret ),
    .enq_msg( dpath__enq_msg ),
    .raddr( dpath__raddr ),
    .reset( dpath__reset ),
    .waddr( dpath__waddr ),
    .wen( dpath__wen )
  );

  //-------------------------------------------------------------
  // End of component dpath
  //-------------------------------------------------------------

  assign ctrl__clk = clk;
  assign ctrl__reset = reset;
  assign dpath__clk = clk;
  assign dpath__reset = reset;
  assign dpath__wen = ctrl__wen;
  assign dpath__waddr = ctrl__waddr;
  assign dpath__raddr = ctrl__raddr;
  assign ctrl__enq_en = enq__en;
  assign enq__rdy = ctrl__enq_rdy;
  assign ctrl__deq_en = deq__en;
  assign deq__rdy = ctrl__deq_rdy;
  assign count = ctrl__count;
  assign dpath__enq_msg = enq__msg;
  assign deq__ret = dpath__deq_ret;

endmodule


// PyMTL Component InputUnitRTL Definition
// Full name: InputUnitRTL__PacketType_mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd__QueueType_NormalQueueRTL
// At /work/global/pp482/cgra/src/pymtl3_net/router/InputUnitRTL.py

module InputUnitRTL__4d64fd7aa8b55c26
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  input logic [0:0] give__en  ,
  output logic [0:0] give__rdy  ,
  output mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd give__ret  ,
  input logic [0:0] recv__en  ,
  input mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd recv__msg  ,
  output logic [0:0] recv__rdy  
);
  //-------------------------------------------------------------
  // Component queue
  //-------------------------------------------------------------

  logic [0:0] queue__clk;
  logic [1:0] queue__count;
  logic [0:0] queue__reset;
  logic [0:0] queue__deq__en;
  logic [0:0] queue__deq__rdy;
  mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd queue__deq__ret;
  logic [0:0] queue__enq__en;
  mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd queue__enq__msg;
  logic [0:0] queue__enq__rdy;

  NormalQueueRTL__3497262bccd2acae queue
  (
    .clk( queue__clk ),
    .count( queue__count ),
    .reset( queue__reset ),
    .deq__en( queue__deq__en ),
    .deq__rdy( queue__deq__rdy ),
    .deq__ret( queue__deq__ret ),
    .enq__en( queue__enq__en ),
    .enq__msg( queue__enq__msg ),
    .enq__rdy( queue__enq__rdy )
  );

  //-------------------------------------------------------------
  // End of component queue
  //-------------------------------------------------------------

  assign queue__clk = clk;
  assign queue__reset = reset;
  assign queue__enq__en = recv__en;
  assign queue__enq__msg = recv__msg;
  assign recv__rdy = queue__enq__rdy;
  assign queue__deq__en = give__en;
  assign give__rdy = queue__deq__rdy;
  assign give__ret = queue__deq__ret;

endmodule


// PyMTL Component OutputUnitRTL Definition
// Full name: OutputUnitRTL__PacketType_mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd__QueueType_None
// At /work/global/pp482/cgra/src/pymtl3_net/router/OutputUnitRTL.py

module OutputUnitRTL__2e1f8078310e6e31
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  output logic [0:0] get__en  ,
  input logic [0:0] get__rdy  ,
  input mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd get__ret  ,
  output logic [0:0] send__en  ,
  output mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd send__msg  ,
  input logic [0:0] send__rdy  
);

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/router/OutputUnitRTL.py:50
  // s.send.msg //= lambda: s.get.ret if s.send.en else PacketType()
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_req_net_output_units_0__send_msg
    send__msg = send__en ? get__ret : { 2'd0, { 1'd0, 14'd0, 32'd0, 7'd0 } };
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/router/OutputUnitRTL.py:52
  // @update
  // def up_get_send():
  //   s.get.en  @= s.get.rdy & s.send.rdy
  //   s.send.en @= s.get.rdy & s.send.rdy
  
  always_comb begin : up_get_send
    get__en = get__rdy & send__rdy;
    send__en = get__rdy & send__rdy;
  end

endmodule


// PyMTL Component XbarRouteUnitRTL Definition
// Full name: XbarRouteUnitRTL__PacketType_mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd__num_outports_4
// At /work/global/pp482/cgra/src/pymtl3_net/xbar/XbarRouteUnitRTL.py

module XbarRouteUnitRTL__3ab4e489d96abc6b
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  output logic [0:0] get__en  ,
  input logic [0:0] get__rdy  ,
  input mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd get__ret  ,
  input logic [0:0] give__en [0:3] ,
  output logic [0:0] give__rdy [0:3] ,
  output mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd give__ret [0:3] 
);
  localparam logic [2:0] __const__num_outports_at_up_ru_routing  = 3'd4;
  logic [3:0] give_ens;
  logic [1:0] out_dir;

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/xbar/XbarRouteUnitRTL.py:51
  // @update
  // def up_ru_give_en():
  //   s.get.en @= s.give_ens > BitsN(0)
  
  always_comb begin : up_ru_give_en
    get__en = give_ens > 4'd0;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/xbar/XbarRouteUnitRTL.py:41
  // @update
  // def up_ru_routing():
  //   s.out_dir @= DirT( s.get.ret.dst )
  // 
  //   for i in range( num_outports ):
  //     s.give[i].rdy @= b1(0)
  // 
  //   if s.get.rdy:
  //     s.give[ s.out_dir ].rdy @= b1(1)
  
  always_comb begin : up_ru_routing
    out_dir = 2'( get__ret.dst );
    for ( int unsigned i = 1'd0; i < 3'( __const__num_outports_at_up_ru_routing ); i += 1'd1 )
      give__rdy[2'(i)] = 1'd0;
    if ( get__rdy ) begin
      give__rdy[out_dir] = 1'd1;
    end
  end

  assign give__ret[0] = get__ret;
  assign give_ens[0:0] = give__en[0];
  assign give__ret[1] = get__ret;
  assign give_ens[1:1] = give__en[1];
  assign give__ret[2] = get__ret;
  assign give_ens[2:2] = give__en[2];
  assign give__ret[3] = get__ret;
  assign give_ens[3:3] = give__en[3];

endmodule


// PyMTL Component RegEnRst Definition
// At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/registers.py

module RegEnRst__Type_Bits17__reset_value_1
(
  input  logic [0:0] clk ,
  input  logic [0:0] en ,
  input  logic [16:0] in_ ,
  output logic [16:0] out ,
  input  logic [0:0] reset 
);
  localparam logic [0:0] __const__reset_value_at_up_regenrst  = 1'd1;

  // PyMTL Update Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/registers.py:55
  // @update_ff
  // def up_regenrst():
  //   if s.reset: s.out <<= reset_value
  //   elif s.en:  s.out <<= s.in_
  
  always_ff @(posedge clk) begin : up_regenrst
    if ( reset ) begin
      out <= 17'( __const__reset_value_at_up_regenrst );
    end
    else if ( en ) begin
      out <= in_;
    end
  end

endmodule


// PyMTL Component RoundRobinArbiterEn Definition
// At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/arbiters.py

module RoundRobinArbiterEn__nreqs_17
(
  input  logic [0:0] clk ,
  input  logic [0:0] en ,
  output logic [16:0] grants ,
  input  logic [16:0] reqs ,
  input  logic [0:0] reset 
);
  localparam logic [4:0] __const__nreqs_at_comb_reqs_int  = 5'd17;
  localparam logic [5:0] __const__nreqsX2_at_comb_reqs_int  = 6'd34;
  localparam logic [4:0] __const__nreqs_at_comb_grants  = 5'd17;
  localparam logic [4:0] __const__nreqs_at_comb_priority_int  = 5'd17;
  localparam logic [5:0] __const__nreqsX2_at_comb_priority_int  = 6'd34;
  localparam logic [5:0] __const__nreqsX2_at_comb_kills  = 6'd34;
  localparam logic [5:0] __const__nreqsX2_at_comb_grants_int  = 6'd34;
  logic [33:0] grants_int;
  logic [34:0] kills;
  logic [0:0] priority_en;
  logic [33:0] priority_int;
  logic [33:0] reqs_int;
  //-------------------------------------------------------------
  // Component priority_reg
  //-------------------------------------------------------------

  logic [0:0] priority_reg__clk;
  logic [0:0] priority_reg__en;
  logic [16:0] priority_reg__in_;
  logic [16:0] priority_reg__out;
  logic [0:0] priority_reg__reset;

  RegEnRst__Type_Bits17__reset_value_1 priority_reg
  (
    .clk( priority_reg__clk ),
    .en( priority_reg__en ),
    .in_( priority_reg__in_ ),
    .out( priority_reg__out ),
    .reset( priority_reg__reset )
  );

  //-------------------------------------------------------------
  // End of component priority_reg
  //-------------------------------------------------------------

  // PyMTL Update Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/arbiters.py:118
  // @update
  // def comb_grants():
  //   for i in range( nreqs ):
  //     s.grants[i] @= s.grants_int[i] | s.grants_int[nreqs+i]
  
  always_comb begin : comb_grants
    for ( int unsigned i = 1'd0; i < 5'( __const__nreqs_at_comb_grants ); i += 1'd1 )
      grants[5'(i)] = grants_int[6'(i)] | grants_int[6'( __const__nreqs_at_comb_grants ) + 6'(i)];
  end

  // PyMTL Update Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/arbiters.py:141
  // @update
  // def comb_grants_int():
  //   for i in range( nreqsX2 ):
  //     if s.priority_int[i]:
  //       s.grants_int[i] @= s.reqs_int[i]
  //     else:
  //       s.grants_int[i] @= ~s.kills[i] & s.reqs_int[i]
  
  always_comb begin : comb_grants_int
    for ( int unsigned i = 1'd0; i < 6'( __const__nreqsX2_at_comb_grants_int ); i += 1'd1 )
      if ( priority_int[6'(i)] ) begin
        grants_int[6'(i)] = reqs_int[6'(i)];
      end
      else
        grants_int[6'(i)] = ( ~kills[6'(i)] ) & reqs_int[6'(i)];
  end

  // PyMTL Update Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/arbiters.py:132
  // @update
  // def comb_kills():
  //   s.kills[0] @= 1
  //   for i in range( nreqsX2 ):
  //     if s.priority_int[i]:
  //       s.kills[i+1] @= s.reqs_int[i]
  //     else:
  //       s.kills[i+1] @= s.kills[i] | ( ~s.kills[i] & s.reqs_int[i] )
  
  always_comb begin : comb_kills
    kills[6'd0] = 1'd1;
    for ( int unsigned i = 1'd0; i < 6'( __const__nreqsX2_at_comb_kills ); i += 1'd1 )
      if ( priority_int[6'(i)] ) begin
        kills[6'(i) + 6'd1] = reqs_int[6'(i)];
      end
      else
        kills[6'(i) + 6'd1] = kills[6'(i)] | ( ( ~kills[6'(i)] ) & reqs_int[6'(i)] );
  end

  // PyMTL Update Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/arbiters.py:123
  // @update
  // def comb_priority_en():
  //   s.priority_en @= ( s.grants != 0 ) & s.en
  
  always_comb begin : comb_priority_en
    priority_en = ( grants != 17'd0 ) & en;
  end

  // PyMTL Update Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/arbiters.py:127
  // @update
  // def comb_priority_int():
  //   s.priority_int[    0:nreqs  ] @= s.priority_reg.out
  //   s.priority_int[nreqs:nreqsX2] @= 0
  
  always_comb begin : comb_priority_int
    priority_int[6'd16:6'd0] = priority_reg__out;
    priority_int[6'd33:6'( __const__nreqs_at_comb_priority_int )] = 17'd0;
  end

  // PyMTL Update Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/arbiters.py:113
  // @update
  // def comb_reqs_int():
  //   s.reqs_int [    0:nreqs  ] @= s.reqs
  //   s.reqs_int [nreqs:nreqsX2] @= s.reqs
  
  always_comb begin : comb_reqs_int
    reqs_int[6'd16:6'd0] = reqs;
    reqs_int[6'd33:6'( __const__nreqs_at_comb_reqs_int )] = reqs;
  end

  assign priority_reg__clk = clk;
  assign priority_reg__reset = reset;
  assign priority_reg__en = priority_en;
  assign priority_reg__in_[16:1] = grants[15:0];
  assign priority_reg__in_[0:0] = grants[16:16];

endmodule


// PyMTL Component Encoder Definition
// At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/encoders.py

module Encoder__in_nbits_17__out_nbits_5
(
  input  logic [0:0] clk ,
  input  logic [16:0] in_ ,
  output logic [4:0] out ,
  input  logic [0:0] reset 
);

  // PyMTL Update Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/encoders.py:28
  // @update
  // def encode():
  //   s.out @= 0
  //   for i in range( s.in_nbits ):
  //     if s.in_[i]:
  //       s.out @= i
  
  always_comb begin : encode
    out = 5'd0;
    for ( int unsigned i = 1'd0; i < 5'd17; i += 1'd1 )
      if ( in_[5'(i)] ) begin
        out = 5'(i);
      end
  end

endmodule


// PyMTL Component Mux Definition
// Full name: Mux__Type_mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd__ninputs_17
// At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/arithmetics.py

module Mux__8c0b3984e08c8eb1
(
  input  logic [0:0] clk ,
  input  mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd in_ [0:16],
  output mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd out ,
  input  logic [0:0] reset ,
  input  logic [4:0] sel 
);

  // PyMTL Update Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/arithmetics.py:13
  // @update
  // def up_mux():
  //   s.out @= s.in_[ s.sel ]
  
  always_comb begin : up_mux
    out = in_[sel];
  end

endmodule


// PyMTL Component SwitchUnitRTL Definition
// Full name: SwitchUnitRTL__PacketType_mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd__num_inports_17
// At /work/global/pp482/cgra/src/pymtl3_net/router/SwitchUnitRTL.py

module SwitchUnitRTL__f5f1dd767adb8768
(
  input  logic [0:0] clk ,
  output logic [0:0] out_ocp ,
  input  logic [0:0] reset ,
  output logic [0:0] get__en [0:16] ,
  input logic [0:0] get__rdy [0:16] ,
  input mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd get__ret [0:16] ,
  input logic [0:0] give__en  ,
  output logic [0:0] give__rdy  ,
  output mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd give__ret  
);
  localparam logic [4:0] __const__num_inports_at_up_get_en  = 5'd17;
  logic [0:0] get_en [0:16];
  logic [0:0] get_rdy [0:16];
  //-------------------------------------------------------------
  // Component arbiter
  //-------------------------------------------------------------

  logic [0:0] arbiter__clk;
  logic [0:0] arbiter__en;
  logic [16:0] arbiter__grants;
  logic [16:0] arbiter__reqs;
  logic [0:0] arbiter__reset;

  RoundRobinArbiterEn__nreqs_17 arbiter
  (
    .clk( arbiter__clk ),
    .en( arbiter__en ),
    .grants( arbiter__grants ),
    .reqs( arbiter__reqs ),
    .reset( arbiter__reset )
  );

  //-------------------------------------------------------------
  // End of component arbiter
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component encoder
  //-------------------------------------------------------------

  logic [0:0] encoder__clk;
  logic [16:0] encoder__in_;
  logic [4:0] encoder__out;
  logic [0:0] encoder__reset;

  Encoder__in_nbits_17__out_nbits_5 encoder
  (
    .clk( encoder__clk ),
    .in_( encoder__in_ ),
    .out( encoder__out ),
    .reset( encoder__reset )
  );

  //-------------------------------------------------------------
  // End of component encoder
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component mux
  //-------------------------------------------------------------

  logic [0:0] mux__clk;
  mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd mux__in_ [0:16];
  mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd mux__out;
  logic [0:0] mux__reset;
  logic [4:0] mux__sel;

  Mux__8c0b3984e08c8eb1 mux
  (
    .clk( mux__clk ),
    .in_( mux__in_ ),
    .out( mux__out ),
    .reset( mux__reset ),
    .sel( mux__sel )
  );

  //-------------------------------------------------------------
  // End of component mux
  //-------------------------------------------------------------

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/router/SwitchUnitRTL.py:60
  // @update
  // def up_get_en():
  //   for i in range( num_inports ):
  //     s.get_en[i] @= s.give.en & ( s.mux.sel==SelType(i) )
  
  always_comb begin : up_get_en
    for ( int unsigned i = 1'd0; i < 5'( __const__num_inports_at_up_get_en ); i += 1'd1 )
      get_en[5'(i)] = give__en & ( mux__sel == 5'( 5'(i) ) );
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/router/SwitchUnitRTL.py:56
  // @update
  // def up_give():
  //   s.give.rdy @= s.arbiter.grants > GrantType(0)
  
  always_comb begin : up_give
    give__rdy = arbiter__grants > 17'd0;
  end

  assign arbiter__clk = clk;
  assign arbiter__reset = reset;
  assign arbiter__en = 1'd1;
  assign mux__clk = clk;
  assign mux__reset = reset;
  assign give__ret = mux__out;
  assign encoder__clk = clk;
  assign encoder__reset = reset;
  assign encoder__in_ = arbiter__grants;
  assign mux__sel = encoder__out;
  assign arbiter__reqs[0:0] = get__rdy[0];
  assign mux__in_[0] = get__ret[0];
  assign get__en[0] = get_en[0];
  assign get_rdy[0] = get__rdy[0];
  assign arbiter__reqs[1:1] = get__rdy[1];
  assign mux__in_[1] = get__ret[1];
  assign get__en[1] = get_en[1];
  assign get_rdy[1] = get__rdy[1];
  assign arbiter__reqs[2:2] = get__rdy[2];
  assign mux__in_[2] = get__ret[2];
  assign get__en[2] = get_en[2];
  assign get_rdy[2] = get__rdy[2];
  assign arbiter__reqs[3:3] = get__rdy[3];
  assign mux__in_[3] = get__ret[3];
  assign get__en[3] = get_en[3];
  assign get_rdy[3] = get__rdy[3];
  assign arbiter__reqs[4:4] = get__rdy[4];
  assign mux__in_[4] = get__ret[4];
  assign get__en[4] = get_en[4];
  assign get_rdy[4] = get__rdy[4];
  assign arbiter__reqs[5:5] = get__rdy[5];
  assign mux__in_[5] = get__ret[5];
  assign get__en[5] = get_en[5];
  assign get_rdy[5] = get__rdy[5];
  assign arbiter__reqs[6:6] = get__rdy[6];
  assign mux__in_[6] = get__ret[6];
  assign get__en[6] = get_en[6];
  assign get_rdy[6] = get__rdy[6];
  assign arbiter__reqs[7:7] = get__rdy[7];
  assign mux__in_[7] = get__ret[7];
  assign get__en[7] = get_en[7];
  assign get_rdy[7] = get__rdy[7];
  assign arbiter__reqs[8:8] = get__rdy[8];
  assign mux__in_[8] = get__ret[8];
  assign get__en[8] = get_en[8];
  assign get_rdy[8] = get__rdy[8];
  assign arbiter__reqs[9:9] = get__rdy[9];
  assign mux__in_[9] = get__ret[9];
  assign get__en[9] = get_en[9];
  assign get_rdy[9] = get__rdy[9];
  assign arbiter__reqs[10:10] = get__rdy[10];
  assign mux__in_[10] = get__ret[10];
  assign get__en[10] = get_en[10];
  assign get_rdy[10] = get__rdy[10];
  assign arbiter__reqs[11:11] = get__rdy[11];
  assign mux__in_[11] = get__ret[11];
  assign get__en[11] = get_en[11];
  assign get_rdy[11] = get__rdy[11];
  assign arbiter__reqs[12:12] = get__rdy[12];
  assign mux__in_[12] = get__ret[12];
  assign get__en[12] = get_en[12];
  assign get_rdy[12] = get__rdy[12];
  assign arbiter__reqs[13:13] = get__rdy[13];
  assign mux__in_[13] = get__ret[13];
  assign get__en[13] = get_en[13];
  assign get_rdy[13] = get__rdy[13];
  assign arbiter__reqs[14:14] = get__rdy[14];
  assign mux__in_[14] = get__ret[14];
  assign get__en[14] = get_en[14];
  assign get_rdy[14] = get__rdy[14];
  assign arbiter__reqs[15:15] = get__rdy[15];
  assign mux__in_[15] = get__ret[15];
  assign get__en[15] = get_en[15];
  assign get_rdy[15] = get__rdy[15];
  assign arbiter__reqs[16:16] = get__rdy[16];
  assign mux__in_[16] = get__ret[16];
  assign get__en[16] = get_en[16];
  assign get_rdy[16] = get__rdy[16];

endmodule


// PyMTL Component XbarRTL Definition
// Full name: XbarRTL__PacketType_mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd__num_inports_17__num_outports_4__InputUnitType_InputUnitRTL__RouteUnitType_XbarRouteUnitRTL__SwitchUnitType_SwitchUnitRTL__OutputUnitType_OutputUnitRTL
// At /work/global/pp482/cgra/src/pymtl3_net/xbar/XbarRTL.py

module XbarRTL__beeeaf37e1c2bdee
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  input logic [0:0] recv__en [0:16] ,
  input mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd recv__msg [0:16] ,
  output logic [0:0] recv__rdy [0:16] ,
  output logic [0:0] send__en [0:3] ,
  output mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd send__msg [0:3] ,
  input logic [0:0] send__rdy [0:3] 
);
  //-------------------------------------------------------------
  // Component input_units[0:16]
  //-------------------------------------------------------------

  logic [0:0] input_units__clk [0:16];
  logic [0:0] input_units__reset [0:16];
  logic [0:0] input_units__give__en [0:16];
  logic [0:0] input_units__give__rdy [0:16];
  mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd input_units__give__ret [0:16];
  logic [0:0] input_units__recv__en [0:16];
  mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd input_units__recv__msg [0:16];
  logic [0:0] input_units__recv__rdy [0:16];

  InputUnitRTL__4d64fd7aa8b55c26 input_units__0
  (
    .clk( input_units__clk[0] ),
    .reset( input_units__reset[0] ),
    .give__en( input_units__give__en[0] ),
    .give__rdy( input_units__give__rdy[0] ),
    .give__ret( input_units__give__ret[0] ),
    .recv__en( input_units__recv__en[0] ),
    .recv__msg( input_units__recv__msg[0] ),
    .recv__rdy( input_units__recv__rdy[0] )
  );

  InputUnitRTL__4d64fd7aa8b55c26 input_units__1
  (
    .clk( input_units__clk[1] ),
    .reset( input_units__reset[1] ),
    .give__en( input_units__give__en[1] ),
    .give__rdy( input_units__give__rdy[1] ),
    .give__ret( input_units__give__ret[1] ),
    .recv__en( input_units__recv__en[1] ),
    .recv__msg( input_units__recv__msg[1] ),
    .recv__rdy( input_units__recv__rdy[1] )
  );

  InputUnitRTL__4d64fd7aa8b55c26 input_units__2
  (
    .clk( input_units__clk[2] ),
    .reset( input_units__reset[2] ),
    .give__en( input_units__give__en[2] ),
    .give__rdy( input_units__give__rdy[2] ),
    .give__ret( input_units__give__ret[2] ),
    .recv__en( input_units__recv__en[2] ),
    .recv__msg( input_units__recv__msg[2] ),
    .recv__rdy( input_units__recv__rdy[2] )
  );

  InputUnitRTL__4d64fd7aa8b55c26 input_units__3
  (
    .clk( input_units__clk[3] ),
    .reset( input_units__reset[3] ),
    .give__en( input_units__give__en[3] ),
    .give__rdy( input_units__give__rdy[3] ),
    .give__ret( input_units__give__ret[3] ),
    .recv__en( input_units__recv__en[3] ),
    .recv__msg( input_units__recv__msg[3] ),
    .recv__rdy( input_units__recv__rdy[3] )
  );

  InputUnitRTL__4d64fd7aa8b55c26 input_units__4
  (
    .clk( input_units__clk[4] ),
    .reset( input_units__reset[4] ),
    .give__en( input_units__give__en[4] ),
    .give__rdy( input_units__give__rdy[4] ),
    .give__ret( input_units__give__ret[4] ),
    .recv__en( input_units__recv__en[4] ),
    .recv__msg( input_units__recv__msg[4] ),
    .recv__rdy( input_units__recv__rdy[4] )
  );

  InputUnitRTL__4d64fd7aa8b55c26 input_units__5
  (
    .clk( input_units__clk[5] ),
    .reset( input_units__reset[5] ),
    .give__en( input_units__give__en[5] ),
    .give__rdy( input_units__give__rdy[5] ),
    .give__ret( input_units__give__ret[5] ),
    .recv__en( input_units__recv__en[5] ),
    .recv__msg( input_units__recv__msg[5] ),
    .recv__rdy( input_units__recv__rdy[5] )
  );

  InputUnitRTL__4d64fd7aa8b55c26 input_units__6
  (
    .clk( input_units__clk[6] ),
    .reset( input_units__reset[6] ),
    .give__en( input_units__give__en[6] ),
    .give__rdy( input_units__give__rdy[6] ),
    .give__ret( input_units__give__ret[6] ),
    .recv__en( input_units__recv__en[6] ),
    .recv__msg( input_units__recv__msg[6] ),
    .recv__rdy( input_units__recv__rdy[6] )
  );

  InputUnitRTL__4d64fd7aa8b55c26 input_units__7
  (
    .clk( input_units__clk[7] ),
    .reset( input_units__reset[7] ),
    .give__en( input_units__give__en[7] ),
    .give__rdy( input_units__give__rdy[7] ),
    .give__ret( input_units__give__ret[7] ),
    .recv__en( input_units__recv__en[7] ),
    .recv__msg( input_units__recv__msg[7] ),
    .recv__rdy( input_units__recv__rdy[7] )
  );

  InputUnitRTL__4d64fd7aa8b55c26 input_units__8
  (
    .clk( input_units__clk[8] ),
    .reset( input_units__reset[8] ),
    .give__en( input_units__give__en[8] ),
    .give__rdy( input_units__give__rdy[8] ),
    .give__ret( input_units__give__ret[8] ),
    .recv__en( input_units__recv__en[8] ),
    .recv__msg( input_units__recv__msg[8] ),
    .recv__rdy( input_units__recv__rdy[8] )
  );

  InputUnitRTL__4d64fd7aa8b55c26 input_units__9
  (
    .clk( input_units__clk[9] ),
    .reset( input_units__reset[9] ),
    .give__en( input_units__give__en[9] ),
    .give__rdy( input_units__give__rdy[9] ),
    .give__ret( input_units__give__ret[9] ),
    .recv__en( input_units__recv__en[9] ),
    .recv__msg( input_units__recv__msg[9] ),
    .recv__rdy( input_units__recv__rdy[9] )
  );

  InputUnitRTL__4d64fd7aa8b55c26 input_units__10
  (
    .clk( input_units__clk[10] ),
    .reset( input_units__reset[10] ),
    .give__en( input_units__give__en[10] ),
    .give__rdy( input_units__give__rdy[10] ),
    .give__ret( input_units__give__ret[10] ),
    .recv__en( input_units__recv__en[10] ),
    .recv__msg( input_units__recv__msg[10] ),
    .recv__rdy( input_units__recv__rdy[10] )
  );

  InputUnitRTL__4d64fd7aa8b55c26 input_units__11
  (
    .clk( input_units__clk[11] ),
    .reset( input_units__reset[11] ),
    .give__en( input_units__give__en[11] ),
    .give__rdy( input_units__give__rdy[11] ),
    .give__ret( input_units__give__ret[11] ),
    .recv__en( input_units__recv__en[11] ),
    .recv__msg( input_units__recv__msg[11] ),
    .recv__rdy( input_units__recv__rdy[11] )
  );

  InputUnitRTL__4d64fd7aa8b55c26 input_units__12
  (
    .clk( input_units__clk[12] ),
    .reset( input_units__reset[12] ),
    .give__en( input_units__give__en[12] ),
    .give__rdy( input_units__give__rdy[12] ),
    .give__ret( input_units__give__ret[12] ),
    .recv__en( input_units__recv__en[12] ),
    .recv__msg( input_units__recv__msg[12] ),
    .recv__rdy( input_units__recv__rdy[12] )
  );

  InputUnitRTL__4d64fd7aa8b55c26 input_units__13
  (
    .clk( input_units__clk[13] ),
    .reset( input_units__reset[13] ),
    .give__en( input_units__give__en[13] ),
    .give__rdy( input_units__give__rdy[13] ),
    .give__ret( input_units__give__ret[13] ),
    .recv__en( input_units__recv__en[13] ),
    .recv__msg( input_units__recv__msg[13] ),
    .recv__rdy( input_units__recv__rdy[13] )
  );

  InputUnitRTL__4d64fd7aa8b55c26 input_units__14
  (
    .clk( input_units__clk[14] ),
    .reset( input_units__reset[14] ),
    .give__en( input_units__give__en[14] ),
    .give__rdy( input_units__give__rdy[14] ),
    .give__ret( input_units__give__ret[14] ),
    .recv__en( input_units__recv__en[14] ),
    .recv__msg( input_units__recv__msg[14] ),
    .recv__rdy( input_units__recv__rdy[14] )
  );

  InputUnitRTL__4d64fd7aa8b55c26 input_units__15
  (
    .clk( input_units__clk[15] ),
    .reset( input_units__reset[15] ),
    .give__en( input_units__give__en[15] ),
    .give__rdy( input_units__give__rdy[15] ),
    .give__ret( input_units__give__ret[15] ),
    .recv__en( input_units__recv__en[15] ),
    .recv__msg( input_units__recv__msg[15] ),
    .recv__rdy( input_units__recv__rdy[15] )
  );

  InputUnitRTL__4d64fd7aa8b55c26 input_units__16
  (
    .clk( input_units__clk[16] ),
    .reset( input_units__reset[16] ),
    .give__en( input_units__give__en[16] ),
    .give__rdy( input_units__give__rdy[16] ),
    .give__ret( input_units__give__ret[16] ),
    .recv__en( input_units__recv__en[16] ),
    .recv__msg( input_units__recv__msg[16] ),
    .recv__rdy( input_units__recv__rdy[16] )
  );

  //-------------------------------------------------------------
  // End of component input_units[0:16]
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component output_units[0:3]
  //-------------------------------------------------------------

  logic [0:0] output_units__clk [0:3];
  logic [0:0] output_units__reset [0:3];
  logic [0:0] output_units__get__en [0:3];
  logic [0:0] output_units__get__rdy [0:3];
  mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd output_units__get__ret [0:3];
  logic [0:0] output_units__send__en [0:3];
  mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd output_units__send__msg [0:3];
  logic [0:0] output_units__send__rdy [0:3];

  OutputUnitRTL__2e1f8078310e6e31 output_units__0
  (
    .clk( output_units__clk[0] ),
    .reset( output_units__reset[0] ),
    .get__en( output_units__get__en[0] ),
    .get__rdy( output_units__get__rdy[0] ),
    .get__ret( output_units__get__ret[0] ),
    .send__en( output_units__send__en[0] ),
    .send__msg( output_units__send__msg[0] ),
    .send__rdy( output_units__send__rdy[0] )
  );

  OutputUnitRTL__2e1f8078310e6e31 output_units__1
  (
    .clk( output_units__clk[1] ),
    .reset( output_units__reset[1] ),
    .get__en( output_units__get__en[1] ),
    .get__rdy( output_units__get__rdy[1] ),
    .get__ret( output_units__get__ret[1] ),
    .send__en( output_units__send__en[1] ),
    .send__msg( output_units__send__msg[1] ),
    .send__rdy( output_units__send__rdy[1] )
  );

  OutputUnitRTL__2e1f8078310e6e31 output_units__2
  (
    .clk( output_units__clk[2] ),
    .reset( output_units__reset[2] ),
    .get__en( output_units__get__en[2] ),
    .get__rdy( output_units__get__rdy[2] ),
    .get__ret( output_units__get__ret[2] ),
    .send__en( output_units__send__en[2] ),
    .send__msg( output_units__send__msg[2] ),
    .send__rdy( output_units__send__rdy[2] )
  );

  OutputUnitRTL__2e1f8078310e6e31 output_units__3
  (
    .clk( output_units__clk[3] ),
    .reset( output_units__reset[3] ),
    .get__en( output_units__get__en[3] ),
    .get__rdy( output_units__get__rdy[3] ),
    .get__ret( output_units__get__ret[3] ),
    .send__en( output_units__send__en[3] ),
    .send__msg( output_units__send__msg[3] ),
    .send__rdy( output_units__send__rdy[3] )
  );

  //-------------------------------------------------------------
  // End of component output_units[0:3]
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component route_units[0:16]
  //-------------------------------------------------------------

  logic [0:0] route_units__clk [0:16];
  logic [0:0] route_units__reset [0:16];
  logic [0:0] route_units__get__en [0:16];
  logic [0:0] route_units__get__rdy [0:16];
  mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd route_units__get__ret [0:16];
  logic [0:0] route_units__give__en [0:16][0:3];
  logic [0:0] route_units__give__rdy [0:16][0:3];
  mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd route_units__give__ret [0:16][0:3];

  XbarRouteUnitRTL__3ab4e489d96abc6b route_units__0
  (
    .clk( route_units__clk[0] ),
    .reset( route_units__reset[0] ),
    .get__en( route_units__get__en[0] ),
    .get__rdy( route_units__get__rdy[0] ),
    .get__ret( route_units__get__ret[0] ),
    .give__en( route_units__give__en[0] ),
    .give__rdy( route_units__give__rdy[0] ),
    .give__ret( route_units__give__ret[0] )
  );

  XbarRouteUnitRTL__3ab4e489d96abc6b route_units__1
  (
    .clk( route_units__clk[1] ),
    .reset( route_units__reset[1] ),
    .get__en( route_units__get__en[1] ),
    .get__rdy( route_units__get__rdy[1] ),
    .get__ret( route_units__get__ret[1] ),
    .give__en( route_units__give__en[1] ),
    .give__rdy( route_units__give__rdy[1] ),
    .give__ret( route_units__give__ret[1] )
  );

  XbarRouteUnitRTL__3ab4e489d96abc6b route_units__2
  (
    .clk( route_units__clk[2] ),
    .reset( route_units__reset[2] ),
    .get__en( route_units__get__en[2] ),
    .get__rdy( route_units__get__rdy[2] ),
    .get__ret( route_units__get__ret[2] ),
    .give__en( route_units__give__en[2] ),
    .give__rdy( route_units__give__rdy[2] ),
    .give__ret( route_units__give__ret[2] )
  );

  XbarRouteUnitRTL__3ab4e489d96abc6b route_units__3
  (
    .clk( route_units__clk[3] ),
    .reset( route_units__reset[3] ),
    .get__en( route_units__get__en[3] ),
    .get__rdy( route_units__get__rdy[3] ),
    .get__ret( route_units__get__ret[3] ),
    .give__en( route_units__give__en[3] ),
    .give__rdy( route_units__give__rdy[3] ),
    .give__ret( route_units__give__ret[3] )
  );

  XbarRouteUnitRTL__3ab4e489d96abc6b route_units__4
  (
    .clk( route_units__clk[4] ),
    .reset( route_units__reset[4] ),
    .get__en( route_units__get__en[4] ),
    .get__rdy( route_units__get__rdy[4] ),
    .get__ret( route_units__get__ret[4] ),
    .give__en( route_units__give__en[4] ),
    .give__rdy( route_units__give__rdy[4] ),
    .give__ret( route_units__give__ret[4] )
  );

  XbarRouteUnitRTL__3ab4e489d96abc6b route_units__5
  (
    .clk( route_units__clk[5] ),
    .reset( route_units__reset[5] ),
    .get__en( route_units__get__en[5] ),
    .get__rdy( route_units__get__rdy[5] ),
    .get__ret( route_units__get__ret[5] ),
    .give__en( route_units__give__en[5] ),
    .give__rdy( route_units__give__rdy[5] ),
    .give__ret( route_units__give__ret[5] )
  );

  XbarRouteUnitRTL__3ab4e489d96abc6b route_units__6
  (
    .clk( route_units__clk[6] ),
    .reset( route_units__reset[6] ),
    .get__en( route_units__get__en[6] ),
    .get__rdy( route_units__get__rdy[6] ),
    .get__ret( route_units__get__ret[6] ),
    .give__en( route_units__give__en[6] ),
    .give__rdy( route_units__give__rdy[6] ),
    .give__ret( route_units__give__ret[6] )
  );

  XbarRouteUnitRTL__3ab4e489d96abc6b route_units__7
  (
    .clk( route_units__clk[7] ),
    .reset( route_units__reset[7] ),
    .get__en( route_units__get__en[7] ),
    .get__rdy( route_units__get__rdy[7] ),
    .get__ret( route_units__get__ret[7] ),
    .give__en( route_units__give__en[7] ),
    .give__rdy( route_units__give__rdy[7] ),
    .give__ret( route_units__give__ret[7] )
  );

  XbarRouteUnitRTL__3ab4e489d96abc6b route_units__8
  (
    .clk( route_units__clk[8] ),
    .reset( route_units__reset[8] ),
    .get__en( route_units__get__en[8] ),
    .get__rdy( route_units__get__rdy[8] ),
    .get__ret( route_units__get__ret[8] ),
    .give__en( route_units__give__en[8] ),
    .give__rdy( route_units__give__rdy[8] ),
    .give__ret( route_units__give__ret[8] )
  );

  XbarRouteUnitRTL__3ab4e489d96abc6b route_units__9
  (
    .clk( route_units__clk[9] ),
    .reset( route_units__reset[9] ),
    .get__en( route_units__get__en[9] ),
    .get__rdy( route_units__get__rdy[9] ),
    .get__ret( route_units__get__ret[9] ),
    .give__en( route_units__give__en[9] ),
    .give__rdy( route_units__give__rdy[9] ),
    .give__ret( route_units__give__ret[9] )
  );

  XbarRouteUnitRTL__3ab4e489d96abc6b route_units__10
  (
    .clk( route_units__clk[10] ),
    .reset( route_units__reset[10] ),
    .get__en( route_units__get__en[10] ),
    .get__rdy( route_units__get__rdy[10] ),
    .get__ret( route_units__get__ret[10] ),
    .give__en( route_units__give__en[10] ),
    .give__rdy( route_units__give__rdy[10] ),
    .give__ret( route_units__give__ret[10] )
  );

  XbarRouteUnitRTL__3ab4e489d96abc6b route_units__11
  (
    .clk( route_units__clk[11] ),
    .reset( route_units__reset[11] ),
    .get__en( route_units__get__en[11] ),
    .get__rdy( route_units__get__rdy[11] ),
    .get__ret( route_units__get__ret[11] ),
    .give__en( route_units__give__en[11] ),
    .give__rdy( route_units__give__rdy[11] ),
    .give__ret( route_units__give__ret[11] )
  );

  XbarRouteUnitRTL__3ab4e489d96abc6b route_units__12
  (
    .clk( route_units__clk[12] ),
    .reset( route_units__reset[12] ),
    .get__en( route_units__get__en[12] ),
    .get__rdy( route_units__get__rdy[12] ),
    .get__ret( route_units__get__ret[12] ),
    .give__en( route_units__give__en[12] ),
    .give__rdy( route_units__give__rdy[12] ),
    .give__ret( route_units__give__ret[12] )
  );

  XbarRouteUnitRTL__3ab4e489d96abc6b route_units__13
  (
    .clk( route_units__clk[13] ),
    .reset( route_units__reset[13] ),
    .get__en( route_units__get__en[13] ),
    .get__rdy( route_units__get__rdy[13] ),
    .get__ret( route_units__get__ret[13] ),
    .give__en( route_units__give__en[13] ),
    .give__rdy( route_units__give__rdy[13] ),
    .give__ret( route_units__give__ret[13] )
  );

  XbarRouteUnitRTL__3ab4e489d96abc6b route_units__14
  (
    .clk( route_units__clk[14] ),
    .reset( route_units__reset[14] ),
    .get__en( route_units__get__en[14] ),
    .get__rdy( route_units__get__rdy[14] ),
    .get__ret( route_units__get__ret[14] ),
    .give__en( route_units__give__en[14] ),
    .give__rdy( route_units__give__rdy[14] ),
    .give__ret( route_units__give__ret[14] )
  );

  XbarRouteUnitRTL__3ab4e489d96abc6b route_units__15
  (
    .clk( route_units__clk[15] ),
    .reset( route_units__reset[15] ),
    .get__en( route_units__get__en[15] ),
    .get__rdy( route_units__get__rdy[15] ),
    .get__ret( route_units__get__ret[15] ),
    .give__en( route_units__give__en[15] ),
    .give__rdy( route_units__give__rdy[15] ),
    .give__ret( route_units__give__ret[15] )
  );

  XbarRouteUnitRTL__3ab4e489d96abc6b route_units__16
  (
    .clk( route_units__clk[16] ),
    .reset( route_units__reset[16] ),
    .get__en( route_units__get__en[16] ),
    .get__rdy( route_units__get__rdy[16] ),
    .get__ret( route_units__get__ret[16] ),
    .give__en( route_units__give__en[16] ),
    .give__rdy( route_units__give__rdy[16] ),
    .give__ret( route_units__give__ret[16] )
  );

  //-------------------------------------------------------------
  // End of component route_units[0:16]
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component switch_units[0:3]
  //-------------------------------------------------------------

  logic [0:0] switch_units__clk [0:3];
  logic [0:0] switch_units__out_ocp [0:3];
  logic [0:0] switch_units__reset [0:3];
  logic [0:0] switch_units__get__en [0:3][0:16];
  logic [0:0] switch_units__get__rdy [0:3][0:16];
  mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd switch_units__get__ret [0:3][0:16];
  logic [0:0] switch_units__give__en [0:3];
  logic [0:0] switch_units__give__rdy [0:3];
  mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd switch_units__give__ret [0:3];

  SwitchUnitRTL__f5f1dd767adb8768 switch_units__0
  (
    .clk( switch_units__clk[0] ),
    .out_ocp( switch_units__out_ocp[0] ),
    .reset( switch_units__reset[0] ),
    .get__en( switch_units__get__en[0] ),
    .get__rdy( switch_units__get__rdy[0] ),
    .get__ret( switch_units__get__ret[0] ),
    .give__en( switch_units__give__en[0] ),
    .give__rdy( switch_units__give__rdy[0] ),
    .give__ret( switch_units__give__ret[0] )
  );

  SwitchUnitRTL__f5f1dd767adb8768 switch_units__1
  (
    .clk( switch_units__clk[1] ),
    .out_ocp( switch_units__out_ocp[1] ),
    .reset( switch_units__reset[1] ),
    .get__en( switch_units__get__en[1] ),
    .get__rdy( switch_units__get__rdy[1] ),
    .get__ret( switch_units__get__ret[1] ),
    .give__en( switch_units__give__en[1] ),
    .give__rdy( switch_units__give__rdy[1] ),
    .give__ret( switch_units__give__ret[1] )
  );

  SwitchUnitRTL__f5f1dd767adb8768 switch_units__2
  (
    .clk( switch_units__clk[2] ),
    .out_ocp( switch_units__out_ocp[2] ),
    .reset( switch_units__reset[2] ),
    .get__en( switch_units__get__en[2] ),
    .get__rdy( switch_units__get__rdy[2] ),
    .get__ret( switch_units__get__ret[2] ),
    .give__en( switch_units__give__en[2] ),
    .give__rdy( switch_units__give__rdy[2] ),
    .give__ret( switch_units__give__ret[2] )
  );

  SwitchUnitRTL__f5f1dd767adb8768 switch_units__3
  (
    .clk( switch_units__clk[3] ),
    .out_ocp( switch_units__out_ocp[3] ),
    .reset( switch_units__reset[3] ),
    .get__en( switch_units__get__en[3] ),
    .get__rdy( switch_units__get__rdy[3] ),
    .get__ret( switch_units__get__ret[3] ),
    .give__en( switch_units__give__en[3] ),
    .give__rdy( switch_units__give__rdy[3] ),
    .give__ret( switch_units__give__ret[3] )
  );

  //-------------------------------------------------------------
  // End of component switch_units[0:3]
  //-------------------------------------------------------------

  assign input_units__clk[0] = clk;
  assign input_units__reset[0] = reset;
  assign input_units__clk[1] = clk;
  assign input_units__reset[1] = reset;
  assign input_units__clk[2] = clk;
  assign input_units__reset[2] = reset;
  assign input_units__clk[3] = clk;
  assign input_units__reset[3] = reset;
  assign input_units__clk[4] = clk;
  assign input_units__reset[4] = reset;
  assign input_units__clk[5] = clk;
  assign input_units__reset[5] = reset;
  assign input_units__clk[6] = clk;
  assign input_units__reset[6] = reset;
  assign input_units__clk[7] = clk;
  assign input_units__reset[7] = reset;
  assign input_units__clk[8] = clk;
  assign input_units__reset[8] = reset;
  assign input_units__clk[9] = clk;
  assign input_units__reset[9] = reset;
  assign input_units__clk[10] = clk;
  assign input_units__reset[10] = reset;
  assign input_units__clk[11] = clk;
  assign input_units__reset[11] = reset;
  assign input_units__clk[12] = clk;
  assign input_units__reset[12] = reset;
  assign input_units__clk[13] = clk;
  assign input_units__reset[13] = reset;
  assign input_units__clk[14] = clk;
  assign input_units__reset[14] = reset;
  assign input_units__clk[15] = clk;
  assign input_units__reset[15] = reset;
  assign input_units__clk[16] = clk;
  assign input_units__reset[16] = reset;
  assign route_units__clk[0] = clk;
  assign route_units__reset[0] = reset;
  assign route_units__clk[1] = clk;
  assign route_units__reset[1] = reset;
  assign route_units__clk[2] = clk;
  assign route_units__reset[2] = reset;
  assign route_units__clk[3] = clk;
  assign route_units__reset[3] = reset;
  assign route_units__clk[4] = clk;
  assign route_units__reset[4] = reset;
  assign route_units__clk[5] = clk;
  assign route_units__reset[5] = reset;
  assign route_units__clk[6] = clk;
  assign route_units__reset[6] = reset;
  assign route_units__clk[7] = clk;
  assign route_units__reset[7] = reset;
  assign route_units__clk[8] = clk;
  assign route_units__reset[8] = reset;
  assign route_units__clk[9] = clk;
  assign route_units__reset[9] = reset;
  assign route_units__clk[10] = clk;
  assign route_units__reset[10] = reset;
  assign route_units__clk[11] = clk;
  assign route_units__reset[11] = reset;
  assign route_units__clk[12] = clk;
  assign route_units__reset[12] = reset;
  assign route_units__clk[13] = clk;
  assign route_units__reset[13] = reset;
  assign route_units__clk[14] = clk;
  assign route_units__reset[14] = reset;
  assign route_units__clk[15] = clk;
  assign route_units__reset[15] = reset;
  assign route_units__clk[16] = clk;
  assign route_units__reset[16] = reset;
  assign switch_units__clk[0] = clk;
  assign switch_units__reset[0] = reset;
  assign switch_units__clk[1] = clk;
  assign switch_units__reset[1] = reset;
  assign switch_units__clk[2] = clk;
  assign switch_units__reset[2] = reset;
  assign switch_units__clk[3] = clk;
  assign switch_units__reset[3] = reset;
  assign output_units__clk[0] = clk;
  assign output_units__reset[0] = reset;
  assign output_units__clk[1] = clk;
  assign output_units__reset[1] = reset;
  assign output_units__clk[2] = clk;
  assign output_units__reset[2] = reset;
  assign output_units__clk[3] = clk;
  assign output_units__reset[3] = reset;
  assign input_units__recv__en[0] = recv__en[0];
  assign input_units__recv__msg[0] = recv__msg[0];
  assign recv__rdy[0] = input_units__recv__rdy[0];
  assign input_units__give__en[0] = route_units__get__en[0];
  assign route_units__get__rdy[0] = input_units__give__rdy[0];
  assign route_units__get__ret[0] = input_units__give__ret[0];
  assign input_units__recv__en[1] = recv__en[1];
  assign input_units__recv__msg[1] = recv__msg[1];
  assign recv__rdy[1] = input_units__recv__rdy[1];
  assign input_units__give__en[1] = route_units__get__en[1];
  assign route_units__get__rdy[1] = input_units__give__rdy[1];
  assign route_units__get__ret[1] = input_units__give__ret[1];
  assign input_units__recv__en[2] = recv__en[2];
  assign input_units__recv__msg[2] = recv__msg[2];
  assign recv__rdy[2] = input_units__recv__rdy[2];
  assign input_units__give__en[2] = route_units__get__en[2];
  assign route_units__get__rdy[2] = input_units__give__rdy[2];
  assign route_units__get__ret[2] = input_units__give__ret[2];
  assign input_units__recv__en[3] = recv__en[3];
  assign input_units__recv__msg[3] = recv__msg[3];
  assign recv__rdy[3] = input_units__recv__rdy[3];
  assign input_units__give__en[3] = route_units__get__en[3];
  assign route_units__get__rdy[3] = input_units__give__rdy[3];
  assign route_units__get__ret[3] = input_units__give__ret[3];
  assign input_units__recv__en[4] = recv__en[4];
  assign input_units__recv__msg[4] = recv__msg[4];
  assign recv__rdy[4] = input_units__recv__rdy[4];
  assign input_units__give__en[4] = route_units__get__en[4];
  assign route_units__get__rdy[4] = input_units__give__rdy[4];
  assign route_units__get__ret[4] = input_units__give__ret[4];
  assign input_units__recv__en[5] = recv__en[5];
  assign input_units__recv__msg[5] = recv__msg[5];
  assign recv__rdy[5] = input_units__recv__rdy[5];
  assign input_units__give__en[5] = route_units__get__en[5];
  assign route_units__get__rdy[5] = input_units__give__rdy[5];
  assign route_units__get__ret[5] = input_units__give__ret[5];
  assign input_units__recv__en[6] = recv__en[6];
  assign input_units__recv__msg[6] = recv__msg[6];
  assign recv__rdy[6] = input_units__recv__rdy[6];
  assign input_units__give__en[6] = route_units__get__en[6];
  assign route_units__get__rdy[6] = input_units__give__rdy[6];
  assign route_units__get__ret[6] = input_units__give__ret[6];
  assign input_units__recv__en[7] = recv__en[7];
  assign input_units__recv__msg[7] = recv__msg[7];
  assign recv__rdy[7] = input_units__recv__rdy[7];
  assign input_units__give__en[7] = route_units__get__en[7];
  assign route_units__get__rdy[7] = input_units__give__rdy[7];
  assign route_units__get__ret[7] = input_units__give__ret[7];
  assign input_units__recv__en[8] = recv__en[8];
  assign input_units__recv__msg[8] = recv__msg[8];
  assign recv__rdy[8] = input_units__recv__rdy[8];
  assign input_units__give__en[8] = route_units__get__en[8];
  assign route_units__get__rdy[8] = input_units__give__rdy[8];
  assign route_units__get__ret[8] = input_units__give__ret[8];
  assign input_units__recv__en[9] = recv__en[9];
  assign input_units__recv__msg[9] = recv__msg[9];
  assign recv__rdy[9] = input_units__recv__rdy[9];
  assign input_units__give__en[9] = route_units__get__en[9];
  assign route_units__get__rdy[9] = input_units__give__rdy[9];
  assign route_units__get__ret[9] = input_units__give__ret[9];
  assign input_units__recv__en[10] = recv__en[10];
  assign input_units__recv__msg[10] = recv__msg[10];
  assign recv__rdy[10] = input_units__recv__rdy[10];
  assign input_units__give__en[10] = route_units__get__en[10];
  assign route_units__get__rdy[10] = input_units__give__rdy[10];
  assign route_units__get__ret[10] = input_units__give__ret[10];
  assign input_units__recv__en[11] = recv__en[11];
  assign input_units__recv__msg[11] = recv__msg[11];
  assign recv__rdy[11] = input_units__recv__rdy[11];
  assign input_units__give__en[11] = route_units__get__en[11];
  assign route_units__get__rdy[11] = input_units__give__rdy[11];
  assign route_units__get__ret[11] = input_units__give__ret[11];
  assign input_units__recv__en[12] = recv__en[12];
  assign input_units__recv__msg[12] = recv__msg[12];
  assign recv__rdy[12] = input_units__recv__rdy[12];
  assign input_units__give__en[12] = route_units__get__en[12];
  assign route_units__get__rdy[12] = input_units__give__rdy[12];
  assign route_units__get__ret[12] = input_units__give__ret[12];
  assign input_units__recv__en[13] = recv__en[13];
  assign input_units__recv__msg[13] = recv__msg[13];
  assign recv__rdy[13] = input_units__recv__rdy[13];
  assign input_units__give__en[13] = route_units__get__en[13];
  assign route_units__get__rdy[13] = input_units__give__rdy[13];
  assign route_units__get__ret[13] = input_units__give__ret[13];
  assign input_units__recv__en[14] = recv__en[14];
  assign input_units__recv__msg[14] = recv__msg[14];
  assign recv__rdy[14] = input_units__recv__rdy[14];
  assign input_units__give__en[14] = route_units__get__en[14];
  assign route_units__get__rdy[14] = input_units__give__rdy[14];
  assign route_units__get__ret[14] = input_units__give__ret[14];
  assign input_units__recv__en[15] = recv__en[15];
  assign input_units__recv__msg[15] = recv__msg[15];
  assign recv__rdy[15] = input_units__recv__rdy[15];
  assign input_units__give__en[15] = route_units__get__en[15];
  assign route_units__get__rdy[15] = input_units__give__rdy[15];
  assign route_units__get__ret[15] = input_units__give__ret[15];
  assign input_units__recv__en[16] = recv__en[16];
  assign input_units__recv__msg[16] = recv__msg[16];
  assign recv__rdy[16] = input_units__recv__rdy[16];
  assign input_units__give__en[16] = route_units__get__en[16];
  assign route_units__get__rdy[16] = input_units__give__rdy[16];
  assign route_units__get__ret[16] = input_units__give__ret[16];
  assign route_units__give__en[0][0] = switch_units__get__en[0][0];
  assign switch_units__get__rdy[0][0] = route_units__give__rdy[0][0];
  assign switch_units__get__ret[0][0] = route_units__give__ret[0][0];
  assign route_units__give__en[0][1] = switch_units__get__en[1][0];
  assign switch_units__get__rdy[1][0] = route_units__give__rdy[0][1];
  assign switch_units__get__ret[1][0] = route_units__give__ret[0][1];
  assign route_units__give__en[0][2] = switch_units__get__en[2][0];
  assign switch_units__get__rdy[2][0] = route_units__give__rdy[0][2];
  assign switch_units__get__ret[2][0] = route_units__give__ret[0][2];
  assign route_units__give__en[0][3] = switch_units__get__en[3][0];
  assign switch_units__get__rdy[3][0] = route_units__give__rdy[0][3];
  assign switch_units__get__ret[3][0] = route_units__give__ret[0][3];
  assign route_units__give__en[1][0] = switch_units__get__en[0][1];
  assign switch_units__get__rdy[0][1] = route_units__give__rdy[1][0];
  assign switch_units__get__ret[0][1] = route_units__give__ret[1][0];
  assign route_units__give__en[1][1] = switch_units__get__en[1][1];
  assign switch_units__get__rdy[1][1] = route_units__give__rdy[1][1];
  assign switch_units__get__ret[1][1] = route_units__give__ret[1][1];
  assign route_units__give__en[1][2] = switch_units__get__en[2][1];
  assign switch_units__get__rdy[2][1] = route_units__give__rdy[1][2];
  assign switch_units__get__ret[2][1] = route_units__give__ret[1][2];
  assign route_units__give__en[1][3] = switch_units__get__en[3][1];
  assign switch_units__get__rdy[3][1] = route_units__give__rdy[1][3];
  assign switch_units__get__ret[3][1] = route_units__give__ret[1][3];
  assign route_units__give__en[2][0] = switch_units__get__en[0][2];
  assign switch_units__get__rdy[0][2] = route_units__give__rdy[2][0];
  assign switch_units__get__ret[0][2] = route_units__give__ret[2][0];
  assign route_units__give__en[2][1] = switch_units__get__en[1][2];
  assign switch_units__get__rdy[1][2] = route_units__give__rdy[2][1];
  assign switch_units__get__ret[1][2] = route_units__give__ret[2][1];
  assign route_units__give__en[2][2] = switch_units__get__en[2][2];
  assign switch_units__get__rdy[2][2] = route_units__give__rdy[2][2];
  assign switch_units__get__ret[2][2] = route_units__give__ret[2][2];
  assign route_units__give__en[2][3] = switch_units__get__en[3][2];
  assign switch_units__get__rdy[3][2] = route_units__give__rdy[2][3];
  assign switch_units__get__ret[3][2] = route_units__give__ret[2][3];
  assign route_units__give__en[3][0] = switch_units__get__en[0][3];
  assign switch_units__get__rdy[0][3] = route_units__give__rdy[3][0];
  assign switch_units__get__ret[0][3] = route_units__give__ret[3][0];
  assign route_units__give__en[3][1] = switch_units__get__en[1][3];
  assign switch_units__get__rdy[1][3] = route_units__give__rdy[3][1];
  assign switch_units__get__ret[1][3] = route_units__give__ret[3][1];
  assign route_units__give__en[3][2] = switch_units__get__en[2][3];
  assign switch_units__get__rdy[2][3] = route_units__give__rdy[3][2];
  assign switch_units__get__ret[2][3] = route_units__give__ret[3][2];
  assign route_units__give__en[3][3] = switch_units__get__en[3][3];
  assign switch_units__get__rdy[3][3] = route_units__give__rdy[3][3];
  assign switch_units__get__ret[3][3] = route_units__give__ret[3][3];
  assign route_units__give__en[4][0] = switch_units__get__en[0][4];
  assign switch_units__get__rdy[0][4] = route_units__give__rdy[4][0];
  assign switch_units__get__ret[0][4] = route_units__give__ret[4][0];
  assign route_units__give__en[4][1] = switch_units__get__en[1][4];
  assign switch_units__get__rdy[1][4] = route_units__give__rdy[4][1];
  assign switch_units__get__ret[1][4] = route_units__give__ret[4][1];
  assign route_units__give__en[4][2] = switch_units__get__en[2][4];
  assign switch_units__get__rdy[2][4] = route_units__give__rdy[4][2];
  assign switch_units__get__ret[2][4] = route_units__give__ret[4][2];
  assign route_units__give__en[4][3] = switch_units__get__en[3][4];
  assign switch_units__get__rdy[3][4] = route_units__give__rdy[4][3];
  assign switch_units__get__ret[3][4] = route_units__give__ret[4][3];
  assign route_units__give__en[5][0] = switch_units__get__en[0][5];
  assign switch_units__get__rdy[0][5] = route_units__give__rdy[5][0];
  assign switch_units__get__ret[0][5] = route_units__give__ret[5][0];
  assign route_units__give__en[5][1] = switch_units__get__en[1][5];
  assign switch_units__get__rdy[1][5] = route_units__give__rdy[5][1];
  assign switch_units__get__ret[1][5] = route_units__give__ret[5][1];
  assign route_units__give__en[5][2] = switch_units__get__en[2][5];
  assign switch_units__get__rdy[2][5] = route_units__give__rdy[5][2];
  assign switch_units__get__ret[2][5] = route_units__give__ret[5][2];
  assign route_units__give__en[5][3] = switch_units__get__en[3][5];
  assign switch_units__get__rdy[3][5] = route_units__give__rdy[5][3];
  assign switch_units__get__ret[3][5] = route_units__give__ret[5][3];
  assign route_units__give__en[6][0] = switch_units__get__en[0][6];
  assign switch_units__get__rdy[0][6] = route_units__give__rdy[6][0];
  assign switch_units__get__ret[0][6] = route_units__give__ret[6][0];
  assign route_units__give__en[6][1] = switch_units__get__en[1][6];
  assign switch_units__get__rdy[1][6] = route_units__give__rdy[6][1];
  assign switch_units__get__ret[1][6] = route_units__give__ret[6][1];
  assign route_units__give__en[6][2] = switch_units__get__en[2][6];
  assign switch_units__get__rdy[2][6] = route_units__give__rdy[6][2];
  assign switch_units__get__ret[2][6] = route_units__give__ret[6][2];
  assign route_units__give__en[6][3] = switch_units__get__en[3][6];
  assign switch_units__get__rdy[3][6] = route_units__give__rdy[6][3];
  assign switch_units__get__ret[3][6] = route_units__give__ret[6][3];
  assign route_units__give__en[7][0] = switch_units__get__en[0][7];
  assign switch_units__get__rdy[0][7] = route_units__give__rdy[7][0];
  assign switch_units__get__ret[0][7] = route_units__give__ret[7][0];
  assign route_units__give__en[7][1] = switch_units__get__en[1][7];
  assign switch_units__get__rdy[1][7] = route_units__give__rdy[7][1];
  assign switch_units__get__ret[1][7] = route_units__give__ret[7][1];
  assign route_units__give__en[7][2] = switch_units__get__en[2][7];
  assign switch_units__get__rdy[2][7] = route_units__give__rdy[7][2];
  assign switch_units__get__ret[2][7] = route_units__give__ret[7][2];
  assign route_units__give__en[7][3] = switch_units__get__en[3][7];
  assign switch_units__get__rdy[3][7] = route_units__give__rdy[7][3];
  assign switch_units__get__ret[3][7] = route_units__give__ret[7][3];
  assign route_units__give__en[8][0] = switch_units__get__en[0][8];
  assign switch_units__get__rdy[0][8] = route_units__give__rdy[8][0];
  assign switch_units__get__ret[0][8] = route_units__give__ret[8][0];
  assign route_units__give__en[8][1] = switch_units__get__en[1][8];
  assign switch_units__get__rdy[1][8] = route_units__give__rdy[8][1];
  assign switch_units__get__ret[1][8] = route_units__give__ret[8][1];
  assign route_units__give__en[8][2] = switch_units__get__en[2][8];
  assign switch_units__get__rdy[2][8] = route_units__give__rdy[8][2];
  assign switch_units__get__ret[2][8] = route_units__give__ret[8][2];
  assign route_units__give__en[8][3] = switch_units__get__en[3][8];
  assign switch_units__get__rdy[3][8] = route_units__give__rdy[8][3];
  assign switch_units__get__ret[3][8] = route_units__give__ret[8][3];
  assign route_units__give__en[9][0] = switch_units__get__en[0][9];
  assign switch_units__get__rdy[0][9] = route_units__give__rdy[9][0];
  assign switch_units__get__ret[0][9] = route_units__give__ret[9][0];
  assign route_units__give__en[9][1] = switch_units__get__en[1][9];
  assign switch_units__get__rdy[1][9] = route_units__give__rdy[9][1];
  assign switch_units__get__ret[1][9] = route_units__give__ret[9][1];
  assign route_units__give__en[9][2] = switch_units__get__en[2][9];
  assign switch_units__get__rdy[2][9] = route_units__give__rdy[9][2];
  assign switch_units__get__ret[2][9] = route_units__give__ret[9][2];
  assign route_units__give__en[9][3] = switch_units__get__en[3][9];
  assign switch_units__get__rdy[3][9] = route_units__give__rdy[9][3];
  assign switch_units__get__ret[3][9] = route_units__give__ret[9][3];
  assign route_units__give__en[10][0] = switch_units__get__en[0][10];
  assign switch_units__get__rdy[0][10] = route_units__give__rdy[10][0];
  assign switch_units__get__ret[0][10] = route_units__give__ret[10][0];
  assign route_units__give__en[10][1] = switch_units__get__en[1][10];
  assign switch_units__get__rdy[1][10] = route_units__give__rdy[10][1];
  assign switch_units__get__ret[1][10] = route_units__give__ret[10][1];
  assign route_units__give__en[10][2] = switch_units__get__en[2][10];
  assign switch_units__get__rdy[2][10] = route_units__give__rdy[10][2];
  assign switch_units__get__ret[2][10] = route_units__give__ret[10][2];
  assign route_units__give__en[10][3] = switch_units__get__en[3][10];
  assign switch_units__get__rdy[3][10] = route_units__give__rdy[10][3];
  assign switch_units__get__ret[3][10] = route_units__give__ret[10][3];
  assign route_units__give__en[11][0] = switch_units__get__en[0][11];
  assign switch_units__get__rdy[0][11] = route_units__give__rdy[11][0];
  assign switch_units__get__ret[0][11] = route_units__give__ret[11][0];
  assign route_units__give__en[11][1] = switch_units__get__en[1][11];
  assign switch_units__get__rdy[1][11] = route_units__give__rdy[11][1];
  assign switch_units__get__ret[1][11] = route_units__give__ret[11][1];
  assign route_units__give__en[11][2] = switch_units__get__en[2][11];
  assign switch_units__get__rdy[2][11] = route_units__give__rdy[11][2];
  assign switch_units__get__ret[2][11] = route_units__give__ret[11][2];
  assign route_units__give__en[11][3] = switch_units__get__en[3][11];
  assign switch_units__get__rdy[3][11] = route_units__give__rdy[11][3];
  assign switch_units__get__ret[3][11] = route_units__give__ret[11][3];
  assign route_units__give__en[12][0] = switch_units__get__en[0][12];
  assign switch_units__get__rdy[0][12] = route_units__give__rdy[12][0];
  assign switch_units__get__ret[0][12] = route_units__give__ret[12][0];
  assign route_units__give__en[12][1] = switch_units__get__en[1][12];
  assign switch_units__get__rdy[1][12] = route_units__give__rdy[12][1];
  assign switch_units__get__ret[1][12] = route_units__give__ret[12][1];
  assign route_units__give__en[12][2] = switch_units__get__en[2][12];
  assign switch_units__get__rdy[2][12] = route_units__give__rdy[12][2];
  assign switch_units__get__ret[2][12] = route_units__give__ret[12][2];
  assign route_units__give__en[12][3] = switch_units__get__en[3][12];
  assign switch_units__get__rdy[3][12] = route_units__give__rdy[12][3];
  assign switch_units__get__ret[3][12] = route_units__give__ret[12][3];
  assign route_units__give__en[13][0] = switch_units__get__en[0][13];
  assign switch_units__get__rdy[0][13] = route_units__give__rdy[13][0];
  assign switch_units__get__ret[0][13] = route_units__give__ret[13][0];
  assign route_units__give__en[13][1] = switch_units__get__en[1][13];
  assign switch_units__get__rdy[1][13] = route_units__give__rdy[13][1];
  assign switch_units__get__ret[1][13] = route_units__give__ret[13][1];
  assign route_units__give__en[13][2] = switch_units__get__en[2][13];
  assign switch_units__get__rdy[2][13] = route_units__give__rdy[13][2];
  assign switch_units__get__ret[2][13] = route_units__give__ret[13][2];
  assign route_units__give__en[13][3] = switch_units__get__en[3][13];
  assign switch_units__get__rdy[3][13] = route_units__give__rdy[13][3];
  assign switch_units__get__ret[3][13] = route_units__give__ret[13][3];
  assign route_units__give__en[14][0] = switch_units__get__en[0][14];
  assign switch_units__get__rdy[0][14] = route_units__give__rdy[14][0];
  assign switch_units__get__ret[0][14] = route_units__give__ret[14][0];
  assign route_units__give__en[14][1] = switch_units__get__en[1][14];
  assign switch_units__get__rdy[1][14] = route_units__give__rdy[14][1];
  assign switch_units__get__ret[1][14] = route_units__give__ret[14][1];
  assign route_units__give__en[14][2] = switch_units__get__en[2][14];
  assign switch_units__get__rdy[2][14] = route_units__give__rdy[14][2];
  assign switch_units__get__ret[2][14] = route_units__give__ret[14][2];
  assign route_units__give__en[14][3] = switch_units__get__en[3][14];
  assign switch_units__get__rdy[3][14] = route_units__give__rdy[14][3];
  assign switch_units__get__ret[3][14] = route_units__give__ret[14][3];
  assign route_units__give__en[15][0] = switch_units__get__en[0][15];
  assign switch_units__get__rdy[0][15] = route_units__give__rdy[15][0];
  assign switch_units__get__ret[0][15] = route_units__give__ret[15][0];
  assign route_units__give__en[15][1] = switch_units__get__en[1][15];
  assign switch_units__get__rdy[1][15] = route_units__give__rdy[15][1];
  assign switch_units__get__ret[1][15] = route_units__give__ret[15][1];
  assign route_units__give__en[15][2] = switch_units__get__en[2][15];
  assign switch_units__get__rdy[2][15] = route_units__give__rdy[15][2];
  assign switch_units__get__ret[2][15] = route_units__give__ret[15][2];
  assign route_units__give__en[15][3] = switch_units__get__en[3][15];
  assign switch_units__get__rdy[3][15] = route_units__give__rdy[15][3];
  assign switch_units__get__ret[3][15] = route_units__give__ret[15][3];
  assign route_units__give__en[16][0] = switch_units__get__en[0][16];
  assign switch_units__get__rdy[0][16] = route_units__give__rdy[16][0];
  assign switch_units__get__ret[0][16] = route_units__give__ret[16][0];
  assign route_units__give__en[16][1] = switch_units__get__en[1][16];
  assign switch_units__get__rdy[1][16] = route_units__give__rdy[16][1];
  assign switch_units__get__ret[1][16] = route_units__give__ret[16][1];
  assign route_units__give__en[16][2] = switch_units__get__en[2][16];
  assign switch_units__get__rdy[2][16] = route_units__give__rdy[16][2];
  assign switch_units__get__ret[2][16] = route_units__give__ret[16][2];
  assign route_units__give__en[16][3] = switch_units__get__en[3][16];
  assign switch_units__get__rdy[3][16] = route_units__give__rdy[16][3];
  assign switch_units__get__ret[3][16] = route_units__give__ret[16][3];
  assign switch_units__give__en[0] = output_units__get__en[0];
  assign output_units__get__rdy[0] = switch_units__give__rdy[0];
  assign output_units__get__ret[0] = switch_units__give__ret[0];
  assign send__en[0] = output_units__send__en[0];
  assign send__msg[0] = output_units__send__msg[0];
  assign output_units__send__rdy[0] = send__rdy[0];
  assign switch_units__give__en[1] = output_units__get__en[1];
  assign output_units__get__rdy[1] = switch_units__give__rdy[1];
  assign output_units__get__ret[1] = switch_units__give__ret[1];
  assign send__en[1] = output_units__send__en[1];
  assign send__msg[1] = output_units__send__msg[1];
  assign output_units__send__rdy[1] = send__rdy[1];
  assign switch_units__give__en[2] = output_units__get__en[2];
  assign output_units__get__rdy[2] = switch_units__give__rdy[2];
  assign output_units__get__ret[2] = switch_units__give__ret[2];
  assign send__en[2] = output_units__send__en[2];
  assign send__msg[2] = output_units__send__msg[2];
  assign output_units__send__rdy[2] = send__rdy[2];
  assign switch_units__give__en[3] = output_units__get__en[3];
  assign output_units__get__rdy[3] = switch_units__give__rdy[3];
  assign output_units__get__ret[3] = switch_units__give__ret[3];
  assign send__en[3] = output_units__send__en[3];
  assign send__msg[3] = output_units__send__msg[3];
  assign output_units__send__rdy[3] = send__rdy[3];

endmodule


// PyMTL Component RespAdapter Definition
// Full name: RespAdapter__Req_CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7__Resp_CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7__id_0__num_requesters_17__num_responders_4
// At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py

module RespAdapter__9114518d27c5302f
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  output logic [0:0] master__req__en ,
  output CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 master__req__msg ,
  input logic [0:0] master__req__rdy ,
  input logic [0:0] master__resp__en ,
  input CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 master__resp__msg ,
  output logic [0:0] master__resp__rdy ,
  input logic [0:0] minion__req__en ,
  input mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd minion__req__msg ,
  output logic [0:0] minion__req__rdy ,
  output logic [0:0] minion__resp__en ,
  output mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 minion__resp__msg ,
  input logic [0:0] minion__resp__rdy 
);

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:153
  // @update
  // def up_master_req_msg():
  //   s.master.req.msg @= s.minion.req.msg.payload
  
  always_comb begin : up_master_req_msg
    master__req__msg = minion__req__msg.payload;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:157
  // @update
  // def up_minion_resp_msg():
  //   s.minion.resp.msg.dst @= s.master.resp.msg.opaque[ sl_src ]
  //   s.minion.resp.msg.payload @= s.master.resp.msg
  
  always_comb begin : up_minion_resp_msg
    minion__resp__msg.dst = master__resp__msg.opaque[3'd4:3'd0];
    minion__resp__msg.payload = master__resp__msg;
  end

  assign minion__req__rdy = master__req__rdy;
  assign minion__resp__en = master__resp__en;
  assign master__req__en = minion__req__en;
  assign master__resp__rdy = minion__resp__rdy;

endmodule


// PyMTL Component RespAdapter Definition
// Full name: RespAdapter__Req_CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7__Resp_CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7__id_1__num_requesters_17__num_responders_4
// At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py

module RespAdapter__da25727616f3bfbb
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  output logic [0:0] master__req__en ,
  output CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 master__req__msg ,
  input logic [0:0] master__req__rdy ,
  input logic [0:0] master__resp__en ,
  input CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 master__resp__msg ,
  output logic [0:0] master__resp__rdy ,
  input logic [0:0] minion__req__en ,
  input mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd minion__req__msg ,
  output logic [0:0] minion__req__rdy ,
  output logic [0:0] minion__resp__en ,
  output mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 minion__resp__msg ,
  input logic [0:0] minion__resp__rdy 
);

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:153
  // @update
  // def up_master_req_msg():
  //   s.master.req.msg @= s.minion.req.msg.payload
  
  always_comb begin : up_master_req_msg
    master__req__msg = minion__req__msg.payload;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:157
  // @update
  // def up_minion_resp_msg():
  //   s.minion.resp.msg.dst @= s.master.resp.msg.opaque[ sl_src ]
  //   s.minion.resp.msg.payload @= s.master.resp.msg
  
  always_comb begin : up_minion_resp_msg
    minion__resp__msg.dst = master__resp__msg.opaque[3'd4:3'd0];
    minion__resp__msg.payload = master__resp__msg;
  end

  assign minion__req__rdy = master__req__rdy;
  assign minion__resp__en = master__resp__en;
  assign master__req__en = minion__req__en;
  assign master__resp__rdy = minion__resp__rdy;

endmodule


// PyMTL Component RespAdapter Definition
// Full name: RespAdapter__Req_CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7__Resp_CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7__id_2__num_requesters_17__num_responders_4
// At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py

module RespAdapter__6260c5f9948e1ac1
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  output logic [0:0] master__req__en ,
  output CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 master__req__msg ,
  input logic [0:0] master__req__rdy ,
  input logic [0:0] master__resp__en ,
  input CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 master__resp__msg ,
  output logic [0:0] master__resp__rdy ,
  input logic [0:0] minion__req__en ,
  input mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd minion__req__msg ,
  output logic [0:0] minion__req__rdy ,
  output logic [0:0] minion__resp__en ,
  output mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 minion__resp__msg ,
  input logic [0:0] minion__resp__rdy 
);

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:153
  // @update
  // def up_master_req_msg():
  //   s.master.req.msg @= s.minion.req.msg.payload
  
  always_comb begin : up_master_req_msg
    master__req__msg = minion__req__msg.payload;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:157
  // @update
  // def up_minion_resp_msg():
  //   s.minion.resp.msg.dst @= s.master.resp.msg.opaque[ sl_src ]
  //   s.minion.resp.msg.payload @= s.master.resp.msg
  
  always_comb begin : up_minion_resp_msg
    minion__resp__msg.dst = master__resp__msg.opaque[3'd4:3'd0];
    minion__resp__msg.payload = master__resp__msg;
  end

  assign minion__req__rdy = master__req__rdy;
  assign minion__resp__en = master__resp__en;
  assign master__req__en = minion__req__en;
  assign master__resp__rdy = minion__resp__rdy;

endmodule


// PyMTL Component RespAdapter Definition
// Full name: RespAdapter__Req_CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7__Resp_CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7__id_3__num_requesters_17__num_responders_4
// At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py

module RespAdapter__27cecd8a1c68140b
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  output logic [0:0] master__req__en ,
  output CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 master__req__msg ,
  input logic [0:0] master__req__rdy ,
  input logic [0:0] master__resp__en ,
  input CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 master__resp__msg ,
  output logic [0:0] master__resp__rdy ,
  input logic [0:0] minion__req__en ,
  input mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd minion__req__msg ,
  output logic [0:0] minion__req__rdy ,
  output logic [0:0] minion__resp__en ,
  output mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 minion__resp__msg ,
  input logic [0:0] minion__resp__rdy 
);

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:153
  // @update
  // def up_master_req_msg():
  //   s.master.req.msg @= s.minion.req.msg.payload
  
  always_comb begin : up_master_req_msg
    master__req__msg = minion__req__msg.payload;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/adapters.py:157
  // @update
  // def up_minion_resp_msg():
  //   s.minion.resp.msg.dst @= s.master.resp.msg.opaque[ sl_src ]
  //   s.minion.resp.msg.payload @= s.master.resp.msg
  
  always_comb begin : up_minion_resp_msg
    minion__resp__msg.dst = master__resp__msg.opaque[3'd4:3'd0];
    minion__resp__msg.payload = master__resp__msg;
  end

  assign minion__req__rdy = master__req__rdy;
  assign minion__resp__en = master__resp__en;
  assign master__req__en = minion__req__en;
  assign master__resp__rdy = minion__resp__rdy;

endmodule


// PyMTL Component RegisterFile Definition
// Full name: RegisterFile__Type_mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709__nregs_2__rd_ports_1__wr_ports_1__const_zero_False
// At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/register_files.py

module RegisterFile__0e9bcf5aec3c75e3
(
  input  logic [0:0] clk ,
  input  logic [0:0] raddr [0:0],
  output mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 rdata [0:0],
  input  logic [0:0] reset ,
  input  logic [0:0] waddr [0:0],
  input  mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 wdata [0:0],
  input  logic [0:0] wen [0:0]
);
  localparam logic [0:0] __const__rd_ports_at_up_rf_read  = 1'd1;
  localparam logic [0:0] __const__wr_ports_at_up_rf_write  = 1'd1;
  mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 regs [0:1];

  // PyMTL Update Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/register_files.py:20
  // @update
  // def up_rf_read():
  //   for i in range( rd_ports ):
  //     s.rdata[i] @= s.regs[ s.raddr[i] ]
  
  always_comb begin : up_rf_read
    for ( int unsigned i = 1'd0; i < 1'( __const__rd_ports_at_up_rf_read ); i += 1'd1 )
      rdata[1'(i)] = regs[raddr[1'(i)]];
  end

  // PyMTL Update Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/register_files.py:32
  // @update_ff
  // def up_rf_write():
  //   for i in range( wr_ports ):
  //     if s.wen[i]:
  //       s.regs[ s.waddr[i] ] <<= s.wdata[i]
  
  always_ff @(posedge clk) begin : up_rf_write
    for ( int unsigned i = 1'd0; i < 1'( __const__wr_ports_at_up_rf_write ); i += 1'd1 )
      if ( wen[1'(i)] ) begin
        regs[waddr[1'(i)]] <= wdata[1'(i)];
      end
  end

endmodule


// PyMTL Component NormalQueueDpathRTL Definition
// Full name: NormalQueueDpathRTL__EntryType_mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709__num_entries_2
// At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/queues/queues.py

module NormalQueueDpathRTL__1691c478f96b5a2b
(
  input  logic [0:0] clk ,
  output mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 deq_ret ,
  input  mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 enq_msg ,
  input  logic [0:0] raddr ,
  input  logic [0:0] reset ,
  input  logic [0:0] waddr ,
  input  logic [0:0] wen 
);
  //-------------------------------------------------------------
  // Component queue
  //-------------------------------------------------------------

  logic [0:0] queue__clk;
  logic [0:0] queue__raddr [0:0];
  mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 queue__rdata [0:0];
  logic [0:0] queue__reset;
  logic [0:0] queue__waddr [0:0];
  mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 queue__wdata [0:0];
  logic [0:0] queue__wen [0:0];

  RegisterFile__0e9bcf5aec3c75e3 queue
  (
    .clk( queue__clk ),
    .raddr( queue__raddr ),
    .rdata( queue__rdata ),
    .reset( queue__reset ),
    .waddr( queue__waddr ),
    .wdata( queue__wdata ),
    .wen( queue__wen )
  );

  //-------------------------------------------------------------
  // End of component queue
  //-------------------------------------------------------------

  assign queue__clk = clk;
  assign queue__reset = reset;
  assign queue__raddr[0] = raddr;
  assign deq_ret = queue__rdata[0];
  assign queue__wen[0] = wen;
  assign queue__waddr[0] = waddr;
  assign queue__wdata[0] = enq_msg;

endmodule


// PyMTL Component NormalQueueRTL Definition
// Full name: NormalQueueRTL__EntryType_mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709__num_entries_2
// At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/queues/queues.py

module NormalQueueRTL__1691c478f96b5a2b
(
  input  logic [0:0] clk ,
  output logic [1:0] count ,
  input  logic [0:0] reset ,
  input logic [0:0] deq__en  ,
  output logic [0:0] deq__rdy  ,
  output mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 deq__ret  ,
  input logic [0:0] enq__en  ,
  input mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 enq__msg  ,
  output logic [0:0] enq__rdy  
);
  //-------------------------------------------------------------
  // Component ctrl
  //-------------------------------------------------------------

  logic [0:0] ctrl__clk;
  logic [1:0] ctrl__count;
  logic [0:0] ctrl__deq_en;
  logic [0:0] ctrl__deq_rdy;
  logic [0:0] ctrl__enq_en;
  logic [0:0] ctrl__enq_rdy;
  logic [0:0] ctrl__raddr;
  logic [0:0] ctrl__reset;
  logic [0:0] ctrl__waddr;
  logic [0:0] ctrl__wen;

  NormalQueueCtrlRTL__num_entries_2 ctrl
  (
    .clk( ctrl__clk ),
    .count( ctrl__count ),
    .deq_en( ctrl__deq_en ),
    .deq_rdy( ctrl__deq_rdy ),
    .enq_en( ctrl__enq_en ),
    .enq_rdy( ctrl__enq_rdy ),
    .raddr( ctrl__raddr ),
    .reset( ctrl__reset ),
    .waddr( ctrl__waddr ),
    .wen( ctrl__wen )
  );

  //-------------------------------------------------------------
  // End of component ctrl
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component dpath
  //-------------------------------------------------------------

  logic [0:0] dpath__clk;
  mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 dpath__deq_ret;
  mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 dpath__enq_msg;
  logic [0:0] dpath__raddr;
  logic [0:0] dpath__reset;
  logic [0:0] dpath__waddr;
  logic [0:0] dpath__wen;

  NormalQueueDpathRTL__1691c478f96b5a2b dpath
  (
    .clk( dpath__clk ),
    .deq_ret( dpath__deq_ret ),
    .enq_msg( dpath__enq_msg ),
    .raddr( dpath__raddr ),
    .reset( dpath__reset ),
    .waddr( dpath__waddr ),
    .wen( dpath__wen )
  );

  //-------------------------------------------------------------
  // End of component dpath
  //-------------------------------------------------------------

  assign ctrl__clk = clk;
  assign ctrl__reset = reset;
  assign dpath__clk = clk;
  assign dpath__reset = reset;
  assign dpath__wen = ctrl__wen;
  assign dpath__waddr = ctrl__waddr;
  assign dpath__raddr = ctrl__raddr;
  assign ctrl__enq_en = enq__en;
  assign enq__rdy = ctrl__enq_rdy;
  assign ctrl__deq_en = deq__en;
  assign deq__rdy = ctrl__deq_rdy;
  assign count = ctrl__count;
  assign dpath__enq_msg = enq__msg;
  assign deq__ret = dpath__deq_ret;

endmodule


// PyMTL Component InputUnitRTL Definition
// Full name: InputUnitRTL__PacketType_mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709__QueueType_NormalQueueRTL
// At /work/global/pp482/cgra/src/pymtl3_net/router/InputUnitRTL.py

module InputUnitRTL__c6fcc71c398d4ddc
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  input logic [0:0] give__en  ,
  output logic [0:0] give__rdy  ,
  output mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 give__ret  ,
  input logic [0:0] recv__en  ,
  input mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 recv__msg  ,
  output logic [0:0] recv__rdy  
);
  //-------------------------------------------------------------
  // Component queue
  //-------------------------------------------------------------

  logic [0:0] queue__clk;
  logic [1:0] queue__count;
  logic [0:0] queue__reset;
  logic [0:0] queue__deq__en;
  logic [0:0] queue__deq__rdy;
  mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 queue__deq__ret;
  logic [0:0] queue__enq__en;
  mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 queue__enq__msg;
  logic [0:0] queue__enq__rdy;

  NormalQueueRTL__1691c478f96b5a2b queue
  (
    .clk( queue__clk ),
    .count( queue__count ),
    .reset( queue__reset ),
    .deq__en( queue__deq__en ),
    .deq__rdy( queue__deq__rdy ),
    .deq__ret( queue__deq__ret ),
    .enq__en( queue__enq__en ),
    .enq__msg( queue__enq__msg ),
    .enq__rdy( queue__enq__rdy )
  );

  //-------------------------------------------------------------
  // End of component queue
  //-------------------------------------------------------------

  assign queue__clk = clk;
  assign queue__reset = reset;
  assign queue__enq__en = recv__en;
  assign queue__enq__msg = recv__msg;
  assign recv__rdy = queue__enq__rdy;
  assign queue__deq__en = give__en;
  assign give__rdy = queue__deq__rdy;
  assign give__ret = queue__deq__ret;

endmodule


// PyMTL Component OutputUnitRTL Definition
// Full name: OutputUnitRTL__PacketType_mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709__QueueType_None
// At /work/global/pp482/cgra/src/pymtl3_net/router/OutputUnitRTL.py

module OutputUnitRTL__57088be745a5c6d7
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  output logic [0:0] get__en  ,
  input logic [0:0] get__rdy  ,
  input mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 get__ret  ,
  output logic [0:0] send__en  ,
  output mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 send__msg  ,
  input logic [0:0] send__rdy  
);

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/router/OutputUnitRTL.py:50
  // s.send.msg //= lambda: s.get.ret if s.send.en else PacketType()
  
  always_comb begin : _lambda__s_dut_cgra_xcel_dpath_xbar_resp_net_output_units_0__send_msg
    send__msg = send__en ? get__ret : { 5'd0, { 1'd0, 14'd0, 32'd0, 7'd0 } };
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/router/OutputUnitRTL.py:52
  // @update
  // def up_get_send():
  //   s.get.en  @= s.get.rdy & s.send.rdy
  //   s.send.en @= s.get.rdy & s.send.rdy
  
  always_comb begin : up_get_send
    get__en = get__rdy & send__rdy;
    send__en = get__rdy & send__rdy;
  end

endmodule


// PyMTL Component XbarRouteUnitRTL Definition
// Full name: XbarRouteUnitRTL__PacketType_mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709__num_outports_17
// At /work/global/pp482/cgra/src/pymtl3_net/xbar/XbarRouteUnitRTL.py

module XbarRouteUnitRTL__c08e98d1fc89dc50
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  output logic [0:0] get__en  ,
  input logic [0:0] get__rdy  ,
  input mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 get__ret  ,
  input logic [0:0] give__en [0:16] ,
  output logic [0:0] give__rdy [0:16] ,
  output mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 give__ret [0:16] 
);
  localparam logic [4:0] __const__num_outports_at_up_ru_routing  = 5'd17;
  logic [16:0] give_ens;
  logic [4:0] out_dir;

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/xbar/XbarRouteUnitRTL.py:51
  // @update
  // def up_ru_give_en():
  //   s.get.en @= s.give_ens > BitsN(0)
  
  always_comb begin : up_ru_give_en
    get__en = give_ens > 17'd0;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/xbar/XbarRouteUnitRTL.py:41
  // @update
  // def up_ru_routing():
  //   s.out_dir @= DirT( s.get.ret.dst )
  // 
  //   for i in range( num_outports ):
  //     s.give[i].rdy @= b1(0)
  // 
  //   if s.get.rdy:
  //     s.give[ s.out_dir ].rdy @= b1(1)
  
  always_comb begin : up_ru_routing
    out_dir = 5'( get__ret.dst );
    for ( int unsigned i = 1'd0; i < 5'( __const__num_outports_at_up_ru_routing ); i += 1'd1 )
      give__rdy[5'(i)] = 1'd0;
    if ( get__rdy ) begin
      give__rdy[out_dir] = 1'd1;
    end
  end

  assign give__ret[0] = get__ret;
  assign give_ens[0:0] = give__en[0];
  assign give__ret[1] = get__ret;
  assign give_ens[1:1] = give__en[1];
  assign give__ret[2] = get__ret;
  assign give_ens[2:2] = give__en[2];
  assign give__ret[3] = get__ret;
  assign give_ens[3:3] = give__en[3];
  assign give__ret[4] = get__ret;
  assign give_ens[4:4] = give__en[4];
  assign give__ret[5] = get__ret;
  assign give_ens[5:5] = give__en[5];
  assign give__ret[6] = get__ret;
  assign give_ens[6:6] = give__en[6];
  assign give__ret[7] = get__ret;
  assign give_ens[7:7] = give__en[7];
  assign give__ret[8] = get__ret;
  assign give_ens[8:8] = give__en[8];
  assign give__ret[9] = get__ret;
  assign give_ens[9:9] = give__en[9];
  assign give__ret[10] = get__ret;
  assign give_ens[10:10] = give__en[10];
  assign give__ret[11] = get__ret;
  assign give_ens[11:11] = give__en[11];
  assign give__ret[12] = get__ret;
  assign give_ens[12:12] = give__en[12];
  assign give__ret[13] = get__ret;
  assign give_ens[13:13] = give__en[13];
  assign give__ret[14] = get__ret;
  assign give_ens[14:14] = give__en[14];
  assign give__ret[15] = get__ret;
  assign give_ens[15:15] = give__en[15];
  assign give__ret[16] = get__ret;
  assign give_ens[16:16] = give__en[16];

endmodule


// PyMTL Component RegEnRst Definition
// At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/registers.py

module RegEnRst__Type_Bits4__reset_value_1
(
  input  logic [0:0] clk ,
  input  logic [0:0] en ,
  input  logic [3:0] in_ ,
  output logic [3:0] out ,
  input  logic [0:0] reset 
);
  localparam logic [0:0] __const__reset_value_at_up_regenrst  = 1'd1;

  // PyMTL Update Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/registers.py:55
  // @update_ff
  // def up_regenrst():
  //   if s.reset: s.out <<= reset_value
  //   elif s.en:  s.out <<= s.in_
  
  always_ff @(posedge clk) begin : up_regenrst
    if ( reset ) begin
      out <= 4'( __const__reset_value_at_up_regenrst );
    end
    else if ( en ) begin
      out <= in_;
    end
  end

endmodule


// PyMTL Component RoundRobinArbiterEn Definition
// At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/arbiters.py

module RoundRobinArbiterEn__nreqs_4
(
  input  logic [0:0] clk ,
  input  logic [0:0] en ,
  output logic [3:0] grants ,
  input  logic [3:0] reqs ,
  input  logic [0:0] reset 
);
  localparam logic [2:0] __const__nreqs_at_comb_reqs_int  = 3'd4;
  localparam logic [3:0] __const__nreqsX2_at_comb_reqs_int  = 4'd8;
  localparam logic [2:0] __const__nreqs_at_comb_grants  = 3'd4;
  localparam logic [2:0] __const__nreqs_at_comb_priority_int  = 3'd4;
  localparam logic [3:0] __const__nreqsX2_at_comb_priority_int  = 4'd8;
  localparam logic [3:0] __const__nreqsX2_at_comb_kills  = 4'd8;
  localparam logic [3:0] __const__nreqsX2_at_comb_grants_int  = 4'd8;
  logic [7:0] grants_int;
  logic [8:0] kills;
  logic [0:0] priority_en;
  logic [7:0] priority_int;
  logic [7:0] reqs_int;
  //-------------------------------------------------------------
  // Component priority_reg
  //-------------------------------------------------------------

  logic [0:0] priority_reg__clk;
  logic [0:0] priority_reg__en;
  logic [3:0] priority_reg__in_;
  logic [3:0] priority_reg__out;
  logic [0:0] priority_reg__reset;

  RegEnRst__Type_Bits4__reset_value_1 priority_reg
  (
    .clk( priority_reg__clk ),
    .en( priority_reg__en ),
    .in_( priority_reg__in_ ),
    .out( priority_reg__out ),
    .reset( priority_reg__reset )
  );

  //-------------------------------------------------------------
  // End of component priority_reg
  //-------------------------------------------------------------

  // PyMTL Update Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/arbiters.py:118
  // @update
  // def comb_grants():
  //   for i in range( nreqs ):
  //     s.grants[i] @= s.grants_int[i] | s.grants_int[nreqs+i]
  
  always_comb begin : comb_grants
    for ( int unsigned i = 1'd0; i < 3'( __const__nreqs_at_comb_grants ); i += 1'd1 )
      grants[2'(i)] = grants_int[3'(i)] | grants_int[3'( __const__nreqs_at_comb_grants ) + 3'(i)];
  end

  // PyMTL Update Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/arbiters.py:141
  // @update
  // def comb_grants_int():
  //   for i in range( nreqsX2 ):
  //     if s.priority_int[i]:
  //       s.grants_int[i] @= s.reqs_int[i]
  //     else:
  //       s.grants_int[i] @= ~s.kills[i] & s.reqs_int[i]
  
  always_comb begin : comb_grants_int
    for ( int unsigned i = 1'd0; i < 4'( __const__nreqsX2_at_comb_grants_int ); i += 1'd1 )
      if ( priority_int[3'(i)] ) begin
        grants_int[3'(i)] = reqs_int[3'(i)];
      end
      else
        grants_int[3'(i)] = ( ~kills[4'(i)] ) & reqs_int[3'(i)];
  end

  // PyMTL Update Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/arbiters.py:132
  // @update
  // def comb_kills():
  //   s.kills[0] @= 1
  //   for i in range( nreqsX2 ):
  //     if s.priority_int[i]:
  //       s.kills[i+1] @= s.reqs_int[i]
  //     else:
  //       s.kills[i+1] @= s.kills[i] | ( ~s.kills[i] & s.reqs_int[i] )
  
  always_comb begin : comb_kills
    kills[4'd0] = 1'd1;
    for ( int unsigned i = 1'd0; i < 4'( __const__nreqsX2_at_comb_kills ); i += 1'd1 )
      if ( priority_int[3'(i)] ) begin
        kills[4'(i) + 4'd1] = reqs_int[3'(i)];
      end
      else
        kills[4'(i) + 4'd1] = kills[4'(i)] | ( ( ~kills[4'(i)] ) & reqs_int[3'(i)] );
  end

  // PyMTL Update Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/arbiters.py:123
  // @update
  // def comb_priority_en():
  //   s.priority_en @= ( s.grants != 0 ) & s.en
  
  always_comb begin : comb_priority_en
    priority_en = ( grants != 4'd0 ) & en;
  end

  // PyMTL Update Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/arbiters.py:127
  // @update
  // def comb_priority_int():
  //   s.priority_int[    0:nreqs  ] @= s.priority_reg.out
  //   s.priority_int[nreqs:nreqsX2] @= 0
  
  always_comb begin : comb_priority_int
    priority_int[3'd3:3'd0] = priority_reg__out;
    priority_int[3'd7:3'( __const__nreqs_at_comb_priority_int )] = 4'd0;
  end

  // PyMTL Update Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/arbiters.py:113
  // @update
  // def comb_reqs_int():
  //   s.reqs_int [    0:nreqs  ] @= s.reqs
  //   s.reqs_int [nreqs:nreqsX2] @= s.reqs
  
  always_comb begin : comb_reqs_int
    reqs_int[3'd3:3'd0] = reqs;
    reqs_int[3'd7:3'( __const__nreqs_at_comb_reqs_int )] = reqs;
  end

  assign priority_reg__clk = clk;
  assign priority_reg__reset = reset;
  assign priority_reg__en = priority_en;
  assign priority_reg__in_[3:1] = grants[2:0];
  assign priority_reg__in_[0:0] = grants[3:3];

endmodule


// PyMTL Component Encoder Definition
// At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/encoders.py

module Encoder__in_nbits_4__out_nbits_2
(
  input  logic [0:0] clk ,
  input  logic [3:0] in_ ,
  output logic [1:0] out ,
  input  logic [0:0] reset 
);

  // PyMTL Update Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/encoders.py:28
  // @update
  // def encode():
  //   s.out @= 0
  //   for i in range( s.in_nbits ):
  //     if s.in_[i]:
  //       s.out @= i
  
  always_comb begin : encode
    out = 2'd0;
    for ( int unsigned i = 1'd0; i < 3'd4; i += 1'd1 )
      if ( in_[2'(i)] ) begin
        out = 2'(i);
      end
  end

endmodule


// PyMTL Component Mux Definition
// Full name: Mux__Type_mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709__ninputs_4
// At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/arithmetics.py

module Mux__c0a83474ea18d85a
(
  input  logic [0:0] clk ,
  input  mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 in_ [0:3],
  output mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 out ,
  input  logic [0:0] reset ,
  input  logic [1:0] sel 
);

  // PyMTL Update Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/arithmetics.py:13
  // @update
  // def up_mux():
  //   s.out @= s.in_[ s.sel ]
  
  always_comb begin : up_mux
    out = in_[sel];
  end

endmodule


// PyMTL Component SwitchUnitRTL Definition
// Full name: SwitchUnitRTL__PacketType_mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709__num_inports_4
// At /work/global/pp482/cgra/src/pymtl3_net/router/SwitchUnitRTL.py

module SwitchUnitRTL__8397dd400a185cc5
(
  input  logic [0:0] clk ,
  output logic [0:0] out_ocp ,
  input  logic [0:0] reset ,
  output logic [0:0] get__en [0:3] ,
  input logic [0:0] get__rdy [0:3] ,
  input mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 get__ret [0:3] ,
  input logic [0:0] give__en  ,
  output logic [0:0] give__rdy  ,
  output mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 give__ret  
);
  localparam logic [2:0] __const__num_inports_at_up_get_en  = 3'd4;
  logic [0:0] get_en [0:3];
  logic [0:0] get_rdy [0:3];
  //-------------------------------------------------------------
  // Component arbiter
  //-------------------------------------------------------------

  logic [0:0] arbiter__clk;
  logic [0:0] arbiter__en;
  logic [3:0] arbiter__grants;
  logic [3:0] arbiter__reqs;
  logic [0:0] arbiter__reset;

  RoundRobinArbiterEn__nreqs_4 arbiter
  (
    .clk( arbiter__clk ),
    .en( arbiter__en ),
    .grants( arbiter__grants ),
    .reqs( arbiter__reqs ),
    .reset( arbiter__reset )
  );

  //-------------------------------------------------------------
  // End of component arbiter
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component encoder
  //-------------------------------------------------------------

  logic [0:0] encoder__clk;
  logic [3:0] encoder__in_;
  logic [1:0] encoder__out;
  logic [0:0] encoder__reset;

  Encoder__in_nbits_4__out_nbits_2 encoder
  (
    .clk( encoder__clk ),
    .in_( encoder__in_ ),
    .out( encoder__out ),
    .reset( encoder__reset )
  );

  //-------------------------------------------------------------
  // End of component encoder
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component mux
  //-------------------------------------------------------------

  logic [0:0] mux__clk;
  mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 mux__in_ [0:3];
  mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 mux__out;
  logic [0:0] mux__reset;
  logic [1:0] mux__sel;

  Mux__c0a83474ea18d85a mux
  (
    .clk( mux__clk ),
    .in_( mux__in_ ),
    .out( mux__out ),
    .reset( mux__reset ),
    .sel( mux__sel )
  );

  //-------------------------------------------------------------
  // End of component mux
  //-------------------------------------------------------------

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/router/SwitchUnitRTL.py:60
  // @update
  // def up_get_en():
  //   for i in range( num_inports ):
  //     s.get_en[i] @= s.give.en & ( s.mux.sel==SelType(i) )
  
  always_comb begin : up_get_en
    for ( int unsigned i = 1'd0; i < 3'( __const__num_inports_at_up_get_en ); i += 1'd1 )
      get_en[2'(i)] = give__en & ( mux__sel == 2'( 2'(i) ) );
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/pymtl3_net/router/SwitchUnitRTL.py:56
  // @update
  // def up_give():
  //   s.give.rdy @= s.arbiter.grants > GrantType(0)
  
  always_comb begin : up_give
    give__rdy = arbiter__grants > 4'd0;
  end

  assign arbiter__clk = clk;
  assign arbiter__reset = reset;
  assign arbiter__en = 1'd1;
  assign mux__clk = clk;
  assign mux__reset = reset;
  assign give__ret = mux__out;
  assign encoder__clk = clk;
  assign encoder__reset = reset;
  assign encoder__in_ = arbiter__grants;
  assign mux__sel = encoder__out;
  assign arbiter__reqs[0:0] = get__rdy[0];
  assign mux__in_[0] = get__ret[0];
  assign get__en[0] = get_en[0];
  assign get_rdy[0] = get__rdy[0];
  assign arbiter__reqs[1:1] = get__rdy[1];
  assign mux__in_[1] = get__ret[1];
  assign get__en[1] = get_en[1];
  assign get_rdy[1] = get__rdy[1];
  assign arbiter__reqs[2:2] = get__rdy[2];
  assign mux__in_[2] = get__ret[2];
  assign get__en[2] = get_en[2];
  assign get_rdy[2] = get__rdy[2];
  assign arbiter__reqs[3:3] = get__rdy[3];
  assign mux__in_[3] = get__ret[3];
  assign get__en[3] = get_en[3];
  assign get_rdy[3] = get__rdy[3];

endmodule


// PyMTL Component XbarRTL Definition
// Full name: XbarRTL__PacketType_mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709__num_inports_4__num_outports_17__InputUnitType_InputUnitRTL__RouteUnitType_XbarRouteUnitRTL__SwitchUnitType_SwitchUnitRTL__OutputUnitType_OutputUnitRTL
// At /work/global/pp482/cgra/src/pymtl3_net/xbar/XbarRTL.py

module XbarRTL__71ad38100e00b17b
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  input logic [0:0] recv__en [0:3] ,
  input mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 recv__msg [0:3] ,
  output logic [0:0] recv__rdy [0:3] ,
  output logic [0:0] send__en [0:16] ,
  output mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 send__msg [0:16] ,
  input logic [0:0] send__rdy [0:16] 
);
  //-------------------------------------------------------------
  // Component input_units[0:3]
  //-------------------------------------------------------------

  logic [0:0] input_units__clk [0:3];
  logic [0:0] input_units__reset [0:3];
  logic [0:0] input_units__give__en [0:3];
  logic [0:0] input_units__give__rdy [0:3];
  mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 input_units__give__ret [0:3];
  logic [0:0] input_units__recv__en [0:3];
  mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 input_units__recv__msg [0:3];
  logic [0:0] input_units__recv__rdy [0:3];

  InputUnitRTL__c6fcc71c398d4ddc input_units__0
  (
    .clk( input_units__clk[0] ),
    .reset( input_units__reset[0] ),
    .give__en( input_units__give__en[0] ),
    .give__rdy( input_units__give__rdy[0] ),
    .give__ret( input_units__give__ret[0] ),
    .recv__en( input_units__recv__en[0] ),
    .recv__msg( input_units__recv__msg[0] ),
    .recv__rdy( input_units__recv__rdy[0] )
  );

  InputUnitRTL__c6fcc71c398d4ddc input_units__1
  (
    .clk( input_units__clk[1] ),
    .reset( input_units__reset[1] ),
    .give__en( input_units__give__en[1] ),
    .give__rdy( input_units__give__rdy[1] ),
    .give__ret( input_units__give__ret[1] ),
    .recv__en( input_units__recv__en[1] ),
    .recv__msg( input_units__recv__msg[1] ),
    .recv__rdy( input_units__recv__rdy[1] )
  );

  InputUnitRTL__c6fcc71c398d4ddc input_units__2
  (
    .clk( input_units__clk[2] ),
    .reset( input_units__reset[2] ),
    .give__en( input_units__give__en[2] ),
    .give__rdy( input_units__give__rdy[2] ),
    .give__ret( input_units__give__ret[2] ),
    .recv__en( input_units__recv__en[2] ),
    .recv__msg( input_units__recv__msg[2] ),
    .recv__rdy( input_units__recv__rdy[2] )
  );

  InputUnitRTL__c6fcc71c398d4ddc input_units__3
  (
    .clk( input_units__clk[3] ),
    .reset( input_units__reset[3] ),
    .give__en( input_units__give__en[3] ),
    .give__rdy( input_units__give__rdy[3] ),
    .give__ret( input_units__give__ret[3] ),
    .recv__en( input_units__recv__en[3] ),
    .recv__msg( input_units__recv__msg[3] ),
    .recv__rdy( input_units__recv__rdy[3] )
  );

  //-------------------------------------------------------------
  // End of component input_units[0:3]
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component output_units[0:16]
  //-------------------------------------------------------------

  logic [0:0] output_units__clk [0:16];
  logic [0:0] output_units__reset [0:16];
  logic [0:0] output_units__get__en [0:16];
  logic [0:0] output_units__get__rdy [0:16];
  mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 output_units__get__ret [0:16];
  logic [0:0] output_units__send__en [0:16];
  mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 output_units__send__msg [0:16];
  logic [0:0] output_units__send__rdy [0:16];

  OutputUnitRTL__57088be745a5c6d7 output_units__0
  (
    .clk( output_units__clk[0] ),
    .reset( output_units__reset[0] ),
    .get__en( output_units__get__en[0] ),
    .get__rdy( output_units__get__rdy[0] ),
    .get__ret( output_units__get__ret[0] ),
    .send__en( output_units__send__en[0] ),
    .send__msg( output_units__send__msg[0] ),
    .send__rdy( output_units__send__rdy[0] )
  );

  OutputUnitRTL__57088be745a5c6d7 output_units__1
  (
    .clk( output_units__clk[1] ),
    .reset( output_units__reset[1] ),
    .get__en( output_units__get__en[1] ),
    .get__rdy( output_units__get__rdy[1] ),
    .get__ret( output_units__get__ret[1] ),
    .send__en( output_units__send__en[1] ),
    .send__msg( output_units__send__msg[1] ),
    .send__rdy( output_units__send__rdy[1] )
  );

  OutputUnitRTL__57088be745a5c6d7 output_units__2
  (
    .clk( output_units__clk[2] ),
    .reset( output_units__reset[2] ),
    .get__en( output_units__get__en[2] ),
    .get__rdy( output_units__get__rdy[2] ),
    .get__ret( output_units__get__ret[2] ),
    .send__en( output_units__send__en[2] ),
    .send__msg( output_units__send__msg[2] ),
    .send__rdy( output_units__send__rdy[2] )
  );

  OutputUnitRTL__57088be745a5c6d7 output_units__3
  (
    .clk( output_units__clk[3] ),
    .reset( output_units__reset[3] ),
    .get__en( output_units__get__en[3] ),
    .get__rdy( output_units__get__rdy[3] ),
    .get__ret( output_units__get__ret[3] ),
    .send__en( output_units__send__en[3] ),
    .send__msg( output_units__send__msg[3] ),
    .send__rdy( output_units__send__rdy[3] )
  );

  OutputUnitRTL__57088be745a5c6d7 output_units__4
  (
    .clk( output_units__clk[4] ),
    .reset( output_units__reset[4] ),
    .get__en( output_units__get__en[4] ),
    .get__rdy( output_units__get__rdy[4] ),
    .get__ret( output_units__get__ret[4] ),
    .send__en( output_units__send__en[4] ),
    .send__msg( output_units__send__msg[4] ),
    .send__rdy( output_units__send__rdy[4] )
  );

  OutputUnitRTL__57088be745a5c6d7 output_units__5
  (
    .clk( output_units__clk[5] ),
    .reset( output_units__reset[5] ),
    .get__en( output_units__get__en[5] ),
    .get__rdy( output_units__get__rdy[5] ),
    .get__ret( output_units__get__ret[5] ),
    .send__en( output_units__send__en[5] ),
    .send__msg( output_units__send__msg[5] ),
    .send__rdy( output_units__send__rdy[5] )
  );

  OutputUnitRTL__57088be745a5c6d7 output_units__6
  (
    .clk( output_units__clk[6] ),
    .reset( output_units__reset[6] ),
    .get__en( output_units__get__en[6] ),
    .get__rdy( output_units__get__rdy[6] ),
    .get__ret( output_units__get__ret[6] ),
    .send__en( output_units__send__en[6] ),
    .send__msg( output_units__send__msg[6] ),
    .send__rdy( output_units__send__rdy[6] )
  );

  OutputUnitRTL__57088be745a5c6d7 output_units__7
  (
    .clk( output_units__clk[7] ),
    .reset( output_units__reset[7] ),
    .get__en( output_units__get__en[7] ),
    .get__rdy( output_units__get__rdy[7] ),
    .get__ret( output_units__get__ret[7] ),
    .send__en( output_units__send__en[7] ),
    .send__msg( output_units__send__msg[7] ),
    .send__rdy( output_units__send__rdy[7] )
  );

  OutputUnitRTL__57088be745a5c6d7 output_units__8
  (
    .clk( output_units__clk[8] ),
    .reset( output_units__reset[8] ),
    .get__en( output_units__get__en[8] ),
    .get__rdy( output_units__get__rdy[8] ),
    .get__ret( output_units__get__ret[8] ),
    .send__en( output_units__send__en[8] ),
    .send__msg( output_units__send__msg[8] ),
    .send__rdy( output_units__send__rdy[8] )
  );

  OutputUnitRTL__57088be745a5c6d7 output_units__9
  (
    .clk( output_units__clk[9] ),
    .reset( output_units__reset[9] ),
    .get__en( output_units__get__en[9] ),
    .get__rdy( output_units__get__rdy[9] ),
    .get__ret( output_units__get__ret[9] ),
    .send__en( output_units__send__en[9] ),
    .send__msg( output_units__send__msg[9] ),
    .send__rdy( output_units__send__rdy[9] )
  );

  OutputUnitRTL__57088be745a5c6d7 output_units__10
  (
    .clk( output_units__clk[10] ),
    .reset( output_units__reset[10] ),
    .get__en( output_units__get__en[10] ),
    .get__rdy( output_units__get__rdy[10] ),
    .get__ret( output_units__get__ret[10] ),
    .send__en( output_units__send__en[10] ),
    .send__msg( output_units__send__msg[10] ),
    .send__rdy( output_units__send__rdy[10] )
  );

  OutputUnitRTL__57088be745a5c6d7 output_units__11
  (
    .clk( output_units__clk[11] ),
    .reset( output_units__reset[11] ),
    .get__en( output_units__get__en[11] ),
    .get__rdy( output_units__get__rdy[11] ),
    .get__ret( output_units__get__ret[11] ),
    .send__en( output_units__send__en[11] ),
    .send__msg( output_units__send__msg[11] ),
    .send__rdy( output_units__send__rdy[11] )
  );

  OutputUnitRTL__57088be745a5c6d7 output_units__12
  (
    .clk( output_units__clk[12] ),
    .reset( output_units__reset[12] ),
    .get__en( output_units__get__en[12] ),
    .get__rdy( output_units__get__rdy[12] ),
    .get__ret( output_units__get__ret[12] ),
    .send__en( output_units__send__en[12] ),
    .send__msg( output_units__send__msg[12] ),
    .send__rdy( output_units__send__rdy[12] )
  );

  OutputUnitRTL__57088be745a5c6d7 output_units__13
  (
    .clk( output_units__clk[13] ),
    .reset( output_units__reset[13] ),
    .get__en( output_units__get__en[13] ),
    .get__rdy( output_units__get__rdy[13] ),
    .get__ret( output_units__get__ret[13] ),
    .send__en( output_units__send__en[13] ),
    .send__msg( output_units__send__msg[13] ),
    .send__rdy( output_units__send__rdy[13] )
  );

  OutputUnitRTL__57088be745a5c6d7 output_units__14
  (
    .clk( output_units__clk[14] ),
    .reset( output_units__reset[14] ),
    .get__en( output_units__get__en[14] ),
    .get__rdy( output_units__get__rdy[14] ),
    .get__ret( output_units__get__ret[14] ),
    .send__en( output_units__send__en[14] ),
    .send__msg( output_units__send__msg[14] ),
    .send__rdy( output_units__send__rdy[14] )
  );

  OutputUnitRTL__57088be745a5c6d7 output_units__15
  (
    .clk( output_units__clk[15] ),
    .reset( output_units__reset[15] ),
    .get__en( output_units__get__en[15] ),
    .get__rdy( output_units__get__rdy[15] ),
    .get__ret( output_units__get__ret[15] ),
    .send__en( output_units__send__en[15] ),
    .send__msg( output_units__send__msg[15] ),
    .send__rdy( output_units__send__rdy[15] )
  );

  OutputUnitRTL__57088be745a5c6d7 output_units__16
  (
    .clk( output_units__clk[16] ),
    .reset( output_units__reset[16] ),
    .get__en( output_units__get__en[16] ),
    .get__rdy( output_units__get__rdy[16] ),
    .get__ret( output_units__get__ret[16] ),
    .send__en( output_units__send__en[16] ),
    .send__msg( output_units__send__msg[16] ),
    .send__rdy( output_units__send__rdy[16] )
  );

  //-------------------------------------------------------------
  // End of component output_units[0:16]
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component route_units[0:3]
  //-------------------------------------------------------------

  logic [0:0] route_units__clk [0:3];
  logic [0:0] route_units__reset [0:3];
  logic [0:0] route_units__get__en [0:3];
  logic [0:0] route_units__get__rdy [0:3];
  mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 route_units__get__ret [0:3];
  logic [0:0] route_units__give__en [0:3][0:16];
  logic [0:0] route_units__give__rdy [0:3][0:16];
  mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 route_units__give__ret [0:3][0:16];

  XbarRouteUnitRTL__c08e98d1fc89dc50 route_units__0
  (
    .clk( route_units__clk[0] ),
    .reset( route_units__reset[0] ),
    .get__en( route_units__get__en[0] ),
    .get__rdy( route_units__get__rdy[0] ),
    .get__ret( route_units__get__ret[0] ),
    .give__en( route_units__give__en[0] ),
    .give__rdy( route_units__give__rdy[0] ),
    .give__ret( route_units__give__ret[0] )
  );

  XbarRouteUnitRTL__c08e98d1fc89dc50 route_units__1
  (
    .clk( route_units__clk[1] ),
    .reset( route_units__reset[1] ),
    .get__en( route_units__get__en[1] ),
    .get__rdy( route_units__get__rdy[1] ),
    .get__ret( route_units__get__ret[1] ),
    .give__en( route_units__give__en[1] ),
    .give__rdy( route_units__give__rdy[1] ),
    .give__ret( route_units__give__ret[1] )
  );

  XbarRouteUnitRTL__c08e98d1fc89dc50 route_units__2
  (
    .clk( route_units__clk[2] ),
    .reset( route_units__reset[2] ),
    .get__en( route_units__get__en[2] ),
    .get__rdy( route_units__get__rdy[2] ),
    .get__ret( route_units__get__ret[2] ),
    .give__en( route_units__give__en[2] ),
    .give__rdy( route_units__give__rdy[2] ),
    .give__ret( route_units__give__ret[2] )
  );

  XbarRouteUnitRTL__c08e98d1fc89dc50 route_units__3
  (
    .clk( route_units__clk[3] ),
    .reset( route_units__reset[3] ),
    .get__en( route_units__get__en[3] ),
    .get__rdy( route_units__get__rdy[3] ),
    .get__ret( route_units__get__ret[3] ),
    .give__en( route_units__give__en[3] ),
    .give__rdy( route_units__give__rdy[3] ),
    .give__ret( route_units__give__ret[3] )
  );

  //-------------------------------------------------------------
  // End of component route_units[0:3]
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component switch_units[0:16]
  //-------------------------------------------------------------

  logic [0:0] switch_units__clk [0:16];
  logic [0:0] switch_units__out_ocp [0:16];
  logic [0:0] switch_units__reset [0:16];
  logic [0:0] switch_units__get__en [0:16][0:3];
  logic [0:0] switch_units__get__rdy [0:16][0:3];
  mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 switch_units__get__ret [0:16][0:3];
  logic [0:0] switch_units__give__en [0:16];
  logic [0:0] switch_units__give__rdy [0:16];
  mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 switch_units__give__ret [0:16];

  SwitchUnitRTL__8397dd400a185cc5 switch_units__0
  (
    .clk( switch_units__clk[0] ),
    .out_ocp( switch_units__out_ocp[0] ),
    .reset( switch_units__reset[0] ),
    .get__en( switch_units__get__en[0] ),
    .get__rdy( switch_units__get__rdy[0] ),
    .get__ret( switch_units__get__ret[0] ),
    .give__en( switch_units__give__en[0] ),
    .give__rdy( switch_units__give__rdy[0] ),
    .give__ret( switch_units__give__ret[0] )
  );

  SwitchUnitRTL__8397dd400a185cc5 switch_units__1
  (
    .clk( switch_units__clk[1] ),
    .out_ocp( switch_units__out_ocp[1] ),
    .reset( switch_units__reset[1] ),
    .get__en( switch_units__get__en[1] ),
    .get__rdy( switch_units__get__rdy[1] ),
    .get__ret( switch_units__get__ret[1] ),
    .give__en( switch_units__give__en[1] ),
    .give__rdy( switch_units__give__rdy[1] ),
    .give__ret( switch_units__give__ret[1] )
  );

  SwitchUnitRTL__8397dd400a185cc5 switch_units__2
  (
    .clk( switch_units__clk[2] ),
    .out_ocp( switch_units__out_ocp[2] ),
    .reset( switch_units__reset[2] ),
    .get__en( switch_units__get__en[2] ),
    .get__rdy( switch_units__get__rdy[2] ),
    .get__ret( switch_units__get__ret[2] ),
    .give__en( switch_units__give__en[2] ),
    .give__rdy( switch_units__give__rdy[2] ),
    .give__ret( switch_units__give__ret[2] )
  );

  SwitchUnitRTL__8397dd400a185cc5 switch_units__3
  (
    .clk( switch_units__clk[3] ),
    .out_ocp( switch_units__out_ocp[3] ),
    .reset( switch_units__reset[3] ),
    .get__en( switch_units__get__en[3] ),
    .get__rdy( switch_units__get__rdy[3] ),
    .get__ret( switch_units__get__ret[3] ),
    .give__en( switch_units__give__en[3] ),
    .give__rdy( switch_units__give__rdy[3] ),
    .give__ret( switch_units__give__ret[3] )
  );

  SwitchUnitRTL__8397dd400a185cc5 switch_units__4
  (
    .clk( switch_units__clk[4] ),
    .out_ocp( switch_units__out_ocp[4] ),
    .reset( switch_units__reset[4] ),
    .get__en( switch_units__get__en[4] ),
    .get__rdy( switch_units__get__rdy[4] ),
    .get__ret( switch_units__get__ret[4] ),
    .give__en( switch_units__give__en[4] ),
    .give__rdy( switch_units__give__rdy[4] ),
    .give__ret( switch_units__give__ret[4] )
  );

  SwitchUnitRTL__8397dd400a185cc5 switch_units__5
  (
    .clk( switch_units__clk[5] ),
    .out_ocp( switch_units__out_ocp[5] ),
    .reset( switch_units__reset[5] ),
    .get__en( switch_units__get__en[5] ),
    .get__rdy( switch_units__get__rdy[5] ),
    .get__ret( switch_units__get__ret[5] ),
    .give__en( switch_units__give__en[5] ),
    .give__rdy( switch_units__give__rdy[5] ),
    .give__ret( switch_units__give__ret[5] )
  );

  SwitchUnitRTL__8397dd400a185cc5 switch_units__6
  (
    .clk( switch_units__clk[6] ),
    .out_ocp( switch_units__out_ocp[6] ),
    .reset( switch_units__reset[6] ),
    .get__en( switch_units__get__en[6] ),
    .get__rdy( switch_units__get__rdy[6] ),
    .get__ret( switch_units__get__ret[6] ),
    .give__en( switch_units__give__en[6] ),
    .give__rdy( switch_units__give__rdy[6] ),
    .give__ret( switch_units__give__ret[6] )
  );

  SwitchUnitRTL__8397dd400a185cc5 switch_units__7
  (
    .clk( switch_units__clk[7] ),
    .out_ocp( switch_units__out_ocp[7] ),
    .reset( switch_units__reset[7] ),
    .get__en( switch_units__get__en[7] ),
    .get__rdy( switch_units__get__rdy[7] ),
    .get__ret( switch_units__get__ret[7] ),
    .give__en( switch_units__give__en[7] ),
    .give__rdy( switch_units__give__rdy[7] ),
    .give__ret( switch_units__give__ret[7] )
  );

  SwitchUnitRTL__8397dd400a185cc5 switch_units__8
  (
    .clk( switch_units__clk[8] ),
    .out_ocp( switch_units__out_ocp[8] ),
    .reset( switch_units__reset[8] ),
    .get__en( switch_units__get__en[8] ),
    .get__rdy( switch_units__get__rdy[8] ),
    .get__ret( switch_units__get__ret[8] ),
    .give__en( switch_units__give__en[8] ),
    .give__rdy( switch_units__give__rdy[8] ),
    .give__ret( switch_units__give__ret[8] )
  );

  SwitchUnitRTL__8397dd400a185cc5 switch_units__9
  (
    .clk( switch_units__clk[9] ),
    .out_ocp( switch_units__out_ocp[9] ),
    .reset( switch_units__reset[9] ),
    .get__en( switch_units__get__en[9] ),
    .get__rdy( switch_units__get__rdy[9] ),
    .get__ret( switch_units__get__ret[9] ),
    .give__en( switch_units__give__en[9] ),
    .give__rdy( switch_units__give__rdy[9] ),
    .give__ret( switch_units__give__ret[9] )
  );

  SwitchUnitRTL__8397dd400a185cc5 switch_units__10
  (
    .clk( switch_units__clk[10] ),
    .out_ocp( switch_units__out_ocp[10] ),
    .reset( switch_units__reset[10] ),
    .get__en( switch_units__get__en[10] ),
    .get__rdy( switch_units__get__rdy[10] ),
    .get__ret( switch_units__get__ret[10] ),
    .give__en( switch_units__give__en[10] ),
    .give__rdy( switch_units__give__rdy[10] ),
    .give__ret( switch_units__give__ret[10] )
  );

  SwitchUnitRTL__8397dd400a185cc5 switch_units__11
  (
    .clk( switch_units__clk[11] ),
    .out_ocp( switch_units__out_ocp[11] ),
    .reset( switch_units__reset[11] ),
    .get__en( switch_units__get__en[11] ),
    .get__rdy( switch_units__get__rdy[11] ),
    .get__ret( switch_units__get__ret[11] ),
    .give__en( switch_units__give__en[11] ),
    .give__rdy( switch_units__give__rdy[11] ),
    .give__ret( switch_units__give__ret[11] )
  );

  SwitchUnitRTL__8397dd400a185cc5 switch_units__12
  (
    .clk( switch_units__clk[12] ),
    .out_ocp( switch_units__out_ocp[12] ),
    .reset( switch_units__reset[12] ),
    .get__en( switch_units__get__en[12] ),
    .get__rdy( switch_units__get__rdy[12] ),
    .get__ret( switch_units__get__ret[12] ),
    .give__en( switch_units__give__en[12] ),
    .give__rdy( switch_units__give__rdy[12] ),
    .give__ret( switch_units__give__ret[12] )
  );

  SwitchUnitRTL__8397dd400a185cc5 switch_units__13
  (
    .clk( switch_units__clk[13] ),
    .out_ocp( switch_units__out_ocp[13] ),
    .reset( switch_units__reset[13] ),
    .get__en( switch_units__get__en[13] ),
    .get__rdy( switch_units__get__rdy[13] ),
    .get__ret( switch_units__get__ret[13] ),
    .give__en( switch_units__give__en[13] ),
    .give__rdy( switch_units__give__rdy[13] ),
    .give__ret( switch_units__give__ret[13] )
  );

  SwitchUnitRTL__8397dd400a185cc5 switch_units__14
  (
    .clk( switch_units__clk[14] ),
    .out_ocp( switch_units__out_ocp[14] ),
    .reset( switch_units__reset[14] ),
    .get__en( switch_units__get__en[14] ),
    .get__rdy( switch_units__get__rdy[14] ),
    .get__ret( switch_units__get__ret[14] ),
    .give__en( switch_units__give__en[14] ),
    .give__rdy( switch_units__give__rdy[14] ),
    .give__ret( switch_units__give__ret[14] )
  );

  SwitchUnitRTL__8397dd400a185cc5 switch_units__15
  (
    .clk( switch_units__clk[15] ),
    .out_ocp( switch_units__out_ocp[15] ),
    .reset( switch_units__reset[15] ),
    .get__en( switch_units__get__en[15] ),
    .get__rdy( switch_units__get__rdy[15] ),
    .get__ret( switch_units__get__ret[15] ),
    .give__en( switch_units__give__en[15] ),
    .give__rdy( switch_units__give__rdy[15] ),
    .give__ret( switch_units__give__ret[15] )
  );

  SwitchUnitRTL__8397dd400a185cc5 switch_units__16
  (
    .clk( switch_units__clk[16] ),
    .out_ocp( switch_units__out_ocp[16] ),
    .reset( switch_units__reset[16] ),
    .get__en( switch_units__get__en[16] ),
    .get__rdy( switch_units__get__rdy[16] ),
    .get__ret( switch_units__get__ret[16] ),
    .give__en( switch_units__give__en[16] ),
    .give__rdy( switch_units__give__rdy[16] ),
    .give__ret( switch_units__give__ret[16] )
  );

  //-------------------------------------------------------------
  // End of component switch_units[0:16]
  //-------------------------------------------------------------

  assign input_units__clk[0] = clk;
  assign input_units__reset[0] = reset;
  assign input_units__clk[1] = clk;
  assign input_units__reset[1] = reset;
  assign input_units__clk[2] = clk;
  assign input_units__reset[2] = reset;
  assign input_units__clk[3] = clk;
  assign input_units__reset[3] = reset;
  assign route_units__clk[0] = clk;
  assign route_units__reset[0] = reset;
  assign route_units__clk[1] = clk;
  assign route_units__reset[1] = reset;
  assign route_units__clk[2] = clk;
  assign route_units__reset[2] = reset;
  assign route_units__clk[3] = clk;
  assign route_units__reset[3] = reset;
  assign switch_units__clk[0] = clk;
  assign switch_units__reset[0] = reset;
  assign switch_units__clk[1] = clk;
  assign switch_units__reset[1] = reset;
  assign switch_units__clk[2] = clk;
  assign switch_units__reset[2] = reset;
  assign switch_units__clk[3] = clk;
  assign switch_units__reset[3] = reset;
  assign switch_units__clk[4] = clk;
  assign switch_units__reset[4] = reset;
  assign switch_units__clk[5] = clk;
  assign switch_units__reset[5] = reset;
  assign switch_units__clk[6] = clk;
  assign switch_units__reset[6] = reset;
  assign switch_units__clk[7] = clk;
  assign switch_units__reset[7] = reset;
  assign switch_units__clk[8] = clk;
  assign switch_units__reset[8] = reset;
  assign switch_units__clk[9] = clk;
  assign switch_units__reset[9] = reset;
  assign switch_units__clk[10] = clk;
  assign switch_units__reset[10] = reset;
  assign switch_units__clk[11] = clk;
  assign switch_units__reset[11] = reset;
  assign switch_units__clk[12] = clk;
  assign switch_units__reset[12] = reset;
  assign switch_units__clk[13] = clk;
  assign switch_units__reset[13] = reset;
  assign switch_units__clk[14] = clk;
  assign switch_units__reset[14] = reset;
  assign switch_units__clk[15] = clk;
  assign switch_units__reset[15] = reset;
  assign switch_units__clk[16] = clk;
  assign switch_units__reset[16] = reset;
  assign output_units__clk[0] = clk;
  assign output_units__reset[0] = reset;
  assign output_units__clk[1] = clk;
  assign output_units__reset[1] = reset;
  assign output_units__clk[2] = clk;
  assign output_units__reset[2] = reset;
  assign output_units__clk[3] = clk;
  assign output_units__reset[3] = reset;
  assign output_units__clk[4] = clk;
  assign output_units__reset[4] = reset;
  assign output_units__clk[5] = clk;
  assign output_units__reset[5] = reset;
  assign output_units__clk[6] = clk;
  assign output_units__reset[6] = reset;
  assign output_units__clk[7] = clk;
  assign output_units__reset[7] = reset;
  assign output_units__clk[8] = clk;
  assign output_units__reset[8] = reset;
  assign output_units__clk[9] = clk;
  assign output_units__reset[9] = reset;
  assign output_units__clk[10] = clk;
  assign output_units__reset[10] = reset;
  assign output_units__clk[11] = clk;
  assign output_units__reset[11] = reset;
  assign output_units__clk[12] = clk;
  assign output_units__reset[12] = reset;
  assign output_units__clk[13] = clk;
  assign output_units__reset[13] = reset;
  assign output_units__clk[14] = clk;
  assign output_units__reset[14] = reset;
  assign output_units__clk[15] = clk;
  assign output_units__reset[15] = reset;
  assign output_units__clk[16] = clk;
  assign output_units__reset[16] = reset;
  assign input_units__recv__en[0] = recv__en[0];
  assign input_units__recv__msg[0] = recv__msg[0];
  assign recv__rdy[0] = input_units__recv__rdy[0];
  assign input_units__give__en[0] = route_units__get__en[0];
  assign route_units__get__rdy[0] = input_units__give__rdy[0];
  assign route_units__get__ret[0] = input_units__give__ret[0];
  assign input_units__recv__en[1] = recv__en[1];
  assign input_units__recv__msg[1] = recv__msg[1];
  assign recv__rdy[1] = input_units__recv__rdy[1];
  assign input_units__give__en[1] = route_units__get__en[1];
  assign route_units__get__rdy[1] = input_units__give__rdy[1];
  assign route_units__get__ret[1] = input_units__give__ret[1];
  assign input_units__recv__en[2] = recv__en[2];
  assign input_units__recv__msg[2] = recv__msg[2];
  assign recv__rdy[2] = input_units__recv__rdy[2];
  assign input_units__give__en[2] = route_units__get__en[2];
  assign route_units__get__rdy[2] = input_units__give__rdy[2];
  assign route_units__get__ret[2] = input_units__give__ret[2];
  assign input_units__recv__en[3] = recv__en[3];
  assign input_units__recv__msg[3] = recv__msg[3];
  assign recv__rdy[3] = input_units__recv__rdy[3];
  assign input_units__give__en[3] = route_units__get__en[3];
  assign route_units__get__rdy[3] = input_units__give__rdy[3];
  assign route_units__get__ret[3] = input_units__give__ret[3];
  assign route_units__give__en[0][0] = switch_units__get__en[0][0];
  assign switch_units__get__rdy[0][0] = route_units__give__rdy[0][0];
  assign switch_units__get__ret[0][0] = route_units__give__ret[0][0];
  assign route_units__give__en[0][1] = switch_units__get__en[1][0];
  assign switch_units__get__rdy[1][0] = route_units__give__rdy[0][1];
  assign switch_units__get__ret[1][0] = route_units__give__ret[0][1];
  assign route_units__give__en[0][2] = switch_units__get__en[2][0];
  assign switch_units__get__rdy[2][0] = route_units__give__rdy[0][2];
  assign switch_units__get__ret[2][0] = route_units__give__ret[0][2];
  assign route_units__give__en[0][3] = switch_units__get__en[3][0];
  assign switch_units__get__rdy[3][0] = route_units__give__rdy[0][3];
  assign switch_units__get__ret[3][0] = route_units__give__ret[0][3];
  assign route_units__give__en[0][4] = switch_units__get__en[4][0];
  assign switch_units__get__rdy[4][0] = route_units__give__rdy[0][4];
  assign switch_units__get__ret[4][0] = route_units__give__ret[0][4];
  assign route_units__give__en[0][5] = switch_units__get__en[5][0];
  assign switch_units__get__rdy[5][0] = route_units__give__rdy[0][5];
  assign switch_units__get__ret[5][0] = route_units__give__ret[0][5];
  assign route_units__give__en[0][6] = switch_units__get__en[6][0];
  assign switch_units__get__rdy[6][0] = route_units__give__rdy[0][6];
  assign switch_units__get__ret[6][0] = route_units__give__ret[0][6];
  assign route_units__give__en[0][7] = switch_units__get__en[7][0];
  assign switch_units__get__rdy[7][0] = route_units__give__rdy[0][7];
  assign switch_units__get__ret[7][0] = route_units__give__ret[0][7];
  assign route_units__give__en[0][8] = switch_units__get__en[8][0];
  assign switch_units__get__rdy[8][0] = route_units__give__rdy[0][8];
  assign switch_units__get__ret[8][0] = route_units__give__ret[0][8];
  assign route_units__give__en[0][9] = switch_units__get__en[9][0];
  assign switch_units__get__rdy[9][0] = route_units__give__rdy[0][9];
  assign switch_units__get__ret[9][0] = route_units__give__ret[0][9];
  assign route_units__give__en[0][10] = switch_units__get__en[10][0];
  assign switch_units__get__rdy[10][0] = route_units__give__rdy[0][10];
  assign switch_units__get__ret[10][0] = route_units__give__ret[0][10];
  assign route_units__give__en[0][11] = switch_units__get__en[11][0];
  assign switch_units__get__rdy[11][0] = route_units__give__rdy[0][11];
  assign switch_units__get__ret[11][0] = route_units__give__ret[0][11];
  assign route_units__give__en[0][12] = switch_units__get__en[12][0];
  assign switch_units__get__rdy[12][0] = route_units__give__rdy[0][12];
  assign switch_units__get__ret[12][0] = route_units__give__ret[0][12];
  assign route_units__give__en[0][13] = switch_units__get__en[13][0];
  assign switch_units__get__rdy[13][0] = route_units__give__rdy[0][13];
  assign switch_units__get__ret[13][0] = route_units__give__ret[0][13];
  assign route_units__give__en[0][14] = switch_units__get__en[14][0];
  assign switch_units__get__rdy[14][0] = route_units__give__rdy[0][14];
  assign switch_units__get__ret[14][0] = route_units__give__ret[0][14];
  assign route_units__give__en[0][15] = switch_units__get__en[15][0];
  assign switch_units__get__rdy[15][0] = route_units__give__rdy[0][15];
  assign switch_units__get__ret[15][0] = route_units__give__ret[0][15];
  assign route_units__give__en[0][16] = switch_units__get__en[16][0];
  assign switch_units__get__rdy[16][0] = route_units__give__rdy[0][16];
  assign switch_units__get__ret[16][0] = route_units__give__ret[0][16];
  assign route_units__give__en[1][0] = switch_units__get__en[0][1];
  assign switch_units__get__rdy[0][1] = route_units__give__rdy[1][0];
  assign switch_units__get__ret[0][1] = route_units__give__ret[1][0];
  assign route_units__give__en[1][1] = switch_units__get__en[1][1];
  assign switch_units__get__rdy[1][1] = route_units__give__rdy[1][1];
  assign switch_units__get__ret[1][1] = route_units__give__ret[1][1];
  assign route_units__give__en[1][2] = switch_units__get__en[2][1];
  assign switch_units__get__rdy[2][1] = route_units__give__rdy[1][2];
  assign switch_units__get__ret[2][1] = route_units__give__ret[1][2];
  assign route_units__give__en[1][3] = switch_units__get__en[3][1];
  assign switch_units__get__rdy[3][1] = route_units__give__rdy[1][3];
  assign switch_units__get__ret[3][1] = route_units__give__ret[1][3];
  assign route_units__give__en[1][4] = switch_units__get__en[4][1];
  assign switch_units__get__rdy[4][1] = route_units__give__rdy[1][4];
  assign switch_units__get__ret[4][1] = route_units__give__ret[1][4];
  assign route_units__give__en[1][5] = switch_units__get__en[5][1];
  assign switch_units__get__rdy[5][1] = route_units__give__rdy[1][5];
  assign switch_units__get__ret[5][1] = route_units__give__ret[1][5];
  assign route_units__give__en[1][6] = switch_units__get__en[6][1];
  assign switch_units__get__rdy[6][1] = route_units__give__rdy[1][6];
  assign switch_units__get__ret[6][1] = route_units__give__ret[1][6];
  assign route_units__give__en[1][7] = switch_units__get__en[7][1];
  assign switch_units__get__rdy[7][1] = route_units__give__rdy[1][7];
  assign switch_units__get__ret[7][1] = route_units__give__ret[1][7];
  assign route_units__give__en[1][8] = switch_units__get__en[8][1];
  assign switch_units__get__rdy[8][1] = route_units__give__rdy[1][8];
  assign switch_units__get__ret[8][1] = route_units__give__ret[1][8];
  assign route_units__give__en[1][9] = switch_units__get__en[9][1];
  assign switch_units__get__rdy[9][1] = route_units__give__rdy[1][9];
  assign switch_units__get__ret[9][1] = route_units__give__ret[1][9];
  assign route_units__give__en[1][10] = switch_units__get__en[10][1];
  assign switch_units__get__rdy[10][1] = route_units__give__rdy[1][10];
  assign switch_units__get__ret[10][1] = route_units__give__ret[1][10];
  assign route_units__give__en[1][11] = switch_units__get__en[11][1];
  assign switch_units__get__rdy[11][1] = route_units__give__rdy[1][11];
  assign switch_units__get__ret[11][1] = route_units__give__ret[1][11];
  assign route_units__give__en[1][12] = switch_units__get__en[12][1];
  assign switch_units__get__rdy[12][1] = route_units__give__rdy[1][12];
  assign switch_units__get__ret[12][1] = route_units__give__ret[1][12];
  assign route_units__give__en[1][13] = switch_units__get__en[13][1];
  assign switch_units__get__rdy[13][1] = route_units__give__rdy[1][13];
  assign switch_units__get__ret[13][1] = route_units__give__ret[1][13];
  assign route_units__give__en[1][14] = switch_units__get__en[14][1];
  assign switch_units__get__rdy[14][1] = route_units__give__rdy[1][14];
  assign switch_units__get__ret[14][1] = route_units__give__ret[1][14];
  assign route_units__give__en[1][15] = switch_units__get__en[15][1];
  assign switch_units__get__rdy[15][1] = route_units__give__rdy[1][15];
  assign switch_units__get__ret[15][1] = route_units__give__ret[1][15];
  assign route_units__give__en[1][16] = switch_units__get__en[16][1];
  assign switch_units__get__rdy[16][1] = route_units__give__rdy[1][16];
  assign switch_units__get__ret[16][1] = route_units__give__ret[1][16];
  assign route_units__give__en[2][0] = switch_units__get__en[0][2];
  assign switch_units__get__rdy[0][2] = route_units__give__rdy[2][0];
  assign switch_units__get__ret[0][2] = route_units__give__ret[2][0];
  assign route_units__give__en[2][1] = switch_units__get__en[1][2];
  assign switch_units__get__rdy[1][2] = route_units__give__rdy[2][1];
  assign switch_units__get__ret[1][2] = route_units__give__ret[2][1];
  assign route_units__give__en[2][2] = switch_units__get__en[2][2];
  assign switch_units__get__rdy[2][2] = route_units__give__rdy[2][2];
  assign switch_units__get__ret[2][2] = route_units__give__ret[2][2];
  assign route_units__give__en[2][3] = switch_units__get__en[3][2];
  assign switch_units__get__rdy[3][2] = route_units__give__rdy[2][3];
  assign switch_units__get__ret[3][2] = route_units__give__ret[2][3];
  assign route_units__give__en[2][4] = switch_units__get__en[4][2];
  assign switch_units__get__rdy[4][2] = route_units__give__rdy[2][4];
  assign switch_units__get__ret[4][2] = route_units__give__ret[2][4];
  assign route_units__give__en[2][5] = switch_units__get__en[5][2];
  assign switch_units__get__rdy[5][2] = route_units__give__rdy[2][5];
  assign switch_units__get__ret[5][2] = route_units__give__ret[2][5];
  assign route_units__give__en[2][6] = switch_units__get__en[6][2];
  assign switch_units__get__rdy[6][2] = route_units__give__rdy[2][6];
  assign switch_units__get__ret[6][2] = route_units__give__ret[2][6];
  assign route_units__give__en[2][7] = switch_units__get__en[7][2];
  assign switch_units__get__rdy[7][2] = route_units__give__rdy[2][7];
  assign switch_units__get__ret[7][2] = route_units__give__ret[2][7];
  assign route_units__give__en[2][8] = switch_units__get__en[8][2];
  assign switch_units__get__rdy[8][2] = route_units__give__rdy[2][8];
  assign switch_units__get__ret[8][2] = route_units__give__ret[2][8];
  assign route_units__give__en[2][9] = switch_units__get__en[9][2];
  assign switch_units__get__rdy[9][2] = route_units__give__rdy[2][9];
  assign switch_units__get__ret[9][2] = route_units__give__ret[2][9];
  assign route_units__give__en[2][10] = switch_units__get__en[10][2];
  assign switch_units__get__rdy[10][2] = route_units__give__rdy[2][10];
  assign switch_units__get__ret[10][2] = route_units__give__ret[2][10];
  assign route_units__give__en[2][11] = switch_units__get__en[11][2];
  assign switch_units__get__rdy[11][2] = route_units__give__rdy[2][11];
  assign switch_units__get__ret[11][2] = route_units__give__ret[2][11];
  assign route_units__give__en[2][12] = switch_units__get__en[12][2];
  assign switch_units__get__rdy[12][2] = route_units__give__rdy[2][12];
  assign switch_units__get__ret[12][2] = route_units__give__ret[2][12];
  assign route_units__give__en[2][13] = switch_units__get__en[13][2];
  assign switch_units__get__rdy[13][2] = route_units__give__rdy[2][13];
  assign switch_units__get__ret[13][2] = route_units__give__ret[2][13];
  assign route_units__give__en[2][14] = switch_units__get__en[14][2];
  assign switch_units__get__rdy[14][2] = route_units__give__rdy[2][14];
  assign switch_units__get__ret[14][2] = route_units__give__ret[2][14];
  assign route_units__give__en[2][15] = switch_units__get__en[15][2];
  assign switch_units__get__rdy[15][2] = route_units__give__rdy[2][15];
  assign switch_units__get__ret[15][2] = route_units__give__ret[2][15];
  assign route_units__give__en[2][16] = switch_units__get__en[16][2];
  assign switch_units__get__rdy[16][2] = route_units__give__rdy[2][16];
  assign switch_units__get__ret[16][2] = route_units__give__ret[2][16];
  assign route_units__give__en[3][0] = switch_units__get__en[0][3];
  assign switch_units__get__rdy[0][3] = route_units__give__rdy[3][0];
  assign switch_units__get__ret[0][3] = route_units__give__ret[3][0];
  assign route_units__give__en[3][1] = switch_units__get__en[1][3];
  assign switch_units__get__rdy[1][3] = route_units__give__rdy[3][1];
  assign switch_units__get__ret[1][3] = route_units__give__ret[3][1];
  assign route_units__give__en[3][2] = switch_units__get__en[2][3];
  assign switch_units__get__rdy[2][3] = route_units__give__rdy[3][2];
  assign switch_units__get__ret[2][3] = route_units__give__ret[3][2];
  assign route_units__give__en[3][3] = switch_units__get__en[3][3];
  assign switch_units__get__rdy[3][3] = route_units__give__rdy[3][3];
  assign switch_units__get__ret[3][3] = route_units__give__ret[3][3];
  assign route_units__give__en[3][4] = switch_units__get__en[4][3];
  assign switch_units__get__rdy[4][3] = route_units__give__rdy[3][4];
  assign switch_units__get__ret[4][3] = route_units__give__ret[3][4];
  assign route_units__give__en[3][5] = switch_units__get__en[5][3];
  assign switch_units__get__rdy[5][3] = route_units__give__rdy[3][5];
  assign switch_units__get__ret[5][3] = route_units__give__ret[3][5];
  assign route_units__give__en[3][6] = switch_units__get__en[6][3];
  assign switch_units__get__rdy[6][3] = route_units__give__rdy[3][6];
  assign switch_units__get__ret[6][3] = route_units__give__ret[3][6];
  assign route_units__give__en[3][7] = switch_units__get__en[7][3];
  assign switch_units__get__rdy[7][3] = route_units__give__rdy[3][7];
  assign switch_units__get__ret[7][3] = route_units__give__ret[3][7];
  assign route_units__give__en[3][8] = switch_units__get__en[8][3];
  assign switch_units__get__rdy[8][3] = route_units__give__rdy[3][8];
  assign switch_units__get__ret[8][3] = route_units__give__ret[3][8];
  assign route_units__give__en[3][9] = switch_units__get__en[9][3];
  assign switch_units__get__rdy[9][3] = route_units__give__rdy[3][9];
  assign switch_units__get__ret[9][3] = route_units__give__ret[3][9];
  assign route_units__give__en[3][10] = switch_units__get__en[10][3];
  assign switch_units__get__rdy[10][3] = route_units__give__rdy[3][10];
  assign switch_units__get__ret[10][3] = route_units__give__ret[3][10];
  assign route_units__give__en[3][11] = switch_units__get__en[11][3];
  assign switch_units__get__rdy[11][3] = route_units__give__rdy[3][11];
  assign switch_units__get__ret[11][3] = route_units__give__ret[3][11];
  assign route_units__give__en[3][12] = switch_units__get__en[12][3];
  assign switch_units__get__rdy[12][3] = route_units__give__rdy[3][12];
  assign switch_units__get__ret[12][3] = route_units__give__ret[3][12];
  assign route_units__give__en[3][13] = switch_units__get__en[13][3];
  assign switch_units__get__rdy[13][3] = route_units__give__rdy[3][13];
  assign switch_units__get__ret[13][3] = route_units__give__ret[3][13];
  assign route_units__give__en[3][14] = switch_units__get__en[14][3];
  assign switch_units__get__rdy[14][3] = route_units__give__rdy[3][14];
  assign switch_units__get__ret[14][3] = route_units__give__ret[3][14];
  assign route_units__give__en[3][15] = switch_units__get__en[15][3];
  assign switch_units__get__rdy[15][3] = route_units__give__rdy[3][15];
  assign switch_units__get__ret[15][3] = route_units__give__ret[3][15];
  assign route_units__give__en[3][16] = switch_units__get__en[16][3];
  assign switch_units__get__rdy[16][3] = route_units__give__rdy[3][16];
  assign switch_units__get__ret[16][3] = route_units__give__ret[3][16];
  assign switch_units__give__en[0] = output_units__get__en[0];
  assign output_units__get__rdy[0] = switch_units__give__rdy[0];
  assign output_units__get__ret[0] = switch_units__give__ret[0];
  assign send__en[0] = output_units__send__en[0];
  assign send__msg[0] = output_units__send__msg[0];
  assign output_units__send__rdy[0] = send__rdy[0];
  assign switch_units__give__en[1] = output_units__get__en[1];
  assign output_units__get__rdy[1] = switch_units__give__rdy[1];
  assign output_units__get__ret[1] = switch_units__give__ret[1];
  assign send__en[1] = output_units__send__en[1];
  assign send__msg[1] = output_units__send__msg[1];
  assign output_units__send__rdy[1] = send__rdy[1];
  assign switch_units__give__en[2] = output_units__get__en[2];
  assign output_units__get__rdy[2] = switch_units__give__rdy[2];
  assign output_units__get__ret[2] = switch_units__give__ret[2];
  assign send__en[2] = output_units__send__en[2];
  assign send__msg[2] = output_units__send__msg[2];
  assign output_units__send__rdy[2] = send__rdy[2];
  assign switch_units__give__en[3] = output_units__get__en[3];
  assign output_units__get__rdy[3] = switch_units__give__rdy[3];
  assign output_units__get__ret[3] = switch_units__give__ret[3];
  assign send__en[3] = output_units__send__en[3];
  assign send__msg[3] = output_units__send__msg[3];
  assign output_units__send__rdy[3] = send__rdy[3];
  assign switch_units__give__en[4] = output_units__get__en[4];
  assign output_units__get__rdy[4] = switch_units__give__rdy[4];
  assign output_units__get__ret[4] = switch_units__give__ret[4];
  assign send__en[4] = output_units__send__en[4];
  assign send__msg[4] = output_units__send__msg[4];
  assign output_units__send__rdy[4] = send__rdy[4];
  assign switch_units__give__en[5] = output_units__get__en[5];
  assign output_units__get__rdy[5] = switch_units__give__rdy[5];
  assign output_units__get__ret[5] = switch_units__give__ret[5];
  assign send__en[5] = output_units__send__en[5];
  assign send__msg[5] = output_units__send__msg[5];
  assign output_units__send__rdy[5] = send__rdy[5];
  assign switch_units__give__en[6] = output_units__get__en[6];
  assign output_units__get__rdy[6] = switch_units__give__rdy[6];
  assign output_units__get__ret[6] = switch_units__give__ret[6];
  assign send__en[6] = output_units__send__en[6];
  assign send__msg[6] = output_units__send__msg[6];
  assign output_units__send__rdy[6] = send__rdy[6];
  assign switch_units__give__en[7] = output_units__get__en[7];
  assign output_units__get__rdy[7] = switch_units__give__rdy[7];
  assign output_units__get__ret[7] = switch_units__give__ret[7];
  assign send__en[7] = output_units__send__en[7];
  assign send__msg[7] = output_units__send__msg[7];
  assign output_units__send__rdy[7] = send__rdy[7];
  assign switch_units__give__en[8] = output_units__get__en[8];
  assign output_units__get__rdy[8] = switch_units__give__rdy[8];
  assign output_units__get__ret[8] = switch_units__give__ret[8];
  assign send__en[8] = output_units__send__en[8];
  assign send__msg[8] = output_units__send__msg[8];
  assign output_units__send__rdy[8] = send__rdy[8];
  assign switch_units__give__en[9] = output_units__get__en[9];
  assign output_units__get__rdy[9] = switch_units__give__rdy[9];
  assign output_units__get__ret[9] = switch_units__give__ret[9];
  assign send__en[9] = output_units__send__en[9];
  assign send__msg[9] = output_units__send__msg[9];
  assign output_units__send__rdy[9] = send__rdy[9];
  assign switch_units__give__en[10] = output_units__get__en[10];
  assign output_units__get__rdy[10] = switch_units__give__rdy[10];
  assign output_units__get__ret[10] = switch_units__give__ret[10];
  assign send__en[10] = output_units__send__en[10];
  assign send__msg[10] = output_units__send__msg[10];
  assign output_units__send__rdy[10] = send__rdy[10];
  assign switch_units__give__en[11] = output_units__get__en[11];
  assign output_units__get__rdy[11] = switch_units__give__rdy[11];
  assign output_units__get__ret[11] = switch_units__give__ret[11];
  assign send__en[11] = output_units__send__en[11];
  assign send__msg[11] = output_units__send__msg[11];
  assign output_units__send__rdy[11] = send__rdy[11];
  assign switch_units__give__en[12] = output_units__get__en[12];
  assign output_units__get__rdy[12] = switch_units__give__rdy[12];
  assign output_units__get__ret[12] = switch_units__give__ret[12];
  assign send__en[12] = output_units__send__en[12];
  assign send__msg[12] = output_units__send__msg[12];
  assign output_units__send__rdy[12] = send__rdy[12];
  assign switch_units__give__en[13] = output_units__get__en[13];
  assign output_units__get__rdy[13] = switch_units__give__rdy[13];
  assign output_units__get__ret[13] = switch_units__give__ret[13];
  assign send__en[13] = output_units__send__en[13];
  assign send__msg[13] = output_units__send__msg[13];
  assign output_units__send__rdy[13] = send__rdy[13];
  assign switch_units__give__en[14] = output_units__get__en[14];
  assign output_units__get__rdy[14] = switch_units__give__rdy[14];
  assign output_units__get__ret[14] = switch_units__give__ret[14];
  assign send__en[14] = output_units__send__en[14];
  assign send__msg[14] = output_units__send__msg[14];
  assign output_units__send__rdy[14] = send__rdy[14];
  assign switch_units__give__en[15] = output_units__get__en[15];
  assign output_units__get__rdy[15] = switch_units__give__rdy[15];
  assign output_units__get__ret[15] = switch_units__give__ret[15];
  assign send__en[15] = output_units__send__en[15];
  assign send__msg[15] = output_units__send__msg[15];
  assign output_units__send__rdy[15] = send__rdy[15];
  assign switch_units__give__en[16] = output_units__get__en[16];
  assign output_units__get__rdy[16] = switch_units__give__rdy[16];
  assign output_units__get__ret[16] = switch_units__give__ret[16];
  assign send__en[16] = output_units__send__en[16];
  assign send__msg[16] = output_units__send__msg[16];
  assign output_units__send__rdy[16] = send__rdy[16];

endmodule


// PyMTL Component MasterMinionXbarGeneric Definition
// Full name: MasterMinionXbarGeneric__Req_CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7__Resp_CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7__num_requesters_17__num_responders_4__max_req_in_flight_4__DstLogicT_ScratchpadDstLogic
// At /work/global/pp482/cgra/src/pymtl3_net/mmxbar/MasterMinionXbarGeneric.py

module MasterMinionXbarGeneric__748581449e74f4d5
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  output logic [0:0] master__req__en [0:3],
  output CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 master__req__msg [0:3],
  input logic [0:0] master__req__rdy [0:3],
  input logic [0:0] master__resp__en [0:3],
  input CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 master__resp__msg [0:3],
  output logic [0:0] master__resp__rdy [0:3],
  input logic [0:0] minion__req__en [0:16],
  input CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 minion__req__msg [0:16],
  output logic [0:0] minion__req__rdy [0:16],
  output logic [0:0] minion__resp__en [0:16],
  output CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 minion__resp__msg [0:16],
  input logic [0:0] minion__resp__rdy [0:16]
);
  //-------------------------------------------------------------
  // Component req_adapter[0:16]
  //-------------------------------------------------------------

  logic [0:0] req_adapter__clk [0:16];
  logic [0:0] req_adapter__reset [0:16];
  logic [0:0] req_adapter__master__req__en [0:16];
  mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd req_adapter__master__req__msg [0:16];
  logic [0:0] req_adapter__master__req__rdy [0:16];
  logic [0:0] req_adapter__master__resp__en [0:16];
  mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 req_adapter__master__resp__msg [0:16];
  logic [0:0] req_adapter__master__resp__rdy [0:16];
  logic [0:0] req_adapter__minion__req__en [0:16];
  CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 req_adapter__minion__req__msg [0:16];
  logic [0:0] req_adapter__minion__req__rdy [0:16];
  logic [0:0] req_adapter__minion__resp__en [0:16];
  CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 req_adapter__minion__resp__msg [0:16];
  logic [0:0] req_adapter__minion__resp__rdy [0:16];

  ReqAdapter__fd54650417570394 req_adapter__0
  (
    .clk( req_adapter__clk[0] ),
    .reset( req_adapter__reset[0] ),
    .master__req__en( req_adapter__master__req__en[0] ),
    .master__req__msg( req_adapter__master__req__msg[0] ),
    .master__req__rdy( req_adapter__master__req__rdy[0] ),
    .master__resp__en( req_adapter__master__resp__en[0] ),
    .master__resp__msg( req_adapter__master__resp__msg[0] ),
    .master__resp__rdy( req_adapter__master__resp__rdy[0] ),
    .minion__req__en( req_adapter__minion__req__en[0] ),
    .minion__req__msg( req_adapter__minion__req__msg[0] ),
    .minion__req__rdy( req_adapter__minion__req__rdy[0] ),
    .minion__resp__en( req_adapter__minion__resp__en[0] ),
    .minion__resp__msg( req_adapter__minion__resp__msg[0] ),
    .minion__resp__rdy( req_adapter__minion__resp__rdy[0] )
  );

  ReqAdapter__d35006938139cb70 req_adapter__1
  (
    .clk( req_adapter__clk[1] ),
    .reset( req_adapter__reset[1] ),
    .master__req__en( req_adapter__master__req__en[1] ),
    .master__req__msg( req_adapter__master__req__msg[1] ),
    .master__req__rdy( req_adapter__master__req__rdy[1] ),
    .master__resp__en( req_adapter__master__resp__en[1] ),
    .master__resp__msg( req_adapter__master__resp__msg[1] ),
    .master__resp__rdy( req_adapter__master__resp__rdy[1] ),
    .minion__req__en( req_adapter__minion__req__en[1] ),
    .minion__req__msg( req_adapter__minion__req__msg[1] ),
    .minion__req__rdy( req_adapter__minion__req__rdy[1] ),
    .minion__resp__en( req_adapter__minion__resp__en[1] ),
    .minion__resp__msg( req_adapter__minion__resp__msg[1] ),
    .minion__resp__rdy( req_adapter__minion__resp__rdy[1] )
  );

  ReqAdapter__8af44fd2bb63f5ca req_adapter__2
  (
    .clk( req_adapter__clk[2] ),
    .reset( req_adapter__reset[2] ),
    .master__req__en( req_adapter__master__req__en[2] ),
    .master__req__msg( req_adapter__master__req__msg[2] ),
    .master__req__rdy( req_adapter__master__req__rdy[2] ),
    .master__resp__en( req_adapter__master__resp__en[2] ),
    .master__resp__msg( req_adapter__master__resp__msg[2] ),
    .master__resp__rdy( req_adapter__master__resp__rdy[2] ),
    .minion__req__en( req_adapter__minion__req__en[2] ),
    .minion__req__msg( req_adapter__minion__req__msg[2] ),
    .minion__req__rdy( req_adapter__minion__req__rdy[2] ),
    .minion__resp__en( req_adapter__minion__resp__en[2] ),
    .minion__resp__msg( req_adapter__minion__resp__msg[2] ),
    .minion__resp__rdy( req_adapter__minion__resp__rdy[2] )
  );

  ReqAdapter__97e8a9cd31de8392 req_adapter__3
  (
    .clk( req_adapter__clk[3] ),
    .reset( req_adapter__reset[3] ),
    .master__req__en( req_adapter__master__req__en[3] ),
    .master__req__msg( req_adapter__master__req__msg[3] ),
    .master__req__rdy( req_adapter__master__req__rdy[3] ),
    .master__resp__en( req_adapter__master__resp__en[3] ),
    .master__resp__msg( req_adapter__master__resp__msg[3] ),
    .master__resp__rdy( req_adapter__master__resp__rdy[3] ),
    .minion__req__en( req_adapter__minion__req__en[3] ),
    .minion__req__msg( req_adapter__minion__req__msg[3] ),
    .minion__req__rdy( req_adapter__minion__req__rdy[3] ),
    .minion__resp__en( req_adapter__minion__resp__en[3] ),
    .minion__resp__msg( req_adapter__minion__resp__msg[3] ),
    .minion__resp__rdy( req_adapter__minion__resp__rdy[3] )
  );

  ReqAdapter__00db4764a604ff63 req_adapter__4
  (
    .clk( req_adapter__clk[4] ),
    .reset( req_adapter__reset[4] ),
    .master__req__en( req_adapter__master__req__en[4] ),
    .master__req__msg( req_adapter__master__req__msg[4] ),
    .master__req__rdy( req_adapter__master__req__rdy[4] ),
    .master__resp__en( req_adapter__master__resp__en[4] ),
    .master__resp__msg( req_adapter__master__resp__msg[4] ),
    .master__resp__rdy( req_adapter__master__resp__rdy[4] ),
    .minion__req__en( req_adapter__minion__req__en[4] ),
    .minion__req__msg( req_adapter__minion__req__msg[4] ),
    .minion__req__rdy( req_adapter__minion__req__rdy[4] ),
    .minion__resp__en( req_adapter__minion__resp__en[4] ),
    .minion__resp__msg( req_adapter__minion__resp__msg[4] ),
    .minion__resp__rdy( req_adapter__minion__resp__rdy[4] )
  );

  ReqAdapter__01da3b84d22e9b3f req_adapter__5
  (
    .clk( req_adapter__clk[5] ),
    .reset( req_adapter__reset[5] ),
    .master__req__en( req_adapter__master__req__en[5] ),
    .master__req__msg( req_adapter__master__req__msg[5] ),
    .master__req__rdy( req_adapter__master__req__rdy[5] ),
    .master__resp__en( req_adapter__master__resp__en[5] ),
    .master__resp__msg( req_adapter__master__resp__msg[5] ),
    .master__resp__rdy( req_adapter__master__resp__rdy[5] ),
    .minion__req__en( req_adapter__minion__req__en[5] ),
    .minion__req__msg( req_adapter__minion__req__msg[5] ),
    .minion__req__rdy( req_adapter__minion__req__rdy[5] ),
    .minion__resp__en( req_adapter__minion__resp__en[5] ),
    .minion__resp__msg( req_adapter__minion__resp__msg[5] ),
    .minion__resp__rdy( req_adapter__minion__resp__rdy[5] )
  );

  ReqAdapter__529dea8e619fa0ea req_adapter__6
  (
    .clk( req_adapter__clk[6] ),
    .reset( req_adapter__reset[6] ),
    .master__req__en( req_adapter__master__req__en[6] ),
    .master__req__msg( req_adapter__master__req__msg[6] ),
    .master__req__rdy( req_adapter__master__req__rdy[6] ),
    .master__resp__en( req_adapter__master__resp__en[6] ),
    .master__resp__msg( req_adapter__master__resp__msg[6] ),
    .master__resp__rdy( req_adapter__master__resp__rdy[6] ),
    .minion__req__en( req_adapter__minion__req__en[6] ),
    .minion__req__msg( req_adapter__minion__req__msg[6] ),
    .minion__req__rdy( req_adapter__minion__req__rdy[6] ),
    .minion__resp__en( req_adapter__minion__resp__en[6] ),
    .minion__resp__msg( req_adapter__minion__resp__msg[6] ),
    .minion__resp__rdy( req_adapter__minion__resp__rdy[6] )
  );

  ReqAdapter__76ed7830b9e5ef5f req_adapter__7
  (
    .clk( req_adapter__clk[7] ),
    .reset( req_adapter__reset[7] ),
    .master__req__en( req_adapter__master__req__en[7] ),
    .master__req__msg( req_adapter__master__req__msg[7] ),
    .master__req__rdy( req_adapter__master__req__rdy[7] ),
    .master__resp__en( req_adapter__master__resp__en[7] ),
    .master__resp__msg( req_adapter__master__resp__msg[7] ),
    .master__resp__rdy( req_adapter__master__resp__rdy[7] ),
    .minion__req__en( req_adapter__minion__req__en[7] ),
    .minion__req__msg( req_adapter__minion__req__msg[7] ),
    .minion__req__rdy( req_adapter__minion__req__rdy[7] ),
    .minion__resp__en( req_adapter__minion__resp__en[7] ),
    .minion__resp__msg( req_adapter__minion__resp__msg[7] ),
    .minion__resp__rdy( req_adapter__minion__resp__rdy[7] )
  );

  ReqAdapter__6ab641fc601c91f5 req_adapter__8
  (
    .clk( req_adapter__clk[8] ),
    .reset( req_adapter__reset[8] ),
    .master__req__en( req_adapter__master__req__en[8] ),
    .master__req__msg( req_adapter__master__req__msg[8] ),
    .master__req__rdy( req_adapter__master__req__rdy[8] ),
    .master__resp__en( req_adapter__master__resp__en[8] ),
    .master__resp__msg( req_adapter__master__resp__msg[8] ),
    .master__resp__rdy( req_adapter__master__resp__rdy[8] ),
    .minion__req__en( req_adapter__minion__req__en[8] ),
    .minion__req__msg( req_adapter__minion__req__msg[8] ),
    .minion__req__rdy( req_adapter__minion__req__rdy[8] ),
    .minion__resp__en( req_adapter__minion__resp__en[8] ),
    .minion__resp__msg( req_adapter__minion__resp__msg[8] ),
    .minion__resp__rdy( req_adapter__minion__resp__rdy[8] )
  );

  ReqAdapter__4e7ae9506498f3cb req_adapter__9
  (
    .clk( req_adapter__clk[9] ),
    .reset( req_adapter__reset[9] ),
    .master__req__en( req_adapter__master__req__en[9] ),
    .master__req__msg( req_adapter__master__req__msg[9] ),
    .master__req__rdy( req_adapter__master__req__rdy[9] ),
    .master__resp__en( req_adapter__master__resp__en[9] ),
    .master__resp__msg( req_adapter__master__resp__msg[9] ),
    .master__resp__rdy( req_adapter__master__resp__rdy[9] ),
    .minion__req__en( req_adapter__minion__req__en[9] ),
    .minion__req__msg( req_adapter__minion__req__msg[9] ),
    .minion__req__rdy( req_adapter__minion__req__rdy[9] ),
    .minion__resp__en( req_adapter__minion__resp__en[9] ),
    .minion__resp__msg( req_adapter__minion__resp__msg[9] ),
    .minion__resp__rdy( req_adapter__minion__resp__rdy[9] )
  );

  ReqAdapter__4aaa04dd88de17e9 req_adapter__10
  (
    .clk( req_adapter__clk[10] ),
    .reset( req_adapter__reset[10] ),
    .master__req__en( req_adapter__master__req__en[10] ),
    .master__req__msg( req_adapter__master__req__msg[10] ),
    .master__req__rdy( req_adapter__master__req__rdy[10] ),
    .master__resp__en( req_adapter__master__resp__en[10] ),
    .master__resp__msg( req_adapter__master__resp__msg[10] ),
    .master__resp__rdy( req_adapter__master__resp__rdy[10] ),
    .minion__req__en( req_adapter__minion__req__en[10] ),
    .minion__req__msg( req_adapter__minion__req__msg[10] ),
    .minion__req__rdy( req_adapter__minion__req__rdy[10] ),
    .minion__resp__en( req_adapter__minion__resp__en[10] ),
    .minion__resp__msg( req_adapter__minion__resp__msg[10] ),
    .minion__resp__rdy( req_adapter__minion__resp__rdy[10] )
  );

  ReqAdapter__b3a44120b57b6ffc req_adapter__11
  (
    .clk( req_adapter__clk[11] ),
    .reset( req_adapter__reset[11] ),
    .master__req__en( req_adapter__master__req__en[11] ),
    .master__req__msg( req_adapter__master__req__msg[11] ),
    .master__req__rdy( req_adapter__master__req__rdy[11] ),
    .master__resp__en( req_adapter__master__resp__en[11] ),
    .master__resp__msg( req_adapter__master__resp__msg[11] ),
    .master__resp__rdy( req_adapter__master__resp__rdy[11] ),
    .minion__req__en( req_adapter__minion__req__en[11] ),
    .minion__req__msg( req_adapter__minion__req__msg[11] ),
    .minion__req__rdy( req_adapter__minion__req__rdy[11] ),
    .minion__resp__en( req_adapter__minion__resp__en[11] ),
    .minion__resp__msg( req_adapter__minion__resp__msg[11] ),
    .minion__resp__rdy( req_adapter__minion__resp__rdy[11] )
  );

  ReqAdapter__01becc7a5001b5c2 req_adapter__12
  (
    .clk( req_adapter__clk[12] ),
    .reset( req_adapter__reset[12] ),
    .master__req__en( req_adapter__master__req__en[12] ),
    .master__req__msg( req_adapter__master__req__msg[12] ),
    .master__req__rdy( req_adapter__master__req__rdy[12] ),
    .master__resp__en( req_adapter__master__resp__en[12] ),
    .master__resp__msg( req_adapter__master__resp__msg[12] ),
    .master__resp__rdy( req_adapter__master__resp__rdy[12] ),
    .minion__req__en( req_adapter__minion__req__en[12] ),
    .minion__req__msg( req_adapter__minion__req__msg[12] ),
    .minion__req__rdy( req_adapter__minion__req__rdy[12] ),
    .minion__resp__en( req_adapter__minion__resp__en[12] ),
    .minion__resp__msg( req_adapter__minion__resp__msg[12] ),
    .minion__resp__rdy( req_adapter__minion__resp__rdy[12] )
  );

  ReqAdapter__5fca60022a755d99 req_adapter__13
  (
    .clk( req_adapter__clk[13] ),
    .reset( req_adapter__reset[13] ),
    .master__req__en( req_adapter__master__req__en[13] ),
    .master__req__msg( req_adapter__master__req__msg[13] ),
    .master__req__rdy( req_adapter__master__req__rdy[13] ),
    .master__resp__en( req_adapter__master__resp__en[13] ),
    .master__resp__msg( req_adapter__master__resp__msg[13] ),
    .master__resp__rdy( req_adapter__master__resp__rdy[13] ),
    .minion__req__en( req_adapter__minion__req__en[13] ),
    .minion__req__msg( req_adapter__minion__req__msg[13] ),
    .minion__req__rdy( req_adapter__minion__req__rdy[13] ),
    .minion__resp__en( req_adapter__minion__resp__en[13] ),
    .minion__resp__msg( req_adapter__minion__resp__msg[13] ),
    .minion__resp__rdy( req_adapter__minion__resp__rdy[13] )
  );

  ReqAdapter__80e5324b4a2f795e req_adapter__14
  (
    .clk( req_adapter__clk[14] ),
    .reset( req_adapter__reset[14] ),
    .master__req__en( req_adapter__master__req__en[14] ),
    .master__req__msg( req_adapter__master__req__msg[14] ),
    .master__req__rdy( req_adapter__master__req__rdy[14] ),
    .master__resp__en( req_adapter__master__resp__en[14] ),
    .master__resp__msg( req_adapter__master__resp__msg[14] ),
    .master__resp__rdy( req_adapter__master__resp__rdy[14] ),
    .minion__req__en( req_adapter__minion__req__en[14] ),
    .minion__req__msg( req_adapter__minion__req__msg[14] ),
    .minion__req__rdy( req_adapter__minion__req__rdy[14] ),
    .minion__resp__en( req_adapter__minion__resp__en[14] ),
    .minion__resp__msg( req_adapter__minion__resp__msg[14] ),
    .minion__resp__rdy( req_adapter__minion__resp__rdy[14] )
  );

  ReqAdapter__db11fe7fced03363 req_adapter__15
  (
    .clk( req_adapter__clk[15] ),
    .reset( req_adapter__reset[15] ),
    .master__req__en( req_adapter__master__req__en[15] ),
    .master__req__msg( req_adapter__master__req__msg[15] ),
    .master__req__rdy( req_adapter__master__req__rdy[15] ),
    .master__resp__en( req_adapter__master__resp__en[15] ),
    .master__resp__msg( req_adapter__master__resp__msg[15] ),
    .master__resp__rdy( req_adapter__master__resp__rdy[15] ),
    .minion__req__en( req_adapter__minion__req__en[15] ),
    .minion__req__msg( req_adapter__minion__req__msg[15] ),
    .minion__req__rdy( req_adapter__minion__req__rdy[15] ),
    .minion__resp__en( req_adapter__minion__resp__en[15] ),
    .minion__resp__msg( req_adapter__minion__resp__msg[15] ),
    .minion__resp__rdy( req_adapter__minion__resp__rdy[15] )
  );

  ReqAdapter__78550895ef6730eb req_adapter__16
  (
    .clk( req_adapter__clk[16] ),
    .reset( req_adapter__reset[16] ),
    .master__req__en( req_adapter__master__req__en[16] ),
    .master__req__msg( req_adapter__master__req__msg[16] ),
    .master__req__rdy( req_adapter__master__req__rdy[16] ),
    .master__resp__en( req_adapter__master__resp__en[16] ),
    .master__resp__msg( req_adapter__master__resp__msg[16] ),
    .master__resp__rdy( req_adapter__master__resp__rdy[16] ),
    .minion__req__en( req_adapter__minion__req__en[16] ),
    .minion__req__msg( req_adapter__minion__req__msg[16] ),
    .minion__req__rdy( req_adapter__minion__req__rdy[16] ),
    .minion__resp__en( req_adapter__minion__resp__en[16] ),
    .minion__resp__msg( req_adapter__minion__resp__msg[16] ),
    .minion__resp__rdy( req_adapter__minion__resp__rdy[16] )
  );

  //-------------------------------------------------------------
  // End of component req_adapter[0:16]
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component req_net
  //-------------------------------------------------------------

  logic [0:0] req_net__clk;
  logic [0:0] req_net__reset;
  logic [0:0] req_net__recv__en [0:16];
  mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd req_net__recv__msg [0:16];
  logic [0:0] req_net__recv__rdy [0:16];
  logic [0:0] req_net__send__en [0:3];
  mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd req_net__send__msg [0:3];
  logic [0:0] req_net__send__rdy [0:3];

  XbarRTL__beeeaf37e1c2bdee req_net
  (
    .clk( req_net__clk ),
    .reset( req_net__reset ),
    .recv__en( req_net__recv__en ),
    .recv__msg( req_net__recv__msg ),
    .recv__rdy( req_net__recv__rdy ),
    .send__en( req_net__send__en ),
    .send__msg( req_net__send__msg ),
    .send__rdy( req_net__send__rdy )
  );

  //-------------------------------------------------------------
  // End of component req_net
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component resp_adapter[0:3]
  //-------------------------------------------------------------

  logic [0:0] resp_adapter__clk [0:3];
  logic [0:0] resp_adapter__reset [0:3];
  logic [0:0] resp_adapter__master__req__en [0:3];
  CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 resp_adapter__master__req__msg [0:3];
  logic [0:0] resp_adapter__master__req__rdy [0:3];
  logic [0:0] resp_adapter__master__resp__en [0:3];
  CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 resp_adapter__master__resp__msg [0:3];
  logic [0:0] resp_adapter__master__resp__rdy [0:3];
  logic [0:0] resp_adapter__minion__req__en [0:3];
  mmxbar_req_4_CgraLocalMemReqMsg__e05355b0ca6fcfbd resp_adapter__minion__req__msg [0:3];
  logic [0:0] resp_adapter__minion__req__rdy [0:3];
  logic [0:0] resp_adapter__minion__resp__en [0:3];
  mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 resp_adapter__minion__resp__msg [0:3];
  logic [0:0] resp_adapter__minion__resp__rdy [0:3];

  RespAdapter__9114518d27c5302f resp_adapter__0
  (
    .clk( resp_adapter__clk[0] ),
    .reset( resp_adapter__reset[0] ),
    .master__req__en( resp_adapter__master__req__en[0] ),
    .master__req__msg( resp_adapter__master__req__msg[0] ),
    .master__req__rdy( resp_adapter__master__req__rdy[0] ),
    .master__resp__en( resp_adapter__master__resp__en[0] ),
    .master__resp__msg( resp_adapter__master__resp__msg[0] ),
    .master__resp__rdy( resp_adapter__master__resp__rdy[0] ),
    .minion__req__en( resp_adapter__minion__req__en[0] ),
    .minion__req__msg( resp_adapter__minion__req__msg[0] ),
    .minion__req__rdy( resp_adapter__minion__req__rdy[0] ),
    .minion__resp__en( resp_adapter__minion__resp__en[0] ),
    .minion__resp__msg( resp_adapter__minion__resp__msg[0] ),
    .minion__resp__rdy( resp_adapter__minion__resp__rdy[0] )
  );

  RespAdapter__da25727616f3bfbb resp_adapter__1
  (
    .clk( resp_adapter__clk[1] ),
    .reset( resp_adapter__reset[1] ),
    .master__req__en( resp_adapter__master__req__en[1] ),
    .master__req__msg( resp_adapter__master__req__msg[1] ),
    .master__req__rdy( resp_adapter__master__req__rdy[1] ),
    .master__resp__en( resp_adapter__master__resp__en[1] ),
    .master__resp__msg( resp_adapter__master__resp__msg[1] ),
    .master__resp__rdy( resp_adapter__master__resp__rdy[1] ),
    .minion__req__en( resp_adapter__minion__req__en[1] ),
    .minion__req__msg( resp_adapter__minion__req__msg[1] ),
    .minion__req__rdy( resp_adapter__minion__req__rdy[1] ),
    .minion__resp__en( resp_adapter__minion__resp__en[1] ),
    .minion__resp__msg( resp_adapter__minion__resp__msg[1] ),
    .minion__resp__rdy( resp_adapter__minion__resp__rdy[1] )
  );

  RespAdapter__6260c5f9948e1ac1 resp_adapter__2
  (
    .clk( resp_adapter__clk[2] ),
    .reset( resp_adapter__reset[2] ),
    .master__req__en( resp_adapter__master__req__en[2] ),
    .master__req__msg( resp_adapter__master__req__msg[2] ),
    .master__req__rdy( resp_adapter__master__req__rdy[2] ),
    .master__resp__en( resp_adapter__master__resp__en[2] ),
    .master__resp__msg( resp_adapter__master__resp__msg[2] ),
    .master__resp__rdy( resp_adapter__master__resp__rdy[2] ),
    .minion__req__en( resp_adapter__minion__req__en[2] ),
    .minion__req__msg( resp_adapter__minion__req__msg[2] ),
    .minion__req__rdy( resp_adapter__minion__req__rdy[2] ),
    .minion__resp__en( resp_adapter__minion__resp__en[2] ),
    .minion__resp__msg( resp_adapter__minion__resp__msg[2] ),
    .minion__resp__rdy( resp_adapter__minion__resp__rdy[2] )
  );

  RespAdapter__27cecd8a1c68140b resp_adapter__3
  (
    .clk( resp_adapter__clk[3] ),
    .reset( resp_adapter__reset[3] ),
    .master__req__en( resp_adapter__master__req__en[3] ),
    .master__req__msg( resp_adapter__master__req__msg[3] ),
    .master__req__rdy( resp_adapter__master__req__rdy[3] ),
    .master__resp__en( resp_adapter__master__resp__en[3] ),
    .master__resp__msg( resp_adapter__master__resp__msg[3] ),
    .master__resp__rdy( resp_adapter__master__resp__rdy[3] ),
    .minion__req__en( resp_adapter__minion__req__en[3] ),
    .minion__req__msg( resp_adapter__minion__req__msg[3] ),
    .minion__req__rdy( resp_adapter__minion__req__rdy[3] ),
    .minion__resp__en( resp_adapter__minion__resp__en[3] ),
    .minion__resp__msg( resp_adapter__minion__resp__msg[3] ),
    .minion__resp__rdy( resp_adapter__minion__resp__rdy[3] )
  );

  //-------------------------------------------------------------
  // End of component resp_adapter[0:3]
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component resp_net
  //-------------------------------------------------------------

  logic [0:0] resp_net__clk;
  logic [0:0] resp_net__reset;
  logic [0:0] resp_net__recv__en [0:3];
  mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 resp_net__recv__msg [0:3];
  logic [0:0] resp_net__recv__rdy [0:3];
  logic [0:0] resp_net__send__en [0:16];
  mmxbar_resp_17_CgraLocalMemRespMsg__97a8fdbd88c53709 resp_net__send__msg [0:16];
  logic [0:0] resp_net__send__rdy [0:16];

  XbarRTL__71ad38100e00b17b resp_net
  (
    .clk( resp_net__clk ),
    .reset( resp_net__reset ),
    .recv__en( resp_net__recv__en ),
    .recv__msg( resp_net__recv__msg ),
    .recv__rdy( resp_net__recv__rdy ),
    .send__en( resp_net__send__en ),
    .send__msg( resp_net__send__msg ),
    .send__rdy( resp_net__send__rdy )
  );

  //-------------------------------------------------------------
  // End of component resp_net
  //-------------------------------------------------------------

  assign req_net__clk = clk;
  assign req_net__reset = reset;
  assign resp_net__clk = clk;
  assign resp_net__reset = reset;
  assign req_adapter__clk[0] = clk;
  assign req_adapter__reset[0] = reset;
  assign req_adapter__clk[1] = clk;
  assign req_adapter__reset[1] = reset;
  assign req_adapter__clk[2] = clk;
  assign req_adapter__reset[2] = reset;
  assign req_adapter__clk[3] = clk;
  assign req_adapter__reset[3] = reset;
  assign req_adapter__clk[4] = clk;
  assign req_adapter__reset[4] = reset;
  assign req_adapter__clk[5] = clk;
  assign req_adapter__reset[5] = reset;
  assign req_adapter__clk[6] = clk;
  assign req_adapter__reset[6] = reset;
  assign req_adapter__clk[7] = clk;
  assign req_adapter__reset[7] = reset;
  assign req_adapter__clk[8] = clk;
  assign req_adapter__reset[8] = reset;
  assign req_adapter__clk[9] = clk;
  assign req_adapter__reset[9] = reset;
  assign req_adapter__clk[10] = clk;
  assign req_adapter__reset[10] = reset;
  assign req_adapter__clk[11] = clk;
  assign req_adapter__reset[11] = reset;
  assign req_adapter__clk[12] = clk;
  assign req_adapter__reset[12] = reset;
  assign req_adapter__clk[13] = clk;
  assign req_adapter__reset[13] = reset;
  assign req_adapter__clk[14] = clk;
  assign req_adapter__reset[14] = reset;
  assign req_adapter__clk[15] = clk;
  assign req_adapter__reset[15] = reset;
  assign req_adapter__clk[16] = clk;
  assign req_adapter__reset[16] = reset;
  assign resp_adapter__clk[0] = clk;
  assign resp_adapter__reset[0] = reset;
  assign resp_adapter__clk[1] = clk;
  assign resp_adapter__reset[1] = reset;
  assign resp_adapter__clk[2] = clk;
  assign resp_adapter__reset[2] = reset;
  assign resp_adapter__clk[3] = clk;
  assign resp_adapter__reset[3] = reset;
  assign req_adapter__minion__req__en[0] = minion__req__en[0];
  assign req_adapter__minion__req__msg[0] = minion__req__msg[0];
  assign minion__req__rdy[0] = req_adapter__minion__req__rdy[0];
  assign minion__resp__en[0] = req_adapter__minion__resp__en[0];
  assign minion__resp__msg[0] = req_adapter__minion__resp__msg[0];
  assign req_adapter__minion__resp__rdy[0] = minion__resp__rdy[0];
  assign req_net__recv__en[0] = req_adapter__master__req__en[0];
  assign req_net__recv__msg[0] = req_adapter__master__req__msg[0];
  assign req_adapter__master__req__rdy[0] = req_net__recv__rdy[0];
  assign req_adapter__master__resp__en[0] = resp_net__send__en[0];
  assign req_adapter__master__resp__msg[0] = resp_net__send__msg[0];
  assign resp_net__send__rdy[0] = req_adapter__master__resp__rdy[0];
  assign req_adapter__minion__req__en[1] = minion__req__en[1];
  assign req_adapter__minion__req__msg[1] = minion__req__msg[1];
  assign minion__req__rdy[1] = req_adapter__minion__req__rdy[1];
  assign minion__resp__en[1] = req_adapter__minion__resp__en[1];
  assign minion__resp__msg[1] = req_adapter__minion__resp__msg[1];
  assign req_adapter__minion__resp__rdy[1] = minion__resp__rdy[1];
  assign req_net__recv__en[1] = req_adapter__master__req__en[1];
  assign req_net__recv__msg[1] = req_adapter__master__req__msg[1];
  assign req_adapter__master__req__rdy[1] = req_net__recv__rdy[1];
  assign req_adapter__master__resp__en[1] = resp_net__send__en[1];
  assign req_adapter__master__resp__msg[1] = resp_net__send__msg[1];
  assign resp_net__send__rdy[1] = req_adapter__master__resp__rdy[1];
  assign req_adapter__minion__req__en[2] = minion__req__en[2];
  assign req_adapter__minion__req__msg[2] = minion__req__msg[2];
  assign minion__req__rdy[2] = req_adapter__minion__req__rdy[2];
  assign minion__resp__en[2] = req_adapter__minion__resp__en[2];
  assign minion__resp__msg[2] = req_adapter__minion__resp__msg[2];
  assign req_adapter__minion__resp__rdy[2] = minion__resp__rdy[2];
  assign req_net__recv__en[2] = req_adapter__master__req__en[2];
  assign req_net__recv__msg[2] = req_adapter__master__req__msg[2];
  assign req_adapter__master__req__rdy[2] = req_net__recv__rdy[2];
  assign req_adapter__master__resp__en[2] = resp_net__send__en[2];
  assign req_adapter__master__resp__msg[2] = resp_net__send__msg[2];
  assign resp_net__send__rdy[2] = req_adapter__master__resp__rdy[2];
  assign req_adapter__minion__req__en[3] = minion__req__en[3];
  assign req_adapter__minion__req__msg[3] = minion__req__msg[3];
  assign minion__req__rdy[3] = req_adapter__minion__req__rdy[3];
  assign minion__resp__en[3] = req_adapter__minion__resp__en[3];
  assign minion__resp__msg[3] = req_adapter__minion__resp__msg[3];
  assign req_adapter__minion__resp__rdy[3] = minion__resp__rdy[3];
  assign req_net__recv__en[3] = req_adapter__master__req__en[3];
  assign req_net__recv__msg[3] = req_adapter__master__req__msg[3];
  assign req_adapter__master__req__rdy[3] = req_net__recv__rdy[3];
  assign req_adapter__master__resp__en[3] = resp_net__send__en[3];
  assign req_adapter__master__resp__msg[3] = resp_net__send__msg[3];
  assign resp_net__send__rdy[3] = req_adapter__master__resp__rdy[3];
  assign req_adapter__minion__req__en[4] = minion__req__en[4];
  assign req_adapter__minion__req__msg[4] = minion__req__msg[4];
  assign minion__req__rdy[4] = req_adapter__minion__req__rdy[4];
  assign minion__resp__en[4] = req_adapter__minion__resp__en[4];
  assign minion__resp__msg[4] = req_adapter__minion__resp__msg[4];
  assign req_adapter__minion__resp__rdy[4] = minion__resp__rdy[4];
  assign req_net__recv__en[4] = req_adapter__master__req__en[4];
  assign req_net__recv__msg[4] = req_adapter__master__req__msg[4];
  assign req_adapter__master__req__rdy[4] = req_net__recv__rdy[4];
  assign req_adapter__master__resp__en[4] = resp_net__send__en[4];
  assign req_adapter__master__resp__msg[4] = resp_net__send__msg[4];
  assign resp_net__send__rdy[4] = req_adapter__master__resp__rdy[4];
  assign req_adapter__minion__req__en[5] = minion__req__en[5];
  assign req_adapter__minion__req__msg[5] = minion__req__msg[5];
  assign minion__req__rdy[5] = req_adapter__minion__req__rdy[5];
  assign minion__resp__en[5] = req_adapter__minion__resp__en[5];
  assign minion__resp__msg[5] = req_adapter__minion__resp__msg[5];
  assign req_adapter__minion__resp__rdy[5] = minion__resp__rdy[5];
  assign req_net__recv__en[5] = req_adapter__master__req__en[5];
  assign req_net__recv__msg[5] = req_adapter__master__req__msg[5];
  assign req_adapter__master__req__rdy[5] = req_net__recv__rdy[5];
  assign req_adapter__master__resp__en[5] = resp_net__send__en[5];
  assign req_adapter__master__resp__msg[5] = resp_net__send__msg[5];
  assign resp_net__send__rdy[5] = req_adapter__master__resp__rdy[5];
  assign req_adapter__minion__req__en[6] = minion__req__en[6];
  assign req_adapter__minion__req__msg[6] = minion__req__msg[6];
  assign minion__req__rdy[6] = req_adapter__minion__req__rdy[6];
  assign minion__resp__en[6] = req_adapter__minion__resp__en[6];
  assign minion__resp__msg[6] = req_adapter__minion__resp__msg[6];
  assign req_adapter__minion__resp__rdy[6] = minion__resp__rdy[6];
  assign req_net__recv__en[6] = req_adapter__master__req__en[6];
  assign req_net__recv__msg[6] = req_adapter__master__req__msg[6];
  assign req_adapter__master__req__rdy[6] = req_net__recv__rdy[6];
  assign req_adapter__master__resp__en[6] = resp_net__send__en[6];
  assign req_adapter__master__resp__msg[6] = resp_net__send__msg[6];
  assign resp_net__send__rdy[6] = req_adapter__master__resp__rdy[6];
  assign req_adapter__minion__req__en[7] = minion__req__en[7];
  assign req_adapter__minion__req__msg[7] = minion__req__msg[7];
  assign minion__req__rdy[7] = req_adapter__minion__req__rdy[7];
  assign minion__resp__en[7] = req_adapter__minion__resp__en[7];
  assign minion__resp__msg[7] = req_adapter__minion__resp__msg[7];
  assign req_adapter__minion__resp__rdy[7] = minion__resp__rdy[7];
  assign req_net__recv__en[7] = req_adapter__master__req__en[7];
  assign req_net__recv__msg[7] = req_adapter__master__req__msg[7];
  assign req_adapter__master__req__rdy[7] = req_net__recv__rdy[7];
  assign req_adapter__master__resp__en[7] = resp_net__send__en[7];
  assign req_adapter__master__resp__msg[7] = resp_net__send__msg[7];
  assign resp_net__send__rdy[7] = req_adapter__master__resp__rdy[7];
  assign req_adapter__minion__req__en[8] = minion__req__en[8];
  assign req_adapter__minion__req__msg[8] = minion__req__msg[8];
  assign minion__req__rdy[8] = req_adapter__minion__req__rdy[8];
  assign minion__resp__en[8] = req_adapter__minion__resp__en[8];
  assign minion__resp__msg[8] = req_adapter__minion__resp__msg[8];
  assign req_adapter__minion__resp__rdy[8] = minion__resp__rdy[8];
  assign req_net__recv__en[8] = req_adapter__master__req__en[8];
  assign req_net__recv__msg[8] = req_adapter__master__req__msg[8];
  assign req_adapter__master__req__rdy[8] = req_net__recv__rdy[8];
  assign req_adapter__master__resp__en[8] = resp_net__send__en[8];
  assign req_adapter__master__resp__msg[8] = resp_net__send__msg[8];
  assign resp_net__send__rdy[8] = req_adapter__master__resp__rdy[8];
  assign req_adapter__minion__req__en[9] = minion__req__en[9];
  assign req_adapter__minion__req__msg[9] = minion__req__msg[9];
  assign minion__req__rdy[9] = req_adapter__minion__req__rdy[9];
  assign minion__resp__en[9] = req_adapter__minion__resp__en[9];
  assign minion__resp__msg[9] = req_adapter__minion__resp__msg[9];
  assign req_adapter__minion__resp__rdy[9] = minion__resp__rdy[9];
  assign req_net__recv__en[9] = req_adapter__master__req__en[9];
  assign req_net__recv__msg[9] = req_adapter__master__req__msg[9];
  assign req_adapter__master__req__rdy[9] = req_net__recv__rdy[9];
  assign req_adapter__master__resp__en[9] = resp_net__send__en[9];
  assign req_adapter__master__resp__msg[9] = resp_net__send__msg[9];
  assign resp_net__send__rdy[9] = req_adapter__master__resp__rdy[9];
  assign req_adapter__minion__req__en[10] = minion__req__en[10];
  assign req_adapter__minion__req__msg[10] = minion__req__msg[10];
  assign minion__req__rdy[10] = req_adapter__minion__req__rdy[10];
  assign minion__resp__en[10] = req_adapter__minion__resp__en[10];
  assign minion__resp__msg[10] = req_adapter__minion__resp__msg[10];
  assign req_adapter__minion__resp__rdy[10] = minion__resp__rdy[10];
  assign req_net__recv__en[10] = req_adapter__master__req__en[10];
  assign req_net__recv__msg[10] = req_adapter__master__req__msg[10];
  assign req_adapter__master__req__rdy[10] = req_net__recv__rdy[10];
  assign req_adapter__master__resp__en[10] = resp_net__send__en[10];
  assign req_adapter__master__resp__msg[10] = resp_net__send__msg[10];
  assign resp_net__send__rdy[10] = req_adapter__master__resp__rdy[10];
  assign req_adapter__minion__req__en[11] = minion__req__en[11];
  assign req_adapter__minion__req__msg[11] = minion__req__msg[11];
  assign minion__req__rdy[11] = req_adapter__minion__req__rdy[11];
  assign minion__resp__en[11] = req_adapter__minion__resp__en[11];
  assign minion__resp__msg[11] = req_adapter__minion__resp__msg[11];
  assign req_adapter__minion__resp__rdy[11] = minion__resp__rdy[11];
  assign req_net__recv__en[11] = req_adapter__master__req__en[11];
  assign req_net__recv__msg[11] = req_adapter__master__req__msg[11];
  assign req_adapter__master__req__rdy[11] = req_net__recv__rdy[11];
  assign req_adapter__master__resp__en[11] = resp_net__send__en[11];
  assign req_adapter__master__resp__msg[11] = resp_net__send__msg[11];
  assign resp_net__send__rdy[11] = req_adapter__master__resp__rdy[11];
  assign req_adapter__minion__req__en[12] = minion__req__en[12];
  assign req_adapter__minion__req__msg[12] = minion__req__msg[12];
  assign minion__req__rdy[12] = req_adapter__minion__req__rdy[12];
  assign minion__resp__en[12] = req_adapter__minion__resp__en[12];
  assign minion__resp__msg[12] = req_adapter__minion__resp__msg[12];
  assign req_adapter__minion__resp__rdy[12] = minion__resp__rdy[12];
  assign req_net__recv__en[12] = req_adapter__master__req__en[12];
  assign req_net__recv__msg[12] = req_adapter__master__req__msg[12];
  assign req_adapter__master__req__rdy[12] = req_net__recv__rdy[12];
  assign req_adapter__master__resp__en[12] = resp_net__send__en[12];
  assign req_adapter__master__resp__msg[12] = resp_net__send__msg[12];
  assign resp_net__send__rdy[12] = req_adapter__master__resp__rdy[12];
  assign req_adapter__minion__req__en[13] = minion__req__en[13];
  assign req_adapter__minion__req__msg[13] = minion__req__msg[13];
  assign minion__req__rdy[13] = req_adapter__minion__req__rdy[13];
  assign minion__resp__en[13] = req_adapter__minion__resp__en[13];
  assign minion__resp__msg[13] = req_adapter__minion__resp__msg[13];
  assign req_adapter__minion__resp__rdy[13] = minion__resp__rdy[13];
  assign req_net__recv__en[13] = req_adapter__master__req__en[13];
  assign req_net__recv__msg[13] = req_adapter__master__req__msg[13];
  assign req_adapter__master__req__rdy[13] = req_net__recv__rdy[13];
  assign req_adapter__master__resp__en[13] = resp_net__send__en[13];
  assign req_adapter__master__resp__msg[13] = resp_net__send__msg[13];
  assign resp_net__send__rdy[13] = req_adapter__master__resp__rdy[13];
  assign req_adapter__minion__req__en[14] = minion__req__en[14];
  assign req_adapter__minion__req__msg[14] = minion__req__msg[14];
  assign minion__req__rdy[14] = req_adapter__minion__req__rdy[14];
  assign minion__resp__en[14] = req_adapter__minion__resp__en[14];
  assign minion__resp__msg[14] = req_adapter__minion__resp__msg[14];
  assign req_adapter__minion__resp__rdy[14] = minion__resp__rdy[14];
  assign req_net__recv__en[14] = req_adapter__master__req__en[14];
  assign req_net__recv__msg[14] = req_adapter__master__req__msg[14];
  assign req_adapter__master__req__rdy[14] = req_net__recv__rdy[14];
  assign req_adapter__master__resp__en[14] = resp_net__send__en[14];
  assign req_adapter__master__resp__msg[14] = resp_net__send__msg[14];
  assign resp_net__send__rdy[14] = req_adapter__master__resp__rdy[14];
  assign req_adapter__minion__req__en[15] = minion__req__en[15];
  assign req_adapter__minion__req__msg[15] = minion__req__msg[15];
  assign minion__req__rdy[15] = req_adapter__minion__req__rdy[15];
  assign minion__resp__en[15] = req_adapter__minion__resp__en[15];
  assign minion__resp__msg[15] = req_adapter__minion__resp__msg[15];
  assign req_adapter__minion__resp__rdy[15] = minion__resp__rdy[15];
  assign req_net__recv__en[15] = req_adapter__master__req__en[15];
  assign req_net__recv__msg[15] = req_adapter__master__req__msg[15];
  assign req_adapter__master__req__rdy[15] = req_net__recv__rdy[15];
  assign req_adapter__master__resp__en[15] = resp_net__send__en[15];
  assign req_adapter__master__resp__msg[15] = resp_net__send__msg[15];
  assign resp_net__send__rdy[15] = req_adapter__master__resp__rdy[15];
  assign req_adapter__minion__req__en[16] = minion__req__en[16];
  assign req_adapter__minion__req__msg[16] = minion__req__msg[16];
  assign minion__req__rdy[16] = req_adapter__minion__req__rdy[16];
  assign minion__resp__en[16] = req_adapter__minion__resp__en[16];
  assign minion__resp__msg[16] = req_adapter__minion__resp__msg[16];
  assign req_adapter__minion__resp__rdy[16] = minion__resp__rdy[16];
  assign req_net__recv__en[16] = req_adapter__master__req__en[16];
  assign req_net__recv__msg[16] = req_adapter__master__req__msg[16];
  assign req_adapter__master__req__rdy[16] = req_net__recv__rdy[16];
  assign req_adapter__master__resp__en[16] = resp_net__send__en[16];
  assign req_adapter__master__resp__msg[16] = resp_net__send__msg[16];
  assign resp_net__send__rdy[16] = req_adapter__master__resp__rdy[16];
  assign resp_adapter__minion__req__en[0] = req_net__send__en[0];
  assign resp_adapter__minion__req__msg[0] = req_net__send__msg[0];
  assign req_net__send__rdy[0] = resp_adapter__minion__req__rdy[0];
  assign resp_net__recv__en[0] = resp_adapter__minion__resp__en[0];
  assign resp_net__recv__msg[0] = resp_adapter__minion__resp__msg[0];
  assign resp_adapter__minion__resp__rdy[0] = resp_net__recv__rdy[0];
  assign master__req__en[0] = resp_adapter__master__req__en[0];
  assign master__req__msg[0] = resp_adapter__master__req__msg[0];
  assign resp_adapter__master__req__rdy[0] = master__req__rdy[0];
  assign resp_adapter__master__resp__en[0] = master__resp__en[0];
  assign resp_adapter__master__resp__msg[0] = master__resp__msg[0];
  assign master__resp__rdy[0] = resp_adapter__master__resp__rdy[0];
  assign resp_adapter__minion__req__en[1] = req_net__send__en[1];
  assign resp_adapter__minion__req__msg[1] = req_net__send__msg[1];
  assign req_net__send__rdy[1] = resp_adapter__minion__req__rdy[1];
  assign resp_net__recv__en[1] = resp_adapter__minion__resp__en[1];
  assign resp_net__recv__msg[1] = resp_adapter__minion__resp__msg[1];
  assign resp_adapter__minion__resp__rdy[1] = resp_net__recv__rdy[1];
  assign master__req__en[1] = resp_adapter__master__req__en[1];
  assign master__req__msg[1] = resp_adapter__master__req__msg[1];
  assign resp_adapter__master__req__rdy[1] = master__req__rdy[1];
  assign resp_adapter__master__resp__en[1] = master__resp__en[1];
  assign resp_adapter__master__resp__msg[1] = master__resp__msg[1];
  assign master__resp__rdy[1] = resp_adapter__master__resp__rdy[1];
  assign resp_adapter__minion__req__en[2] = req_net__send__en[2];
  assign resp_adapter__minion__req__msg[2] = req_net__send__msg[2];
  assign req_net__send__rdy[2] = resp_adapter__minion__req__rdy[2];
  assign resp_net__recv__en[2] = resp_adapter__minion__resp__en[2];
  assign resp_net__recv__msg[2] = resp_adapter__minion__resp__msg[2];
  assign resp_adapter__minion__resp__rdy[2] = resp_net__recv__rdy[2];
  assign master__req__en[2] = resp_adapter__master__req__en[2];
  assign master__req__msg[2] = resp_adapter__master__req__msg[2];
  assign resp_adapter__master__req__rdy[2] = master__req__rdy[2];
  assign resp_adapter__master__resp__en[2] = master__resp__en[2];
  assign resp_adapter__master__resp__msg[2] = master__resp__msg[2];
  assign master__resp__rdy[2] = resp_adapter__master__resp__rdy[2];
  assign resp_adapter__minion__req__en[3] = req_net__send__en[3];
  assign resp_adapter__minion__req__msg[3] = req_net__send__msg[3];
  assign req_net__send__rdy[3] = resp_adapter__minion__req__rdy[3];
  assign resp_net__recv__en[3] = resp_adapter__minion__resp__en[3];
  assign resp_net__recv__msg[3] = resp_adapter__minion__resp__msg[3];
  assign resp_adapter__minion__resp__rdy[3] = resp_net__recv__rdy[3];
  assign master__req__en[3] = resp_adapter__master__req__en[3];
  assign master__req__msg[3] = resp_adapter__master__req__msg[3];
  assign resp_adapter__master__req__rdy[3] = master__req__rdy[3];
  assign resp_adapter__master__resp__en[3] = master__resp__en[3];
  assign resp_adapter__master__resp__msg[3] = master__resp__msg[3];
  assign master__resp__rdy[3] = resp_adapter__master__resp__rdy[3];

endmodule


// PyMTL Component CGRAXcelDpath Definition
// Full name: CGRAXcelDpath__xcel_params_CGRAParams: base_addr_bound:16384, base_addr_register:0, base_addr_scratchpad:256, cfg_nwords:1, cfg_type:<class 'pymtl3.datatypes.bits_import.Bits32'>, data_width:32, enable_FP:True, me_cfg_type:<class 'types.MEConfigMsg_8x8'>, mul_cycles:0, ncols:8, nrows:8, nspads:4, num_remote_masters:4, pe_cfg_type:<class 'types.PEConfigMsg_8x8'>, remote_master_addr_width:28, remote_master_data_width_factor:1, rf_nregs:2, spad_data_width:32, spad_mask_size:0, spad_num_entries:1024, trace_verbosity:0
// At /work/global/pp482/cgra/src/cgra/CGRAXcelDpath.py

module CGRAXcelDpath__e7b85fc84228c577
(
  input  logic [0:0] cgra_xminion_req_en ,
  output logic [0:0] cgra_xminion_req_rdy ,
  output logic [0:0] cgra_xminion_resp_en ,
  input  logic [0:0] cgra_xminion_resp_rdy ,
  input  logic [0:0] clk ,
  output logic [0:0] is_CSR_transaction ,
  output logic [0:0] is_calc_done ,
  output logic [0:0] is_go_transaction ,
  output logic [0:0] is_scratchpad_transaction ,
  input  logic [0:0] is_staging ,
  output logic [0:0] is_write_transaction ,
  input  logic [0:0] is_xminion_resp_from_scratchpad ,
  input  logic [0:0] reset ,
  input  logic [0:0] stage_val ,
  input  logic [0:0] xbar_xminion_req_en ,
  output logic [0:0] xbar_xminion_req_rdy ,
  output logic [0:0] xbar_xminion_resp_en ,
  input  logic [0:0] xbar_xminion_resp_rdy ,
  input  CgraXcelReqMsg__wen_1__addr_14__data_32 xminion_req_msg ,
  output CgraXcelRespMsg__wen_1__addr_14__data_32 xminion_resp_msg ,
  output logic [0:0] mem_master__req__en [0:3],
  output CgraRemoteMemReqMsg__wen_1__addr_28__data_32 mem_master__req__msg [0:3],
  input logic [0:0] mem_master__req__rdy [0:3],
  input logic [0:0] mem_master__resp__en [0:3],
  input CgraRemoteMemRespMsg__wen_1__addr_28__data_32 mem_master__resp__msg [0:3],
  output logic [0:0] mem_master__resp__rdy [0:3]
);
  //-------------------------------------------------------------
  // Component cgra
  //-------------------------------------------------------------

  logic [0:0] cgra__clk;
  logic [0:0] cgra__is_calc_done;
  logic [0:0] cgra__reset;
  logic [0:0] cgra__spad_masters__req__en [0:15];
  CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 cgra__spad_masters__req__msg [0:15];
  logic [0:0] cgra__spad_masters__req__rdy [0:15];
  logic [0:0] cgra__spad_masters__resp__en [0:15];
  CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 cgra__spad_masters__resp__msg [0:15];
  logic [0:0] cgra__spad_masters__resp__rdy [0:15];
  logic [0:0] cgra__xcel_minion__req__en;
  CgraXcelReqMsg__wen_1__addr_14__data_32 cgra__xcel_minion__req__msg;
  logic [0:0] cgra__xcel_minion__req__rdy;
  logic [0:0] cgra__xcel_minion__resp__en;
  CgraXcelRespMsg__wen_1__addr_14__data_32 cgra__xcel_minion__resp__msg;
  logic [0:0] cgra__xcel_minion__resp__rdy;

  CGRACore__e7b85fc84228c577 cgra
  (
    .clk( cgra__clk ),
    .is_calc_done( cgra__is_calc_done ),
    .reset( cgra__reset ),
    .spad_masters__req__en( cgra__spad_masters__req__en ),
    .spad_masters__req__msg( cgra__spad_masters__req__msg ),
    .spad_masters__req__rdy( cgra__spad_masters__req__rdy ),
    .spad_masters__resp__en( cgra__spad_masters__resp__en ),
    .spad_masters__resp__msg( cgra__spad_masters__resp__msg ),
    .spad_masters__resp__rdy( cgra__spad_masters__resp__rdy ),
    .xcel_minion__req__en( cgra__xcel_minion__req__en ),
    .xcel_minion__req__msg( cgra__xcel_minion__req__msg ),
    .xcel_minion__req__rdy( cgra__xcel_minion__req__rdy ),
    .xcel_minion__resp__en( cgra__xcel_minion__resp__en ),
    .xcel_minion__resp__msg( cgra__xcel_minion__resp__msg ),
    .xcel_minion__resp__rdy( cgra__xcel_minion__resp__rdy )
  );

  //-------------------------------------------------------------
  // End of component cgra
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component scratchpad
  //-------------------------------------------------------------

  logic [0:0] scratchpad__clk;
  logic [0:0] scratchpad__reset;
  logic [0:0] scratchpad__minion__req__en [0:3];
  CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 scratchpad__minion__req__msg [0:3];
  logic [0:0] scratchpad__minion__req__rdy [0:3];
  logic [0:0] scratchpad__minion__resp__en [0:3];
  CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 scratchpad__minion__resp__msg [0:3];
  logic [0:0] scratchpad__minion__resp__rdy [0:3];

  Scratchpad__c6176239b846ec0a scratchpad
  (
    .clk( scratchpad__clk ),
    .reset( scratchpad__reset ),
    .minion__req__en( scratchpad__minion__req__en ),
    .minion__req__msg( scratchpad__minion__req__msg ),
    .minion__req__rdy( scratchpad__minion__req__rdy ),
    .minion__resp__en( scratchpad__minion__resp__en ),
    .minion__resp__msg( scratchpad__minion__resp__msg ),
    .minion__resp__rdy( scratchpad__minion__resp__rdy )
  );

  //-------------------------------------------------------------
  // End of component scratchpad
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component xbar
  //-------------------------------------------------------------

  logic [0:0] xbar__clk;
  logic [0:0] xbar__reset;
  logic [0:0] xbar__master__req__en [0:3];
  CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 xbar__master__req__msg [0:3];
  logic [0:0] xbar__master__req__rdy [0:3];
  logic [0:0] xbar__master__resp__en [0:3];
  CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 xbar__master__resp__msg [0:3];
  logic [0:0] xbar__master__resp__rdy [0:3];
  logic [0:0] xbar__minion__req__en [0:16];
  CgraLocalMemReqMsg__wen_1__addr_14__data_32__opaque_7 xbar__minion__req__msg [0:16];
  logic [0:0] xbar__minion__req__rdy [0:16];
  logic [0:0] xbar__minion__resp__en [0:16];
  CgraLocalMemRespMsg__wen_1__addr_14__data_32__opaque_7 xbar__minion__resp__msg [0:16];
  logic [0:0] xbar__minion__resp__rdy [0:16];

  MasterMinionXbarGeneric__748581449e74f4d5 xbar
  (
    .clk( xbar__clk ),
    .reset( xbar__reset ),
    .master__req__en( xbar__master__req__en ),
    .master__req__msg( xbar__master__req__msg ),
    .master__req__rdy( xbar__master__req__rdy ),
    .master__resp__en( xbar__master__resp__en ),
    .master__resp__msg( xbar__master__resp__msg ),
    .master__resp__rdy( xbar__master__resp__rdy ),
    .minion__req__en( xbar__minion__req__en ),
    .minion__req__msg( xbar__minion__req__msg ),
    .minion__req__rdy( xbar__minion__req__rdy ),
    .minion__resp__en( xbar__minion__resp__en ),
    .minion__resp__msg( xbar__minion__resp__msg ),
    .minion__resp__rdy( xbar__minion__resp__rdy )
  );

  //-------------------------------------------------------------
  // End of component xbar
  //-------------------------------------------------------------

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/CGRAXcelDpath.py:165
  // @update
  // def cgra_xcel_xminion_resp_msg():
  //   if s.is_xminion_resp_from_scratchpad:
  //     s.xminion_resp_msg.wen  @= s.xbar.minion[s.xminion_idx].resp.msg.wen
  //     s.xminion_resp_msg.addr @= s.xbar.minion[s.xminion_idx].resp.msg.addr
  //     s.xminion_resp_msg.data @= s.xbar.minion[s.xminion_idx].resp.msg.data
  //   else:
  //     s.xminion_resp_msg @= s.cgra.xcel_minion.resp.msg
  
  always_comb begin : cgra_xcel_xminion_resp_msg
    if ( is_xminion_resp_from_scratchpad ) begin
      xminion_resp_msg.wen = xbar__minion__resp__msg[5'd16].wen;
      xminion_resp_msg.addr = xbar__minion__resp__msg[5'd16].addr;
      xminion_resp_msg.data = xbar__minion__resp__msg[5'd16].data;
    end
    else
      xminion_resp_msg = cgra__xcel_minion__resp__msg;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/cgra/CGRAXcelDpath.py:180
  // @update
  // def gen_is_transactions():
  //   s.is_go_transaction         @= s.xminion_req_msg.wen & \
  //                                ( s.xminion_req_msg.addr == 0 ) & \
  //                                ( s.xminion_req_msg.data != 0 )
  //   s.is_CSR_transaction        @= s.xminion_req_msg.addr < p.base_addr_scratchpad
  //   s.is_scratchpad_transaction @= ( s.xminion_req_msg.addr >= p.base_addr_scratchpad ) & \
  //                                  ( zext( s.xminion_req_msg.addr, addr_width_plus_one ) <  p.base_addr_bound )
  //   s.is_write_transaction      @= s.xminion_req_msg.wen
  //   s.is_calc_done              @= s.cgra.is_calc_done
  
  always_comb begin : gen_is_transactions
    is_go_transaction = ( xminion_req_msg.wen & ( xminion_req_msg.addr == 14'd0 ) ) & ( xminion_req_msg.data != 32'd0 );
    is_CSR_transaction = xminion_req_msg.addr < 14'd256;
    is_scratchpad_transaction = ( xminion_req_msg.addr >= 14'd256 ) & ( { { 1 { 1'b0 } }, xminion_req_msg.addr } < 15'd16384 );
    is_write_transaction = xminion_req_msg.wen;
    is_calc_done = cgra__is_calc_done;
  end

  assign cgra__clk = clk;
  assign cgra__reset = reset;
  assign xbar__clk = clk;
  assign xbar__reset = reset;
  assign scratchpad__clk = clk;
  assign scratchpad__reset = reset;
  assign mem_master__req__en[0] = 1'd0;
  assign mem_master__req__msg[0] = { 1'd0, 28'd0, 32'd0 };
  assign mem_master__resp__rdy[0] = 1'd1;
  assign mem_master__req__en[1] = 1'd0;
  assign mem_master__req__msg[1] = { 1'd0, 28'd0, 32'd0 };
  assign mem_master__resp__rdy[1] = 1'd1;
  assign mem_master__req__en[2] = 1'd0;
  assign mem_master__req__msg[2] = { 1'd0, 28'd0, 32'd0 };
  assign mem_master__resp__rdy[2] = 1'd1;
  assign mem_master__req__en[3] = 1'd0;
  assign mem_master__req__msg[3] = { 1'd0, 28'd0, 32'd0 };
  assign mem_master__resp__rdy[3] = 1'd1;
  assign xbar__minion__req__en[0] = cgra__spad_masters__req__en[0];
  assign xbar__minion__req__msg[0] = cgra__spad_masters__req__msg[0];
  assign cgra__spad_masters__req__rdy[0] = xbar__minion__req__rdy[0];
  assign cgra__spad_masters__resp__en[0] = xbar__minion__resp__en[0];
  assign cgra__spad_masters__resp__msg[0] = xbar__minion__resp__msg[0];
  assign xbar__minion__resp__rdy[0] = cgra__spad_masters__resp__rdy[0];
  assign xbar__minion__req__en[1] = cgra__spad_masters__req__en[1];
  assign xbar__minion__req__msg[1] = cgra__spad_masters__req__msg[1];
  assign cgra__spad_masters__req__rdy[1] = xbar__minion__req__rdy[1];
  assign cgra__spad_masters__resp__en[1] = xbar__minion__resp__en[1];
  assign cgra__spad_masters__resp__msg[1] = xbar__minion__resp__msg[1];
  assign xbar__minion__resp__rdy[1] = cgra__spad_masters__resp__rdy[1];
  assign xbar__minion__req__en[2] = cgra__spad_masters__req__en[2];
  assign xbar__minion__req__msg[2] = cgra__spad_masters__req__msg[2];
  assign cgra__spad_masters__req__rdy[2] = xbar__minion__req__rdy[2];
  assign cgra__spad_masters__resp__en[2] = xbar__minion__resp__en[2];
  assign cgra__spad_masters__resp__msg[2] = xbar__minion__resp__msg[2];
  assign xbar__minion__resp__rdy[2] = cgra__spad_masters__resp__rdy[2];
  assign xbar__minion__req__en[3] = cgra__spad_masters__req__en[3];
  assign xbar__minion__req__msg[3] = cgra__spad_masters__req__msg[3];
  assign cgra__spad_masters__req__rdy[3] = xbar__minion__req__rdy[3];
  assign cgra__spad_masters__resp__en[3] = xbar__minion__resp__en[3];
  assign cgra__spad_masters__resp__msg[3] = xbar__minion__resp__msg[3];
  assign xbar__minion__resp__rdy[3] = cgra__spad_masters__resp__rdy[3];
  assign xbar__minion__req__en[4] = cgra__spad_masters__req__en[4];
  assign xbar__minion__req__msg[4] = cgra__spad_masters__req__msg[4];
  assign cgra__spad_masters__req__rdy[4] = xbar__minion__req__rdy[4];
  assign cgra__spad_masters__resp__en[4] = xbar__minion__resp__en[4];
  assign cgra__spad_masters__resp__msg[4] = xbar__minion__resp__msg[4];
  assign xbar__minion__resp__rdy[4] = cgra__spad_masters__resp__rdy[4];
  assign xbar__minion__req__en[5] = cgra__spad_masters__req__en[5];
  assign xbar__minion__req__msg[5] = cgra__spad_masters__req__msg[5];
  assign cgra__spad_masters__req__rdy[5] = xbar__minion__req__rdy[5];
  assign cgra__spad_masters__resp__en[5] = xbar__minion__resp__en[5];
  assign cgra__spad_masters__resp__msg[5] = xbar__minion__resp__msg[5];
  assign xbar__minion__resp__rdy[5] = cgra__spad_masters__resp__rdy[5];
  assign xbar__minion__req__en[6] = cgra__spad_masters__req__en[6];
  assign xbar__minion__req__msg[6] = cgra__spad_masters__req__msg[6];
  assign cgra__spad_masters__req__rdy[6] = xbar__minion__req__rdy[6];
  assign cgra__spad_masters__resp__en[6] = xbar__minion__resp__en[6];
  assign cgra__spad_masters__resp__msg[6] = xbar__minion__resp__msg[6];
  assign xbar__minion__resp__rdy[6] = cgra__spad_masters__resp__rdy[6];
  assign xbar__minion__req__en[7] = cgra__spad_masters__req__en[7];
  assign xbar__minion__req__msg[7] = cgra__spad_masters__req__msg[7];
  assign cgra__spad_masters__req__rdy[7] = xbar__minion__req__rdy[7];
  assign cgra__spad_masters__resp__en[7] = xbar__minion__resp__en[7];
  assign cgra__spad_masters__resp__msg[7] = xbar__minion__resp__msg[7];
  assign xbar__minion__resp__rdy[7] = cgra__spad_masters__resp__rdy[7];
  assign xbar__minion__req__en[8] = cgra__spad_masters__req__en[8];
  assign xbar__minion__req__msg[8] = cgra__spad_masters__req__msg[8];
  assign cgra__spad_masters__req__rdy[8] = xbar__minion__req__rdy[8];
  assign cgra__spad_masters__resp__en[8] = xbar__minion__resp__en[8];
  assign cgra__spad_masters__resp__msg[8] = xbar__minion__resp__msg[8];
  assign xbar__minion__resp__rdy[8] = cgra__spad_masters__resp__rdy[8];
  assign xbar__minion__req__en[9] = cgra__spad_masters__req__en[9];
  assign xbar__minion__req__msg[9] = cgra__spad_masters__req__msg[9];
  assign cgra__spad_masters__req__rdy[9] = xbar__minion__req__rdy[9];
  assign cgra__spad_masters__resp__en[9] = xbar__minion__resp__en[9];
  assign cgra__spad_masters__resp__msg[9] = xbar__minion__resp__msg[9];
  assign xbar__minion__resp__rdy[9] = cgra__spad_masters__resp__rdy[9];
  assign xbar__minion__req__en[10] = cgra__spad_masters__req__en[10];
  assign xbar__minion__req__msg[10] = cgra__spad_masters__req__msg[10];
  assign cgra__spad_masters__req__rdy[10] = xbar__minion__req__rdy[10];
  assign cgra__spad_masters__resp__en[10] = xbar__minion__resp__en[10];
  assign cgra__spad_masters__resp__msg[10] = xbar__minion__resp__msg[10];
  assign xbar__minion__resp__rdy[10] = cgra__spad_masters__resp__rdy[10];
  assign xbar__minion__req__en[11] = cgra__spad_masters__req__en[11];
  assign xbar__minion__req__msg[11] = cgra__spad_masters__req__msg[11];
  assign cgra__spad_masters__req__rdy[11] = xbar__minion__req__rdy[11];
  assign cgra__spad_masters__resp__en[11] = xbar__minion__resp__en[11];
  assign cgra__spad_masters__resp__msg[11] = xbar__minion__resp__msg[11];
  assign xbar__minion__resp__rdy[11] = cgra__spad_masters__resp__rdy[11];
  assign xbar__minion__req__en[12] = cgra__spad_masters__req__en[12];
  assign xbar__minion__req__msg[12] = cgra__spad_masters__req__msg[12];
  assign cgra__spad_masters__req__rdy[12] = xbar__minion__req__rdy[12];
  assign cgra__spad_masters__resp__en[12] = xbar__minion__resp__en[12];
  assign cgra__spad_masters__resp__msg[12] = xbar__minion__resp__msg[12];
  assign xbar__minion__resp__rdy[12] = cgra__spad_masters__resp__rdy[12];
  assign xbar__minion__req__en[13] = cgra__spad_masters__req__en[13];
  assign xbar__minion__req__msg[13] = cgra__spad_masters__req__msg[13];
  assign cgra__spad_masters__req__rdy[13] = xbar__minion__req__rdy[13];
  assign cgra__spad_masters__resp__en[13] = xbar__minion__resp__en[13];
  assign cgra__spad_masters__resp__msg[13] = xbar__minion__resp__msg[13];
  assign xbar__minion__resp__rdy[13] = cgra__spad_masters__resp__rdy[13];
  assign xbar__minion__req__en[14] = cgra__spad_masters__req__en[14];
  assign xbar__minion__req__msg[14] = cgra__spad_masters__req__msg[14];
  assign cgra__spad_masters__req__rdy[14] = xbar__minion__req__rdy[14];
  assign cgra__spad_masters__resp__en[14] = xbar__minion__resp__en[14];
  assign cgra__spad_masters__resp__msg[14] = xbar__minion__resp__msg[14];
  assign xbar__minion__resp__rdy[14] = cgra__spad_masters__resp__rdy[14];
  assign xbar__minion__req__en[15] = cgra__spad_masters__req__en[15];
  assign xbar__minion__req__msg[15] = cgra__spad_masters__req__msg[15];
  assign cgra__spad_masters__req__rdy[15] = xbar__minion__req__rdy[15];
  assign cgra__spad_masters__resp__en[15] = xbar__minion__resp__en[15];
  assign cgra__spad_masters__resp__msg[15] = xbar__minion__resp__msg[15];
  assign xbar__minion__resp__rdy[15] = cgra__spad_masters__resp__rdy[15];
  assign xbar__minion__req__en[16] = xbar_xminion_req_en;
  assign xbar_xminion_req_rdy = xbar__minion__req__rdy[16];
  assign xbar_xminion_resp_en = xbar__minion__resp__en[16];
  assign xbar__minion__resp__rdy[16] = xbar_xminion_resp_rdy;
  assign xbar__minion__req__msg[16].wen = xminion_req_msg.wen;
  assign xbar__minion__req__msg[16].addr = xminion_req_msg.addr;
  assign xbar__minion__req__msg[16].data = xminion_req_msg.data;
  assign scratchpad__minion__req__en[0] = xbar__master__req__en[0];
  assign scratchpad__minion__req__msg[0] = xbar__master__req__msg[0];
  assign xbar__master__req__rdy[0] = scratchpad__minion__req__rdy[0];
  assign xbar__master__resp__en[0] = scratchpad__minion__resp__en[0];
  assign xbar__master__resp__msg[0] = scratchpad__minion__resp__msg[0];
  assign scratchpad__minion__resp__rdy[0] = xbar__master__resp__rdy[0];
  assign scratchpad__minion__req__en[1] = xbar__master__req__en[1];
  assign scratchpad__minion__req__msg[1] = xbar__master__req__msg[1];
  assign xbar__master__req__rdy[1] = scratchpad__minion__req__rdy[1];
  assign xbar__master__resp__en[1] = scratchpad__minion__resp__en[1];
  assign xbar__master__resp__msg[1] = scratchpad__minion__resp__msg[1];
  assign scratchpad__minion__resp__rdy[1] = xbar__master__resp__rdy[1];
  assign scratchpad__minion__req__en[2] = xbar__master__req__en[2];
  assign scratchpad__minion__req__msg[2] = xbar__master__req__msg[2];
  assign xbar__master__req__rdy[2] = scratchpad__minion__req__rdy[2];
  assign xbar__master__resp__en[2] = scratchpad__minion__resp__en[2];
  assign xbar__master__resp__msg[2] = scratchpad__minion__resp__msg[2];
  assign scratchpad__minion__resp__rdy[2] = xbar__master__resp__rdy[2];
  assign scratchpad__minion__req__en[3] = xbar__master__req__en[3];
  assign scratchpad__minion__req__msg[3] = xbar__master__req__msg[3];
  assign xbar__master__req__rdy[3] = scratchpad__minion__req__rdy[3];
  assign xbar__master__resp__en[3] = scratchpad__minion__resp__en[3];
  assign xbar__master__resp__msg[3] = scratchpad__minion__resp__msg[3];
  assign scratchpad__minion__resp__rdy[3] = xbar__master__resp__rdy[3];
  assign cgra__xcel_minion__req__en = cgra_xminion_req_en;
  assign cgra_xminion_req_rdy = cgra__xcel_minion__req__rdy;
  assign cgra_xminion_resp_en = cgra__xcel_minion__resp__en;
  assign cgra__xcel_minion__resp__rdy = cgra_xminion_resp_rdy;
  assign cgra__xcel_minion__req__msg = xminion_req_msg;

endmodule


// PyMTL Component CGRAXcel Definition
// Full name: CGRAXcel__xcel_params_CGRAParams: base_addr_bound:16384, base_addr_register:0, base_addr_scratchpad:256, cfg_nwords:1, cfg_type:<class 'pymtl3.datatypes.bits_import.Bits32'>, data_width:32, enable_FP:True, me_cfg_type:<class 'types.MEConfigMsg_8x8'>, mul_cycles:0, ncols:8, nrows:8, nspads:4, num_remote_masters:4, pe_cfg_type:<class 'types.PEConfigMsg_8x8'>, remote_master_addr_width:28, remote_master_data_width_factor:1, rf_nregs:2, spad_data_width:32, spad_mask_size:0, spad_num_entries:1024, trace_verbosity:0
// At /work/global/pp482/cgra/src/cgra/CGRAXcel.py

module CGRAXcel__e7b85fc84228c577
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  output logic [0:0] mem_master__req__en [0:3],
  output CgraRemoteMemReqMsg__wen_1__addr_28__data_32 mem_master__req__msg [0:3],
  input logic [0:0] mem_master__req__rdy [0:3],
  input logic [0:0] mem_master__resp__en [0:3],
  input CgraRemoteMemRespMsg__wen_1__addr_28__data_32 mem_master__resp__msg [0:3],
  output logic [0:0] mem_master__resp__rdy [0:3],
  input logic [0:0] xcel_minion__req__en ,
  input CgraXcelReqMsg__wen_1__addr_14__data_32 xcel_minion__req__msg ,
  output logic [0:0] xcel_minion__req__rdy ,
  output logic [0:0] xcel_minion__resp__en ,
  output CgraXcelRespMsg__wen_1__addr_14__data_32 xcel_minion__resp__msg ,
  input logic [0:0] xcel_minion__resp__rdy 
);
  //-------------------------------------------------------------
  // Component ctrl
  //-------------------------------------------------------------

  logic [0:0] ctrl__cgra_xminion_req_en;
  logic [0:0] ctrl__cgra_xminion_req_rdy;
  logic [0:0] ctrl__cgra_xminion_resp_en;
  logic [0:0] ctrl__cgra_xminion_resp_rdy;
  logic [0:0] ctrl__clk;
  logic [0:0] ctrl__is_CSR_transaction;
  logic [0:0] ctrl__is_calc_done;
  logic [0:0] ctrl__is_go_transaction;
  logic [0:0] ctrl__is_scratchpad_transaction;
  logic [0:0] ctrl__is_staging;
  logic [0:0] ctrl__is_write_transaction;
  logic [0:0] ctrl__is_xminion_resp_from_scratchpad;
  logic [0:0] ctrl__mmaster_req_en;
  logic [0:0] ctrl__mmaster_req_rdy;
  logic [0:0] ctrl__mmaster_resp_en;
  logic [0:0] ctrl__mmaster_resp_rdy;
  logic [0:0] ctrl__reset;
  logic [0:0] ctrl__stage_val;
  logic [0:0] ctrl__xbar_xminion_req_en;
  logic [0:0] ctrl__xbar_xminion_req_rdy;
  logic [0:0] ctrl__xbar_xminion_resp_en;
  logic [0:0] ctrl__xbar_xminion_resp_rdy;
  logic [0:0] ctrl__xminion_req_en;
  logic [0:0] ctrl__xminion_req_rdy;
  logic [0:0] ctrl__xminion_resp_en;
  logic [0:0] ctrl__xminion_resp_rdy;

  CGRAXcelCtrl__e7b85fc84228c577 ctrl
  (
    .cgra_xminion_req_en( ctrl__cgra_xminion_req_en ),
    .cgra_xminion_req_rdy( ctrl__cgra_xminion_req_rdy ),
    .cgra_xminion_resp_en( ctrl__cgra_xminion_resp_en ),
    .cgra_xminion_resp_rdy( ctrl__cgra_xminion_resp_rdy ),
    .clk( ctrl__clk ),
    .is_CSR_transaction( ctrl__is_CSR_transaction ),
    .is_calc_done( ctrl__is_calc_done ),
    .is_go_transaction( ctrl__is_go_transaction ),
    .is_scratchpad_transaction( ctrl__is_scratchpad_transaction ),
    .is_staging( ctrl__is_staging ),
    .is_write_transaction( ctrl__is_write_transaction ),
    .is_xminion_resp_from_scratchpad( ctrl__is_xminion_resp_from_scratchpad ),
    .mmaster_req_en( ctrl__mmaster_req_en ),
    .mmaster_req_rdy( ctrl__mmaster_req_rdy ),
    .mmaster_resp_en( ctrl__mmaster_resp_en ),
    .mmaster_resp_rdy( ctrl__mmaster_resp_rdy ),
    .reset( ctrl__reset ),
    .stage_val( ctrl__stage_val ),
    .xbar_xminion_req_en( ctrl__xbar_xminion_req_en ),
    .xbar_xminion_req_rdy( ctrl__xbar_xminion_req_rdy ),
    .xbar_xminion_resp_en( ctrl__xbar_xminion_resp_en ),
    .xbar_xminion_resp_rdy( ctrl__xbar_xminion_resp_rdy ),
    .xminion_req_en( ctrl__xminion_req_en ),
    .xminion_req_rdy( ctrl__xminion_req_rdy ),
    .xminion_resp_en( ctrl__xminion_resp_en ),
    .xminion_resp_rdy( ctrl__xminion_resp_rdy )
  );

  //-------------------------------------------------------------
  // End of component ctrl
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component dpath
  //-------------------------------------------------------------

  logic [0:0] dpath__cgra_xminion_req_en;
  logic [0:0] dpath__cgra_xminion_req_rdy;
  logic [0:0] dpath__cgra_xminion_resp_en;
  logic [0:0] dpath__cgra_xminion_resp_rdy;
  logic [0:0] dpath__clk;
  logic [0:0] dpath__is_CSR_transaction;
  logic [0:0] dpath__is_calc_done;
  logic [0:0] dpath__is_go_transaction;
  logic [0:0] dpath__is_scratchpad_transaction;
  logic [0:0] dpath__is_staging;
  logic [0:0] dpath__is_write_transaction;
  logic [0:0] dpath__is_xminion_resp_from_scratchpad;
  logic [0:0] dpath__reset;
  logic [0:0] dpath__stage_val;
  logic [0:0] dpath__xbar_xminion_req_en;
  logic [0:0] dpath__xbar_xminion_req_rdy;
  logic [0:0] dpath__xbar_xminion_resp_en;
  logic [0:0] dpath__xbar_xminion_resp_rdy;
  CgraXcelReqMsg__wen_1__addr_14__data_32 dpath__xminion_req_msg;
  CgraXcelRespMsg__wen_1__addr_14__data_32 dpath__xminion_resp_msg;
  logic [0:0] dpath__mem_master__req__en [0:3];
  CgraRemoteMemReqMsg__wen_1__addr_28__data_32 dpath__mem_master__req__msg [0:3];
  logic [0:0] dpath__mem_master__req__rdy [0:3];
  logic [0:0] dpath__mem_master__resp__en [0:3];
  CgraRemoteMemRespMsg__wen_1__addr_28__data_32 dpath__mem_master__resp__msg [0:3];
  logic [0:0] dpath__mem_master__resp__rdy [0:3];

  CGRAXcelDpath__e7b85fc84228c577 dpath
  (
    .cgra_xminion_req_en( dpath__cgra_xminion_req_en ),
    .cgra_xminion_req_rdy( dpath__cgra_xminion_req_rdy ),
    .cgra_xminion_resp_en( dpath__cgra_xminion_resp_en ),
    .cgra_xminion_resp_rdy( dpath__cgra_xminion_resp_rdy ),
    .clk( dpath__clk ),
    .is_CSR_transaction( dpath__is_CSR_transaction ),
    .is_calc_done( dpath__is_calc_done ),
    .is_go_transaction( dpath__is_go_transaction ),
    .is_scratchpad_transaction( dpath__is_scratchpad_transaction ),
    .is_staging( dpath__is_staging ),
    .is_write_transaction( dpath__is_write_transaction ),
    .is_xminion_resp_from_scratchpad( dpath__is_xminion_resp_from_scratchpad ),
    .reset( dpath__reset ),
    .stage_val( dpath__stage_val ),
    .xbar_xminion_req_en( dpath__xbar_xminion_req_en ),
    .xbar_xminion_req_rdy( dpath__xbar_xminion_req_rdy ),
    .xbar_xminion_resp_en( dpath__xbar_xminion_resp_en ),
    .xbar_xminion_resp_rdy( dpath__xbar_xminion_resp_rdy ),
    .xminion_req_msg( dpath__xminion_req_msg ),
    .xminion_resp_msg( dpath__xminion_resp_msg ),
    .mem_master__req__en( dpath__mem_master__req__en ),
    .mem_master__req__msg( dpath__mem_master__req__msg ),
    .mem_master__req__rdy( dpath__mem_master__req__rdy ),
    .mem_master__resp__en( dpath__mem_master__resp__en ),
    .mem_master__resp__msg( dpath__mem_master__resp__msg ),
    .mem_master__resp__rdy( dpath__mem_master__resp__rdy )
  );

  //-------------------------------------------------------------
  // End of component dpath
  //-------------------------------------------------------------

  assign ctrl__clk = clk;
  assign ctrl__reset = reset;
  assign dpath__clk = clk;
  assign dpath__reset = reset;
  assign mem_master__req__en[0] = dpath__mem_master__req__en[0];
  assign mem_master__req__msg[0] = dpath__mem_master__req__msg[0];
  assign dpath__mem_master__req__rdy[0] = mem_master__req__rdy[0];
  assign dpath__mem_master__resp__en[0] = mem_master__resp__en[0];
  assign dpath__mem_master__resp__msg[0] = mem_master__resp__msg[0];
  assign mem_master__resp__rdy[0] = dpath__mem_master__resp__rdy[0];
  assign mem_master__req__en[1] = dpath__mem_master__req__en[1];
  assign mem_master__req__msg[1] = dpath__mem_master__req__msg[1];
  assign dpath__mem_master__req__rdy[1] = mem_master__req__rdy[1];
  assign dpath__mem_master__resp__en[1] = mem_master__resp__en[1];
  assign dpath__mem_master__resp__msg[1] = mem_master__resp__msg[1];
  assign mem_master__resp__rdy[1] = dpath__mem_master__resp__rdy[1];
  assign mem_master__req__en[2] = dpath__mem_master__req__en[2];
  assign mem_master__req__msg[2] = dpath__mem_master__req__msg[2];
  assign dpath__mem_master__req__rdy[2] = mem_master__req__rdy[2];
  assign dpath__mem_master__resp__en[2] = mem_master__resp__en[2];
  assign dpath__mem_master__resp__msg[2] = mem_master__resp__msg[2];
  assign mem_master__resp__rdy[2] = dpath__mem_master__resp__rdy[2];
  assign mem_master__req__en[3] = dpath__mem_master__req__en[3];
  assign mem_master__req__msg[3] = dpath__mem_master__req__msg[3];
  assign dpath__mem_master__req__rdy[3] = mem_master__req__rdy[3];
  assign dpath__mem_master__resp__en[3] = mem_master__resp__en[3];
  assign dpath__mem_master__resp__msg[3] = mem_master__resp__msg[3];
  assign mem_master__resp__rdy[3] = dpath__mem_master__resp__rdy[3];
  assign ctrl__xminion_req_en = xcel_minion__req__en;
  assign xcel_minion__req__rdy = ctrl__xminion_req_rdy;
  assign dpath__xminion_req_msg = xcel_minion__req__msg;
  assign xcel_minion__resp__en = ctrl__xminion_resp_en;
  assign ctrl__xminion_resp_rdy = xcel_minion__resp__rdy;
  assign xcel_minion__resp__msg = dpath__xminion_resp_msg;
  assign dpath__is_staging = ctrl__is_staging;
  assign dpath__stage_val = ctrl__stage_val;
  assign dpath__cgra_xminion_req_en = ctrl__cgra_xminion_req_en;
  assign ctrl__cgra_xminion_req_rdy = dpath__cgra_xminion_req_rdy;
  assign ctrl__cgra_xminion_resp_en = dpath__cgra_xminion_resp_en;
  assign dpath__cgra_xminion_resp_rdy = ctrl__cgra_xminion_resp_rdy;
  assign dpath__xbar_xminion_req_en = ctrl__xbar_xminion_req_en;
  assign ctrl__xbar_xminion_req_rdy = dpath__xbar_xminion_req_rdy;
  assign ctrl__xbar_xminion_resp_en = dpath__xbar_xminion_resp_en;
  assign dpath__xbar_xminion_resp_rdy = ctrl__xbar_xminion_resp_rdy;
  assign ctrl__is_go_transaction = dpath__is_go_transaction;
  assign ctrl__is_CSR_transaction = dpath__is_CSR_transaction;
  assign ctrl__is_scratchpad_transaction = dpath__is_scratchpad_transaction;
  assign ctrl__is_write_transaction = dpath__is_write_transaction;
  assign ctrl__is_calc_done = dpath__is_calc_done;
  assign dpath__is_xminion_resp_from_scratchpad = ctrl__is_xminion_resp_from_scratchpad;

endmodule


// PyMTL Component HBEndpointRXAdapter Definition
// Full name: HBEndpointRXAdapter__hb_params_<src.hammerblade.params.HBParams object at 0x7fce5e7ab4d0>__xcel_params_CGRAParams: base_addr_bound:16384, base_addr_register:0, base_addr_scratchpad:256, cfg_nwords:1, cfg_type:<class 'pymtl3.datatypes.bits_import.Bits32'>, data_width:32, enable_FP:True, me_cfg_type:<class 'types.MEConfigMsg_8x8'>, mul_cycles:0, ncols:8, nrows:8, nspads:4, num_remote_masters:4, pe_cfg_type:<class 'types.PEConfigMsg_8x8'>, remote_master_addr_width:28, remote_master_data_width_factor:1, rf_nregs:2, spad_data_width:32, spad_mask_size:0, spad_num_entries:1024, trace_verbosity:0
// At /work/global/pp482/cgra/src/hammerblade/HBEndpointRXAdapter.py

module HBEndpointRXAdapter__57ad2bd5bde15988
(
  input  logic [0:0] clk ,
  input  logic [4:0] my_x ,
  input  logic [3:0] my_y ,
  input  logic [27:0] req_addr ,
  input  logic [31:0] req_data ,
  input  logic [6:0] req_load_info ,
  input  logic [3:0] req_mask ,
  input  logic [4:0] req_src_x_cord ,
  input  logic [3:0] req_src_y_cord ,
  input  logic [0:0] req_val ,
  input  logic [0:0] req_we ,
  output logic [0:0] req_yumi ,
  input  logic [0:0] reset ,
  output logic [31:0] resp_data ,
  output logic [0:0] resp_val ,
  output logic [0:0] xcel_master__req__en ,
  output CgraXcelReqMsg__wen_1__addr_14__data_32 xcel_master__req__msg ,
  input logic [0:0] xcel_master__req__rdy ,
  input logic [0:0] xcel_master__resp__en ,
  input CgraXcelRespMsg__wen_1__addr_14__data_32 xcel_master__resp__msg ,
  output logic [0:0] xcel_master__resp__rdy 
);
  localparam logic [1:0] __const__bytes_offset_at_RX_word_addr_to_byte_addr  = 2'd2;
  localparam logic [3:0] __const__word_addr_bits_at_RX_word_addr_to_byte_addr  = 4'd12;
  logic [0:0] is_DRAM_enable_addr;
  logic [0:0] is_socket_CSR_addr;
  logic [0:0] is_xcel_addr;

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/hammerblade/HBEndpointRXAdapter.py:85
  // @update
  // def RX_word_addr_to_byte_addr():
  //   s.xcel_master.req.msg.addr[0:bytes_offset] @= 0
  //   s.xcel_master.req.msg.addr[bytes_offset:bytes_offset+word_addr_bits] @= \
  //                                                 s.req_addr[0:word_addr_bits]
  
  always_comb begin : RX_word_addr_to_byte_addr
    xcel_master__req__msg.addr[4'd1:4'd0] = 2'd0;
    xcel_master__req__msg.addr[4'd13:4'( __const__bytes_offset_at_RX_word_addr_to_byte_addr )] = req_addr[5'd11:5'd0];
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/hammerblade/HBEndpointRXAdapter.py:73
  // @update
  // def RX_yumi_req():
  //   s.req_yumi @= (s.is_xcel_addr & s.req_val & s.xcel_master.req.rdy) | \
  //                (~s.is_xcel_addr & s.req_val)
  
  always_comb begin : RX_yumi_req
    req_yumi = ( ( is_xcel_addr & req_val ) & xcel_master__req__rdy ) | ( ( ~is_xcel_addr ) & req_val );
  end

  // PyMTL Lambda Block Source
  // At /work/global/pp482/cgra/src/hammerblade/HBEndpointRXAdapter.py:78
  // s.xcel_master.req.en //= lambda: s.req_yumi & s.is_xcel_addr
  
  always_comb begin : _lambda__s_dut_rx_xcel_master_req_en
    xcel_master__req__en = req_yumi & is_xcel_addr;
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/hammerblade/HBEndpointRXAdapter.py:55
  // @update
  // def check_RX_CSR_addr():
  //   s.is_socket_CSR_addr @= s.req_addr[hp.epa_word_addr_width-1] & \
  //                         ( s.req_addr[hp.epa_word_addr_width:hp.addr_width] == 0 )
  
  always_comb begin : check_RX_CSR_addr
    is_socket_CSR_addr = req_addr[5'd16 - 5'd1] & ( req_addr[5'd27:5'd16] == 12'd0 );
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/hammerblade/HBEndpointRXAdapter.py:61
  // @update
  // def check_RX_DRAM_enable_addr():
  //   s.is_DRAM_enable_addr @= s.is_socket_CSR_addr & \
  //                          ( s.req_addr[0:hp.epa_word_addr_width-1] == 4 )
  
  always_comb begin : check_RX_DRAM_enable_addr
    is_DRAM_enable_addr = is_socket_CSR_addr & ( req_addr[4'd14:5'd0] == 15'd4 );
  end

  // PyMTL Update Block Source
  // At /work/global/pp482/cgra/src/hammerblade/HBEndpointRXAdapter.py:66
  // @update
  // def check_RX_xcel_addr():
  //   s.is_xcel_addr @=s.req_addr[xp.addr_width:hp.addr_width] == 0
  
  always_comb begin : check_RX_xcel_addr
    is_xcel_addr = req_addr[5'd27:5'd14] == 14'd0;
  end

  assign xcel_master__req__msg.wen = req_we;
  assign xcel_master__req__msg.data = req_data;
  assign resp_val = xcel_master__resp__en;
  assign xcel_master__resp__rdy = 1'd1;
  assign resp_data = xcel_master__resp__msg.data;

endmodule


// PyMTL Component HBEndpointTXAdapter Definition
// Full name: HBEndpointTXAdapter__hb_params_<src.hammerblade.params.HBParams object at 0x7fce5e7ab4d0>__xcel_params_CGRAParams: base_addr_bound:16384, base_addr_register:0, base_addr_scratchpad:256, cfg_nwords:1, cfg_type:<class 'pymtl3.datatypes.bits_import.Bits32'>, data_width:32, enable_FP:True, me_cfg_type:<class 'types.MEConfigMsg_8x8'>, mul_cycles:0, ncols:8, nrows:8, nspads:4, num_remote_masters:4, pe_cfg_type:<class 'types.PEConfigMsg_8x8'>, remote_master_addr_width:28, remote_master_data_width_factor:1, rf_nregs:2, spad_data_width:32, spad_mask_size:0, spad_num_entries:1024, trace_verbosity:0
// At /work/global/pp482/cgra/src/hammerblade/HBEndpointTXAdapter.py

module HBEndpointTXAdapter__57ad2bd5bde15988
(
  input  logic [0:0] clk ,
  input  logic [4:0] my_x ,
  input  logic [3:0] my_y ,
  input  logic [4:0] req_credits ,
  output logic [88:0] req_pkt ,
  input  logic [0:0] req_rdy ,
  output logic [0:0] req_val ,
  input  logic [0:0] reset ,
  input  logic [31:0] resp_data ,
  input  logic [0:0] resp_fifo_full ,
  input  logic [1:0] resp_pkt_type ,
  input  logic [4:0] resp_reg_id ,
  input  logic [0:0] resp_val ,
  output logic [0:0] resp_yumi ,
  input logic [0:0] mem_minion__req__en [0:3],
  input CgraRemoteMemReqMsg__wen_1__addr_28__data_32 mem_minion__req__msg [0:3],
  output logic [0:0] mem_minion__req__rdy [0:3],
  output logic [0:0] mem_minion__resp__en [0:3],
  output CgraRemoteMemRespMsg__wen_1__addr_28__data_32 mem_minion__resp__msg [0:3],
  input logic [0:0] mem_minion__resp__rdy [0:3]
);

  assign req_val = 1'd0;
  assign req_pkt = 89'd0;
  assign resp_yumi = 1'd0;
  assign mem_minion__req__rdy[0] = 1'd1;
  assign mem_minion__resp__en[0] = 1'd0;
  assign mem_minion__resp__msg[0] = { 1'd0, 28'd0, 32'd0 };
  assign mem_minion__req__rdy[1] = 1'd1;
  assign mem_minion__resp__en[1] = 1'd0;
  assign mem_minion__resp__msg[1] = { 1'd0, 28'd0, 32'd0 };
  assign mem_minion__req__rdy[2] = 1'd1;
  assign mem_minion__resp__en[2] = 1'd0;
  assign mem_minion__resp__msg[2] = { 1'd0, 28'd0, 32'd0 };
  assign mem_minion__req__rdy[3] = 1'd1;
  assign mem_minion__resp__en[3] = 1'd0;
  assign mem_minion__resp__msg[3] = { 1'd0, 28'd0, 32'd0 };

endmodule


// PyMTL Component HBEndpointCGRAXcel Definition
// Full name: HBEndpointCGRAXcel__hb_params_<src.hammerblade.params.HBParams object at 0x7fce5e7ab4d0>__xcel_params_CGRAParams: base_addr_bound:16384, base_addr_register:0, base_addr_scratchpad:256, cfg_nwords:1, cfg_type:<class 'pymtl3.datatypes.bits_import.Bits32'>, data_width:32, enable_FP:True, me_cfg_type:<class 'types.MEConfigMsg_8x8'>, mul_cycles:0, ncols:8, nrows:8, nspads:4, num_remote_masters:4, pe_cfg_type:<class 'types.PEConfigMsg_8x8'>, remote_master_addr_width:28, remote_master_data_width_factor:1, rf_nregs:2, spad_data_width:32, spad_mask_size:0, spad_num_entries:1024, trace_verbosity:0
// At /work/global/pp482/cgra/src/hammerblade/HBEndpointCGRAXcel.py

module HBEndpointCGRAXcel_8x8Array_4x4KBSpads
(
  input  logic [0:0] clk ,
  input  logic [27:0] in_addr_i ,
  input  logic [31:0] in_data_i ,
  input  logic [6:0] in_load_info_i ,
  input  logic [3:0] in_mask_i ,
  input  logic [4:0] in_src_x_cord_i ,
  input  logic [3:0] in_src_y_cord_i ,
  input  logic [0:0] in_v_i ,
  input  logic [0:0] in_we_i ,
  output logic [0:0] in_yumi_o ,
  input  logic [4:0] my_x_i ,
  input  logic [3:0] my_y_i ,
  input  logic [0:0] out_credit_or_ready_i ,
  input  logic [4:0] out_credits_i ,
  output logic [88:0] out_packet_o ,
  output logic [0:0] out_v_o ,
  input  logic [0:0] reset ,
  input  logic [31:0] returned_data_r_i ,
  input  logic [0:0] returned_fifo_full_i ,
  input  logic [1:0] returned_pkt_type_r_i ,
  input  logic [4:0] returned_reg_id_r_i ,
  input  logic [0:0] returned_v_r_i ,
  output logic [0:0] returned_yumi_o ,
  output logic [31:0] returning_data_o ,
  output logic [0:0] returning_v_o 
);
  //-------------------------------------------------------------
  // Component cgra_xcel
  //-------------------------------------------------------------

  logic [0:0] cgra_xcel__clk;
  logic [0:0] cgra_xcel__reset;
  logic [0:0] cgra_xcel__mem_master__req__en [0:3];
  CgraRemoteMemReqMsg__wen_1__addr_28__data_32 cgra_xcel__mem_master__req__msg [0:3];
  logic [0:0] cgra_xcel__mem_master__req__rdy [0:3];
  logic [0:0] cgra_xcel__mem_master__resp__en [0:3];
  CgraRemoteMemRespMsg__wen_1__addr_28__data_32 cgra_xcel__mem_master__resp__msg [0:3];
  logic [0:0] cgra_xcel__mem_master__resp__rdy [0:3];
  logic [0:0] cgra_xcel__xcel_minion__req__en;
  CgraXcelReqMsg__wen_1__addr_14__data_32 cgra_xcel__xcel_minion__req__msg;
  logic [0:0] cgra_xcel__xcel_minion__req__rdy;
  logic [0:0] cgra_xcel__xcel_minion__resp__en;
  CgraXcelRespMsg__wen_1__addr_14__data_32 cgra_xcel__xcel_minion__resp__msg;
  logic [0:0] cgra_xcel__xcel_minion__resp__rdy;

  CGRAXcel__e7b85fc84228c577 cgra_xcel
  (
    .clk( cgra_xcel__clk ),
    .reset( cgra_xcel__reset ),
    .mem_master__req__en( cgra_xcel__mem_master__req__en ),
    .mem_master__req__msg( cgra_xcel__mem_master__req__msg ),
    .mem_master__req__rdy( cgra_xcel__mem_master__req__rdy ),
    .mem_master__resp__en( cgra_xcel__mem_master__resp__en ),
    .mem_master__resp__msg( cgra_xcel__mem_master__resp__msg ),
    .mem_master__resp__rdy( cgra_xcel__mem_master__resp__rdy ),
    .xcel_minion__req__en( cgra_xcel__xcel_minion__req__en ),
    .xcel_minion__req__msg( cgra_xcel__xcel_minion__req__msg ),
    .xcel_minion__req__rdy( cgra_xcel__xcel_minion__req__rdy ),
    .xcel_minion__resp__en( cgra_xcel__xcel_minion__resp__en ),
    .xcel_minion__resp__msg( cgra_xcel__xcel_minion__resp__msg ),
    .xcel_minion__resp__rdy( cgra_xcel__xcel_minion__resp__rdy )
  );

  //-------------------------------------------------------------
  // End of component cgra_xcel
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component rx
  //-------------------------------------------------------------

  logic [0:0] rx__clk;
  logic [4:0] rx__my_x;
  logic [3:0] rx__my_y;
  logic [27:0] rx__req_addr;
  logic [31:0] rx__req_data;
  logic [6:0] rx__req_load_info;
  logic [3:0] rx__req_mask;
  logic [4:0] rx__req_src_x_cord;
  logic [3:0] rx__req_src_y_cord;
  logic [0:0] rx__req_val;
  logic [0:0] rx__req_we;
  logic [0:0] rx__req_yumi;
  logic [0:0] rx__reset;
  logic [31:0] rx__resp_data;
  logic [0:0] rx__resp_val;
  logic [0:0] rx__xcel_master__req__en;
  CgraXcelReqMsg__wen_1__addr_14__data_32 rx__xcel_master__req__msg;
  logic [0:0] rx__xcel_master__req__rdy;
  logic [0:0] rx__xcel_master__resp__en;
  CgraXcelRespMsg__wen_1__addr_14__data_32 rx__xcel_master__resp__msg;
  logic [0:0] rx__xcel_master__resp__rdy;

  HBEndpointRXAdapter__57ad2bd5bde15988 rx
  (
    .clk( rx__clk ),
    .my_x( rx__my_x ),
    .my_y( rx__my_y ),
    .req_addr( rx__req_addr ),
    .req_data( rx__req_data ),
    .req_load_info( rx__req_load_info ),
    .req_mask( rx__req_mask ),
    .req_src_x_cord( rx__req_src_x_cord ),
    .req_src_y_cord( rx__req_src_y_cord ),
    .req_val( rx__req_val ),
    .req_we( rx__req_we ),
    .req_yumi( rx__req_yumi ),
    .reset( rx__reset ),
    .resp_data( rx__resp_data ),
    .resp_val( rx__resp_val ),
    .xcel_master__req__en( rx__xcel_master__req__en ),
    .xcel_master__req__msg( rx__xcel_master__req__msg ),
    .xcel_master__req__rdy( rx__xcel_master__req__rdy ),
    .xcel_master__resp__en( rx__xcel_master__resp__en ),
    .xcel_master__resp__msg( rx__xcel_master__resp__msg ),
    .xcel_master__resp__rdy( rx__xcel_master__resp__rdy )
  );

  //-------------------------------------------------------------
  // End of component rx
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component tx
  //-------------------------------------------------------------

  logic [0:0] tx__clk;
  logic [4:0] tx__my_x;
  logic [3:0] tx__my_y;
  logic [4:0] tx__req_credits;
  logic [88:0] tx__req_pkt;
  logic [0:0] tx__req_rdy;
  logic [0:0] tx__req_val;
  logic [0:0] tx__reset;
  logic [31:0] tx__resp_data;
  logic [0:0] tx__resp_fifo_full;
  logic [1:0] tx__resp_pkt_type;
  logic [4:0] tx__resp_reg_id;
  logic [0:0] tx__resp_val;
  logic [0:0] tx__resp_yumi;
  logic [0:0] tx__mem_minion__req__en [0:3];
  CgraRemoteMemReqMsg__wen_1__addr_28__data_32 tx__mem_minion__req__msg [0:3];
  logic [0:0] tx__mem_minion__req__rdy [0:3];
  logic [0:0] tx__mem_minion__resp__en [0:3];
  CgraRemoteMemRespMsg__wen_1__addr_28__data_32 tx__mem_minion__resp__msg [0:3];
  logic [0:0] tx__mem_minion__resp__rdy [0:3];

  HBEndpointTXAdapter__57ad2bd5bde15988 tx
  (
    .clk( tx__clk ),
    .my_x( tx__my_x ),
    .my_y( tx__my_y ),
    .req_credits( tx__req_credits ),
    .req_pkt( tx__req_pkt ),
    .req_rdy( tx__req_rdy ),
    .req_val( tx__req_val ),
    .reset( tx__reset ),
    .resp_data( tx__resp_data ),
    .resp_fifo_full( tx__resp_fifo_full ),
    .resp_pkt_type( tx__resp_pkt_type ),
    .resp_reg_id( tx__resp_reg_id ),
    .resp_val( tx__resp_val ),
    .resp_yumi( tx__resp_yumi ),
    .mem_minion__req__en( tx__mem_minion__req__en ),
    .mem_minion__req__msg( tx__mem_minion__req__msg ),
    .mem_minion__req__rdy( tx__mem_minion__req__rdy ),
    .mem_minion__resp__en( tx__mem_minion__resp__en ),
    .mem_minion__resp__msg( tx__mem_minion__resp__msg ),
    .mem_minion__resp__rdy( tx__mem_minion__resp__rdy )
  );

  //-------------------------------------------------------------
  // End of component tx
  //-------------------------------------------------------------

  assign tx__clk = clk;
  assign tx__reset = reset;
  assign rx__clk = clk;
  assign rx__reset = reset;
  assign cgra_xcel__clk = clk;
  assign cgra_xcel__reset = reset;
  assign cgra_xcel__xcel_minion__req__en = rx__xcel_master__req__en;
  assign cgra_xcel__xcel_minion__req__msg = rx__xcel_master__req__msg;
  assign rx__xcel_master__req__rdy = cgra_xcel__xcel_minion__req__rdy;
  assign rx__xcel_master__resp__en = cgra_xcel__xcel_minion__resp__en;
  assign rx__xcel_master__resp__msg = cgra_xcel__xcel_minion__resp__msg;
  assign cgra_xcel__xcel_minion__resp__rdy = rx__xcel_master__resp__rdy;
  assign rx__req_val = in_v_i;
  assign rx__req_data = in_data_i;
  assign rx__req_mask = in_mask_i;
  assign rx__req_addr = in_addr_i;
  assign rx__req_we = in_we_i;
  assign rx__req_load_info = in_load_info_i;
  assign rx__req_src_x_cord = in_src_x_cord_i;
  assign rx__req_src_y_cord = in_src_y_cord_i;
  assign in_yumi_o = rx__req_yumi;
  assign returning_v_o = rx__resp_val;
  assign returning_data_o = rx__resp_data;
  assign rx__my_x = my_x_i;
  assign rx__my_y = my_y_i;
  assign tx__mem_minion__req__en[0] = cgra_xcel__mem_master__req__en[0];
  assign tx__mem_minion__req__msg[0] = cgra_xcel__mem_master__req__msg[0];
  assign cgra_xcel__mem_master__req__rdy[0] = tx__mem_minion__req__rdy[0];
  assign cgra_xcel__mem_master__resp__en[0] = tx__mem_minion__resp__en[0];
  assign cgra_xcel__mem_master__resp__msg[0] = tx__mem_minion__resp__msg[0];
  assign tx__mem_minion__resp__rdy[0] = cgra_xcel__mem_master__resp__rdy[0];
  assign tx__mem_minion__req__en[1] = cgra_xcel__mem_master__req__en[1];
  assign tx__mem_minion__req__msg[1] = cgra_xcel__mem_master__req__msg[1];
  assign cgra_xcel__mem_master__req__rdy[1] = tx__mem_minion__req__rdy[1];
  assign cgra_xcel__mem_master__resp__en[1] = tx__mem_minion__resp__en[1];
  assign cgra_xcel__mem_master__resp__msg[1] = tx__mem_minion__resp__msg[1];
  assign tx__mem_minion__resp__rdy[1] = cgra_xcel__mem_master__resp__rdy[1];
  assign tx__mem_minion__req__en[2] = cgra_xcel__mem_master__req__en[2];
  assign tx__mem_minion__req__msg[2] = cgra_xcel__mem_master__req__msg[2];
  assign cgra_xcel__mem_master__req__rdy[2] = tx__mem_minion__req__rdy[2];
  assign cgra_xcel__mem_master__resp__en[2] = tx__mem_minion__resp__en[2];
  assign cgra_xcel__mem_master__resp__msg[2] = tx__mem_minion__resp__msg[2];
  assign tx__mem_minion__resp__rdy[2] = cgra_xcel__mem_master__resp__rdy[2];
  assign tx__mem_minion__req__en[3] = cgra_xcel__mem_master__req__en[3];
  assign tx__mem_minion__req__msg[3] = cgra_xcel__mem_master__req__msg[3];
  assign cgra_xcel__mem_master__req__rdy[3] = tx__mem_minion__req__rdy[3];
  assign cgra_xcel__mem_master__resp__en[3] = tx__mem_minion__resp__en[3];
  assign cgra_xcel__mem_master__resp__msg[3] = tx__mem_minion__resp__msg[3];
  assign tx__mem_minion__resp__rdy[3] = cgra_xcel__mem_master__resp__rdy[3];
  assign out_v_o = tx__req_val;
  assign out_packet_o = tx__req_pkt;
  assign tx__req_rdy = out_credit_or_ready_i;
  assign tx__req_credits = out_credits_i;
  assign tx__resp_data = returned_data_r_i;
  assign tx__resp_reg_id = returned_reg_id_r_i;
  assign tx__resp_val = returned_v_r_i;
  assign tx__resp_pkt_type = returned_pkt_type_r_i;
  assign returned_yumi_o = tx__resp_yumi;
  assign tx__resp_fifo_full = returned_fifo_full_i;
  assign tx__my_x = my_x_i;
  assign tx__my_y = my_y_i;

endmodule
